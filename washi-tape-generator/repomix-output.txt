This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
assets/
  css/
    admin-style.css
    frontend-style.css
    preview-style.css
  js/
    admin-script.js
    elementor-editor.js
    frontend-script.js
    preview-script.js
includes/
  admin/
    views/
      admin-page.php
    class-washi-tape-admin.php
  elementor/
    class-washi-tape-elementor.php
  class-washi-tape-db.php
washi-tape-generator.php

================================================================
Files
================================================================

================
File: assets/css/admin-style.css
================
/**
 * Washi Tape Generator Admin Styles
 */

/* Admin Grid Layout */
.washi-tape-admin-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
    margin-top: 20px;
}

@media (max-width: 1200px) {
    .washi-tape-admin-grid {
        grid-template-columns: 1fr;
    }
}

/* Panel Styling */
.washi-tape-panel {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    margin-bottom: 20px;
}

.panel-header {
    background-color: #f0f0f1;
    padding: 15px 20px;
    border-bottom: 1px solid #dcdcde;
}

.panel-header h2 {
    margin: 0;
    font-size: 16px;
    font-weight: 600;
}

.panel-body {
    padding: 20px;
}

/* Form Styling */
.form-section {
    margin-bottom: 25px;
}

.form-section:last-child {
    margin-bottom: 0;
}

.form-section-title {
    font-size: 14px;
    font-weight: 600;
    margin-bottom: 15px;
    padding-bottom: 10px;
    border-bottom: 1px solid #f0f0f1;
    color: #1d2327;
}

.form-group {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 15px;
    margin-bottom: 15px;
}

.form-control {
    margin-bottom: 15px;
}

.form-control label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
    font-size: 13px;
    color: #50575e;
}

.form-control input[type="color"] {
    height: 35px;
    width: 100%;
    border: 1px solid #8c8f94;
    border-radius: 4px;
    padding: 0;
    cursor: pointer;
}

.form-control input[type="color"]::-webkit-color-swatch-wrapper {
    padding: 0;
}

.form-control input[type="color"]::-webkit-color-swatch {
    border: none;
    border-radius: 4px;
}

.form-control input[type="number"],
.form-control select,
.form-control input[type="text"] {
    width: 100%;
    padding: 8px;
    border: 1px solid #8c8f94;
    border-radius: 4px;
    font-size: 14px;
}

.form-control input[type="range"] {
    width: 100%;
}

/* Toggle Switch */
.toggle-container {
    display: flex;
    align-items: center;
    margin-top: 5px;
}

.toggle {
    position: relative;
    display: inline-block;
    width: 52px;
    height: 28px;
    margin-right: 10px;
}

.toggle input {
    opacity: 0;
    width: 0;
    height: 0;
}

.toggle-slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: .4s;
    border-radius: 28px;
}

.toggle-slider:before {
    position: absolute;
    content: "";
    height: 20px;
    width: 20px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    transition: .4s;
    border-radius: 50%;
}

input:checked + .toggle-slider {
    background-color: #2271b1;
}

input:focus + .toggle-slider {
    box-shadow: 0 0 1px #2271b1;
}

input:checked + .toggle-slider:before {
    transform: translateX(24px);
}

.toggle-label {
    font-weight: 500;
    font-size: 13px;
}

/* Range Sliders */
.range-slider {
    -webkit-appearance: none;
    height: 6px;
    border-radius: 3px;  
    background: #dcdcde;
    outline: none;
    padding: 0;
    margin: 8px 0;
}

.range-slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 16px;
    height: 16px;
    border-radius: 50%; 
    background: #2271b1;
    cursor: pointer;
    transition: background .15s ease-in-out;
}

.range-slider::-moz-range-thumb {
    width: 16px;
    height: 16px;
    border: 0;
    border-radius: 50%;
    background: #2271b1;
    cursor: pointer;
    transition: background .15s ease-in-out;
}

.range-slider::-webkit-slider-thumb:hover,
.range-slider::-moz-range-thumb:hover {
    background: #135e96;
}

output {
    display: inline-block;
    font-size: 12px;
    color: #50575e;
    margin-top: 5px;
}

/* Form Actions */
.form-actions {
    margin-top: 20px;
    display: flex;
    gap: 10px;
}

/* Preview Container */
.preview-container {
    position: relative;
    margin: 20px auto;
    width: 100%;
    max-width: 400px;
    height: 300px;
}

.content-box {
    width: 100%;
    height: 100%;
    background-color: #f0f0f1;
    border-radius: 8px;
    padding: 30px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    position: relative;
    z-index: 0;
    border: 1px solid #dcdcde;
}

.content-box h3 {
    margin-bottom: 15px;
    color: #1d2327;
}

.washi-svg {
    position: absolute;
    z-index: 1;
    filter: drop-shadow(0 1px 3px rgba(0, 0, 0, 0.2));
}

/* Saved Washi Tapes */
.saved-tapes-header {
    margin-top: 20px;
}

.washi-tape-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
    gap: 15px;
    margin-top: 10px;
}

.washi-tape-item {
    background-color: #f6f7f7;
    border-radius: 6px;
    border: 1px solid #dcdcde;
    overflow: hidden;
    position: relative;
    transition: all 0.2s ease;
}

.washi-tape-item:hover {
    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.1);
    transform: translateY(-2px);
}

.washi-tape-preview {
    height: 120px;
    padding: 15px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #fff;
    position: relative;
    overflow: visible;
}

.washi-tape-preview .preview-background {
    width: 100%;
    height: 100%;
    background-color: #f0f0f1;
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
}

.washi-tape-preview .preview-background svg {
    position: absolute;
    z-index: 1;
    width: 180px !important;
    height: 45px !important;
    left: 50% !important;
    top: 50% !important;
    transform: translate(-50%, -50%) !important;
    filter: drop-shadow(0 1px 3px rgba(0, 0, 0, 0.2));
}

.washi-tape-preview .preview-background svg path {
    vector-effect: non-scaling-stroke;
}

.washi-tape-preview .preview-background svg pattern {
    patternUnits: userSpaceOnUse;
}

.washi-tape-details {
    padding: 10px 15px;
}

.washi-tape-details h3 {
    margin: 0 0 10px 0;
    font-size: 14px;
    font-weight: 600;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.washi-tape-actions {
    display: flex;
    justify-content: space-between;
    gap: 10px;
}

.washi-tape-actions button {
    flex: 1;
    text-align: center;
}

/* Image Upload */
.image-upload-container {
    margin-top: 5px;
}

#image-preview {
    margin-top: 10px;
    background-color: #f0f0f1;
    border: 1px solid #dcdcde;
    padding: 5px;
    border-radius: 4px;
    min-height: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
}

/* Loading Indicator */
.loading-indicator {
    text-align: center;
    padding: 20px;
    color: #50575e;
}

================
File: assets/css/frontend-style.css
================
/**
 * Washi Tape Generator Frontend Styles
 */

/* Container for all washi tapes (hidden) */
#elementor-washi-tapes {
    display: none;
}

/* Element with washi tape */
.has-washi-tape {
    position: relative;
    overflow: visible !important;
}

/* Washi tape positioning and styling */
.elementor-washi-tape {
    position: absolute;
    z-index: 1;
    filter: drop-shadow(0 1px 3px rgba(0, 0, 0, 0.15));
    pointer-events: none;
}

/* Position helpers */
.has-washi-tape[data-washi-tape-position="top-left"] .elementor-washi-tape {
    top: -20px;
    left: -20px;
}

.has-washi-tape[data-washi-tape-position="top-right"] .elementor-washi-tape {
    top: -20px;
    right: -20px;
}

.has-washi-tape[data-washi-tape-position="bottom-left"] .elementor-washi-tape {
    bottom: -20px;
    left: -20px;
}

.has-washi-tape[data-washi-tape-position="bottom-right"] .elementor-washi-tape {
    bottom: -20px;
    right: -20px;
}

/* Make sure SVG fills the container */
.elementor-washi-tape svg {
    width: 100%;
    height: 100%;
}

================
File: assets/css/preview-style.css
================
/**
 * Washi Tape Generator Elementor Preview Styles
 * These styles are only loaded in the Elementor editor
 */

/* Highlight elements with washi tape in editor */
.elementor-editor-active .has-washi-tape {
    outline: 2px dashed #6d28d9;
    outline-offset: 2px;
}

/* Add a visual indicator */
.elementor-editor-active .has-washi-tape::before {
    content: "🎨 Washi Tape";
    position: absolute;
    top: -20px;
    left: 0;
    background-color: #6d28d9;
    color: white;
    font-size: 10px;
    padding: 2px 5px;
    border-radius: 3px;
    z-index: 9999;
    pointer-events: none;
}

/* Make sure washi tapes are visible and positioned correctly in editor */
.elementor-editor-active .elementor-washi-tape {
    opacity: 1;
    visibility: visible;
    pointer-events: none;
}

/* Make sure washi tapes don't interfere with editing */
.elementor-editor-active .elementor-element.elementor-widget > .elementor-washi-tape {
    pointer-events: none;
}

/* Show a hint in the panel */
.elementor-control-section_washi_tape_controls .elementor-panel-heading-title::after {
    content: "✨";
    margin-left: 5px;
    color: #6d28d9;
}

================
File: assets/js/admin-script.js
================
/**
 * Washi Tape Generator Admin Script
 */
(function($) {
    'use strict';

    // Initialize the washi tape generator
    const WashiTapeGenerator = {
        init: function() {
            this.initVars();
            this.bindEvents();
            this.initMediaUploader();
            this.updatePreview();
            this.loadSavedWashiTapes();
        },

        initVars: function() {
            // Form elements
            this.colorInput = $('#color');
            this.patternSelect = $('#pattern');
            this.tornEdgesCheckbox = $('#torn-edges');
            this.widthInput = $('#width');
            this.heightInput = $('#height');
            this.positionSelect = $('#position');
            this.rotationInput = $('#rotation');
            this.patternSpacingInput = $('#pattern-spacing');
            this.lineThicknessInput = $('#line-thickness');
            this.lineColorInput = $('#line-color');
            this.dotDiameterInput = $('#dot-diameter');
            this.dotColorInput = $('#dot-color');
            this.patternRandomnessInput = $('#pattern-randomness');
            this.useImageOverlayCheckbox = $('#use-image-overlay');
            this.imageUrlInput = $('#image-url');
            this.imageOpacityInput = $('#image-opacity');
            
            // Output elements
            this.washiSvg = document.getElementById('washi-svg');
            this.savedWashiTapesContainer = $('#saved-washi-tapes');
            
            // Other variables
            this.svgDefs = null;
            this.currentImageData = null;
        },

        bindEvents: function() {
            // Update preview on input change, excluding the title input
            $('input:not(#tape-title), select').on('input change', this.updatePreview.bind(this));
            
            // Reset button
            $('#reset-washi-tape').on('click', this.resetForm.bind(this));
            
            // Save button
            $('#save-washi-tape').on('click', this.saveWashiTape.bind(this));
            
            // Image overlay toggle
            this.useImageOverlayCheckbox.on('change', function() {
                if (this.checked) {
                    $('#image-overlay-controls').show();
                } else {
                    $('#image-overlay-controls').hide();
                }
                WashiTapeGenerator.updatePreview();
            });
            
            // Pattern select change
            this.patternSelect.on('change', function() {
                const pattern = $(this).val();
                $('#line-options').toggle(['horizontal-lines', 'vertical-lines', 'grid', 'random-lines'].includes(pattern));
                $('#dot-options').toggle(pattern === 'dots');
                $('#pattern-spacing-group').toggle(pattern !== 'solid');
                $('#pattern-randomness-control').toggle(pattern === 'random-lines');
                WashiTapeGenerator.updatePreview();
            });
            
            // Range slider value display
            $('#roughness').on('input', function() {
                $('#roughness-value').text($(this).val() + '%');
            });
            
            $('#segments').on('input', function() {
                $('#segments-value').text($(this).val());
            });
            
            $('#opacity').on('input', function() {
                $('#opacity-value').text($(this).val() + '%');
            });
            
            $('#pattern-opacity').on('input', function() {
                $('#pattern-opacity-value').text($(this).val() + '%');
            });
            
            $('#pattern-randomness').on('input', function() {
                $('#pattern-randomness-value').text($(this).val() + '%');
            });
            
            $('#image-opacity').on('input', function() {
                $('#image-opacity-value').text($(this).val() + '%');
            });
        },

        initMediaUploader: function() {
            let mediaUploader;
            
            $('#image-upload-btn').on('click', function(e) {
                e.preventDefault();
                
                // If the uploader object has already been created, reopen the dialog
                if (mediaUploader) {
                    mediaUploader.open();
                    return;
                }
                
                // Create the media uploader
                mediaUploader = wp.media({
                    title: 'Select Image for Washi Tape',
                    button: {
                        text: 'Use this image'
                    },
                    multiple: false
                });
                
                // When an image is selected, run a callback
                mediaUploader.on('select', function() {
                    const attachment = mediaUploader.state().get('selection').first().toJSON();
                    $('#image-url').val(attachment.url);
                    $('#image-preview').html('<img src="' + attachment.url + '" style="max-width: 100%; max-height: 100px;">');
                    
                    // Convert image to base64 for SVG embedding
                    WashiTapeGenerator.convertImageToBase64(attachment.url);
                });
                
                // Open the uploader dialog
                mediaUploader.open();
            });
        },

        convertImageToBase64: function(imageUrl) {
            const img = new Image();
            img.crossOrigin = 'Anonymous';
            img.onload = function() {
                const canvas = document.createElement('canvas');
                canvas.width = img.width;
                canvas.height = img.height;
                
                const ctx = canvas.getContext('2d');
                ctx.drawImage(img, 0, 0);
                
                const dataURL = canvas.toDataURL('image/png');
                WashiTapeGenerator.currentImageData = dataURL;
                WashiTapeGenerator.updatePreview();
            };
            
            img.onerror = function() {
                console.error('Error loading image');
                WashiTapeGenerator.currentImageData = null;
            };
            
            img.src = imageUrl;
        },

        generateTornEdgePath: function(width, height) {
            // Generate a random torn edge path with torn left and right edges only
            const segments = parseInt($('#segments').val()) || 10;
            const segmentHeight = height / segments;
            const roughnessPercent = parseInt($('#roughness').val()) || 10;
            const roughnessLeft = width * (roughnessPercent / 100); // Roughness of the left torn edge
            const roughnessRight = width * (roughnessPercent / 100); // Roughness of the right torn edge
            
            // Start at top-left
            let path = `M0,0 `;
            
            // Top edge (straight)
            path += `L${width},0 `;
            
            // Right edge with random variations
            for (let i = 1; i < segments; i++) {
                const y = i * segmentHeight;
                const x = width - (Math.random() * roughnessRight);
                path += `L${x},${y} `;
            }
            path += `L${width},${height} `;
            
            // Bottom edge (straight)
            path += `L0,${height} `;
            
            // Left edge with random variations
            for (let i = segments - 1; i > 0; i--) {
                const y = i * segmentHeight;
                const x = (Math.random() * roughnessLeft);
                path += `L${x},${y} `;
            }
            
            // Close the path
            path += 'Z';
            
            return path;
        },

        createSvgPattern: function(patternType) {
            // Remove existing defs
            const existingDefs = this.washiSvg.querySelector('defs');
            if (existingDefs) {
                this.washiSvg.removeChild(existingDefs);
            }
            
            // Create new defs
            this.svgDefs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');
            const patternId = 'pattern-' + Date.now();
            const pattern = document.createElementNS('http://www.w3.org/2000/svg', 'pattern');
            
            const spacing = parseInt(this.patternSpacingInput.val()) || 10;
            const patternSize = spacing;
            
            pattern.setAttribute('id', patternId);
            pattern.setAttribute('patternUnits', 'userSpaceOnUse');
            pattern.setAttribute('width', patternSize);
            pattern.setAttribute('height', patternSize);
            
            if (patternType === 'horizontal-lines') {
                const lineThickness = parseInt(this.lineThicknessInput.val()) || 1;
                const lineColor = this.lineColorInput.val();
                
                const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                line.setAttribute('x1', '0');
                line.setAttribute('y1', patternSize / 2);
                line.setAttribute('x2', patternSize);
                line.setAttribute('y2', patternSize / 2);
                line.setAttribute('stroke', lineColor);
                line.setAttribute('stroke-width', lineThickness);
                
                pattern.appendChild(line);
            } 
            else if (patternType === 'vertical-lines') {
                const lineThickness = parseInt(this.lineThicknessInput.val()) || 1;
                const lineColor = this.lineColorInput.val();
                
                const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                line.setAttribute('x1', patternSize / 2);
                line.setAttribute('y1', '0');
                line.setAttribute('x2', patternSize / 2);
                line.setAttribute('y2', patternSize);
                line.setAttribute('stroke', lineColor);
                line.setAttribute('stroke-width', lineThickness);
                
                pattern.appendChild(line);
            } 
            else if (patternType === 'grid') {
                const lineThickness = parseInt(this.lineThicknessInput.val()) || 1;
                const lineColor = this.lineColorInput.val();
                
                // Horizontal line
                const hLine = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                hLine.setAttribute('x1', '0');
                hLine.setAttribute('y1', patternSize / 2);
                hLine.setAttribute('x2', patternSize);
                hLine.setAttribute('y2', patternSize / 2);
                hLine.setAttribute('stroke', lineColor);
                hLine.setAttribute('stroke-width', lineThickness);
                
                // Vertical line
                const vLine = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                vLine.setAttribute('x1', patternSize / 2);
                vLine.setAttribute('y1', '0');
                vLine.setAttribute('x2', patternSize / 2);
                vLine.setAttribute('y2', patternSize);
                vLine.setAttribute('stroke', lineColor);
                vLine.setAttribute('stroke-width', lineThickness);
                
                pattern.appendChild(hLine);
                pattern.appendChild(vLine);
            }
            else if (patternType === 'random-lines') {
                const lineThickness = parseInt(this.lineThicknessInput.val()) || 1;
                const lineColor = this.lineColorInput.val();
                const randomness = parseInt(this.patternRandomnessInput.val()) || 0;
                
                // Add multiple random lines
                for (let i = 0; i < 4; i++) {
                    const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                    
                    if (Math.random() > 0.5) {
                        // Horizontal-ish line
                        const y = Math.random() * patternSize;
                        const deviation = (randomness / 100) * patternSize;
                        
                        line.setAttribute('x1', '0');
                        line.setAttribute('y1', y);
                        line.setAttribute('x2', patternSize);
                        line.setAttribute('y2', y + (Math.random() * deviation * 2 - deviation));
                    } else {
                        // Vertical-ish line
                        const x = Math.random() * patternSize;
                        const deviation = (randomness / 100) * patternSize;
                        
                        line.setAttribute('x1', x);
                        line.setAttribute('y1', '0');
                        line.setAttribute('x2', x + (Math.random() * deviation * 2 - deviation));
                        line.setAttribute('y2', patternSize);
                    }
                    
                    line.setAttribute('stroke', lineColor);
                    line.setAttribute('stroke-width', lineThickness);
                    pattern.appendChild(line);
                }
            }
            else if (patternType === 'dots') {
                const dotDiameter = parseInt(this.dotDiameterInput.val()) || 5;
                const dotColor = this.dotColorInput.val();
                
                const dot = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
                dot.setAttribute('cx', patternSize / 2);
                dot.setAttribute('cy', patternSize / 2);
                dot.setAttribute('r', dotDiameter / 2);
                dot.setAttribute('fill', dotColor);
                
                pattern.appendChild(dot);
            }
            
            this.svgDefs.appendChild(pattern);
            this.washiSvg.appendChild(this.svgDefs);
            
            return `url(#${patternId})`;
        },

        updatePreview: function() {
            // Get values from form
            const color = this.colorInput.val();
            const patternType = this.patternSelect.val();
            const tornEdges = this.tornEdgesCheckbox.prop('checked');
            const width = parseInt(this.widthInput.val()) || 180;
            const height = parseInt(this.heightInput.val()) || 45;
            const position = this.positionSelect.val();
            const rotation = parseInt(this.rotationInput.val()) || 0;
            const useImageOverlay = this.useImageOverlayCheckbox.prop('checked');
            const imageOpacity = parseInt(this.imageOpacityInput.val()) / 100 || 0.5;
            
            // Clear existing SVG content
            while (this.washiSvg.firstChild) {
                this.washiSvg.removeChild(this.washiSvg.firstChild);
            }
            
            // Set SVG dimensions
            this.washiSvg.setAttribute('width', width);
            this.washiSvg.setAttribute('height', height);
            
            // Create pattern if needed
            let fill = color;
            let patternFill = null;
            
            if (patternType !== 'solid') {
                patternFill = this.createSvgPattern(patternType);
            }
            
            // Create the tape shape
            const tapePath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
            
            // Set path data based on torn edges setting
            if (tornEdges) {
                tapePath.setAttribute('d', this.generateTornEdgePath(width, height));
            } else {
                tapePath.setAttribute('d', `M0,0 L${width},0 L${width},${height} L0,${height} Z`);
            }
            
            // Apply fill color with opacity
            const baseOpacity = parseInt($('#opacity').val()) / 100 || 1;
            tapePath.setAttribute('fill', fill);
            tapePath.setAttribute('fill-opacity', baseOpacity);
            
            // Add the path to the SVG
            this.washiSvg.appendChild(tapePath);
            
            // Add pattern overlay if selected
            if (patternFill) {
                const patternOpacity = parseInt($('#pattern-opacity').val()) / 100 || 1;
                const patternOverlay = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                patternOverlay.setAttribute('d', tapePath.getAttribute('d'));
                patternOverlay.setAttribute('fill', patternFill);
                patternOverlay.setAttribute('fill-opacity', patternOpacity);
                this.washiSvg.appendChild(patternOverlay);
            }
            
            // Add image overlay if enabled
            if (useImageOverlay && this.currentImageData) {
                // Create clipPath for the image
                const clipPath = document.createElementNS('http://www.w3.org/2000/svg', 'clipPath');
                const clipPathId = 'clip-' + Date.now();
                clipPath.setAttribute('id', clipPathId);
                
                // Clone the tape path for clipping
                const clipPathShape = tapePath.cloneNode(true);
                clipPath.appendChild(clipPathShape);
                
                // Add clipPath to defs
                if (!this.svgDefs) {
                    this.svgDefs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');
                }
                this.svgDefs.appendChild(clipPath);
                this.washiSvg.appendChild(this.svgDefs);

                const imageSize = $('#image-size').val();
                if (imageSize === 'repeat' || imageSize === 'repeat-x' || imageSize === 'repeat-y') {
                    // For repeating patterns, create a pattern element
                    const pattern = document.createElementNS('http://www.w3.org/2000/svg', 'pattern');
                    const patternId = 'pattern-' + Date.now();
                    pattern.setAttribute('id', patternId);
                    pattern.setAttribute('patternUnits', 'userSpaceOnUse');
                    
                    // Load the image to get its dimensions
                    const tempImg = new Image();
                    tempImg.src = this.currentImageData;
                    tempImg.onload = () => {
                        const imgWidth = tempImg.width;
                        const imgHeight = tempImg.height;
                        
                        // Set pattern size based on repeat type
                        if (imageSize === 'repeat' || imageSize === 'repeat-x') {
                            pattern.setAttribute('width', imgWidth);
                        } else {
                            pattern.setAttribute('width', width);
                        }
                        if (imageSize === 'repeat' || imageSize === 'repeat-y') {
                            pattern.setAttribute('height', imgHeight);
                        } else {
                            pattern.setAttribute('height', height);
                        }
                        
                        // Add image to pattern
                        const patternImage = document.createElementNS('http://www.w3.org/2000/svg', 'image');
                        patternImage.setAttribute('href', this.currentImageData);
                        patternImage.setAttribute('width', imgWidth);
                        patternImage.setAttribute('height', imgHeight);
                        pattern.appendChild(patternImage);
                        
                        // Add pattern to defs
                        this.svgDefs.appendChild(pattern);
                        
                        // Create rect with pattern fill
                        const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
                        rect.setAttribute('width', width);
                        rect.setAttribute('height', height);
                        rect.setAttribute('fill', `url(#${patternId})`);
                        rect.setAttribute('clip-path', `url(#${clipPathId})`);
                        rect.setAttribute('opacity', imageOpacity);
                        this.washiSvg.appendChild(rect);
                    };
                } else {
                    // For cover/contain, use regular image
                    const image = document.createElementNS('http://www.w3.org/2000/svg', 'image');
                    image.setAttribute('href', this.currentImageData);
                    image.setAttribute('width', width);
                    image.setAttribute('height', height);
                    image.setAttribute('preserveAspectRatio', 
                        imageSize === 'cover' ? 'xMidYMid slice' : 'xMidYMid meet');
                    image.setAttribute('clip-path', `url(#${clipPathId})`);
                    image.setAttribute('opacity', imageOpacity);
                    this.washiSvg.appendChild(image);
                }
            }
            
            // Position the SVG in the preview
            const previewContainer = document.querySelector('.preview-container');
            const contentBox = document.querySelector('.content-box');
            
            // Add these lines to ensure the SVG is visible
            this.washiSvg.style.position = 'absolute';
            this.washiSvg.style.display = 'block';
            
            // Reset transform
            this.washiSvg.style.transform = '';
            
            if (position === 'left') {
                this.washiSvg.style.left = '-20px';
                this.washiSvg.style.top = '30px';
                this.washiSvg.style.transform = `rotate(${rotation - 10}deg)`;
            } else if (position === 'right') {
                this.washiSvg.style.right = '-20px';
                this.washiSvg.style.left = 'auto';
                this.washiSvg.style.top = '30px';
                this.washiSvg.style.transform = `rotate(${rotation + 10}deg)`;
            } else if (position === 'top') {
                this.washiSvg.style.left = '50%';
                this.washiSvg.style.top = '-20px';
                this.washiSvg.style.transform = `translateX(-50%) rotate(${rotation}deg)`;
            } else if (position === 'bottom') {
                this.washiSvg.style.left = '50%';
                this.washiSvg.style.bottom = '-20px';
                this.washiSvg.style.top = 'auto';
                this.washiSvg.style.transform = `translateX(-50%) rotate(${rotation}deg)`;
            }
        },

        resetForm: function() {
            // Reset form to default values
            $('#tape-title').val('');
            $('#tape-id').val('0');
            this.colorInput.val('#8a5cf7');
            this.patternSelect.val('vertical-lines').trigger('change');
            this.tornEdgesCheckbox.prop('checked', true);
            this.widthInput.val('180');
            this.heightInput.val('45');
            this.positionSelect.val('left');
            this.rotationInput.val('0');
            this.patternSpacingInput.val('10');
            this.lineThicknessInput.val('1');
            this.lineColorInput.val('#000000');
            this.dotDiameterInput.val('5');
            this.dotColorInput.val('#ffffff');
            this.patternRandomnessInput.val('0');
            $('#pattern-randomness-value').text('0%');
            this.useImageOverlayCheckbox.prop('checked', false).trigger('change');
            this.imageUrlInput.val('');
            this.imageOpacityInput.val('50');
            $('#image-opacity-value').text('50%');
            $('#image-preview').html('');
            this.currentImageData = null;
            
            // Reset range slider value displays
            $('#roughness').val('10');
            $('#roughness-value').text('10%');
            $('#segments').val('10');
            $('#segments-value').text('10');
            $('#opacity').val('100');
            $('#opacity-value').text('100%');
            $('#pattern-opacity').val('100');
            $('#pattern-opacity-value').text('100%');
            
            // Update preview
            this.updatePreview();
        },

        saveWashiTape: function() {
            // Get form values
            const title = $('#tape-title').val();
            const id = $('#tape-id').val();
            
            if (!title) {
                alert('Please enter a name for your washi tape.');
                return;
            }
            
            // Get SVG code and clean it up
            let svgCode = this.washiSvg.outerHTML;
            // Remove any escaped quotes and normalize the SVG
            svgCode = svgCode
                .replace(/&quot;/g, '"')
                .replace(/\\&quot;/g, '"')
                .replace(/\s+/g, ' ')
                .replace(/"\s+/g, '"')
                .replace(/\s+"/g, '"')
                .replace(/" >/g, '">')
                .replace(/> </g, '><')
                .replace(/\\"pattern-/g, 'pattern-')
                .replace(/\\"patternUnits=/g, 'patternUnits=')
                .replace(/\\"userSpaceOnUse\\"/g, 'userSpaceOnUse')
                .replace(/\\"width=/g, 'width=')
                .replace(/\\"height=/g, 'height=')
                .replace(/\\"(\d+)\\"/g, '"$1"')
                .replace(/absolute;=/g, '')
                .replace(/display:=/g, '')
                .replace(/left:=/g, '')
                .replace(/top:=/g, '')
                .replace(/transform:=/g, '')
                .replace(/rotate\(-10deg\);\\"/g, '')
                .replace(/\s+style="[^"]*"/g, '');
            
            // Ensure proper xmlns attribute
            if (!svgCode.includes('xmlns="http://www.w3.org/2000/svg"')) {
                svgCode = svgCode.replace('<svg', '<svg xmlns="http://www.w3.org/2000/svg"');
            }
            
            // Get all settings
            const settings = {
                color: this.colorInput.val(),
                pattern: this.patternSelect.val(),
                tornEdges: this.tornEdgesCheckbox.prop('checked'),
                width: this.widthInput.val(),
                height: this.heightInput.val(),
                position: this.positionSelect.val(),
                rotation: this.rotationInput.val(),
                patternSpacing: this.patternSpacingInput.val(),
                lineThickness: this.lineThicknessInput.val(),
                lineColor: this.lineColorInput.val(),
                dotDiameter: this.dotDiameterInput.val(),
                dotColor: this.dotColorInput.val(),
                patternRandomness: this.patternRandomnessInput.val(),
                roughness: $('#roughness').val(),
                segments: $('#segments').val(),
                opacity: $('#opacity').val(),
                patternOpacity: $('#pattern-opacity').val(),
                useImageOverlay: this.useImageOverlayCheckbox.prop('checked'),
                imageUrl: this.imageUrlInput.val(),
                imageOpacity: this.imageOpacityInput.val(),
                imageData: this.currentImageData,
                imageSize: $('#image-size').val()
            };
            
            // Save the washi tape
            $.ajax({
                url: washiTapeParams.ajaxUrl,
                type: 'POST',
                data: {
                    action: 'save_washi_tape',
                    nonce: washiTapeParams.nonce,
                    id: id,
                    title: title,
                    svg: svgCode,
                    settings: JSON.stringify(settings)
                },
                success: function(response) {
                    if (response.success) {
                        // After successful save, reload the saved tapes
                        WashiTapeGenerator.loadSavedWashiTapes();
                        
                        // Reset the form if this was a new tape
                        if (id === '0') {
                            WashiTapeGenerator.resetForm();
                        }
                        
                        alert('Washi tape saved successfully!');
                    } else {
                        alert('Error saving washi tape.');
                    }
                },
                error: function() {
                    alert('Error saving washi tape.');
                }
            });
        },

        loadSavedWashiTapes: function() {
            $.ajax({
                url: washiTapeParams.ajaxUrl,
                type: 'POST',
                data: {
                    action: 'get_washi_tapes',
                    nonce: washiTapeParams.nonce
                },
                beforeSend: function() {
                    WashiTapeGenerator.savedWashiTapesContainer.html('<div class="loading-indicator">Loading...</div>');
                },
                success: function(response) {
                    if (response.success && response.data.washi_tapes) {
                        if (response.data.washi_tapes.length === 0) {
                            WashiTapeGenerator.savedWashiTapesContainer.html('<p>No saved washi tapes yet.</p>');
                            return;
                        }
                        
                        let html = '<div class="washi-tape-grid">';
                        
                        response.data.washi_tapes.forEach(function(tape) {
                            // Clean up the SVG before inserting
                            const cleanSvg = tape.svg
                                .replace(/&quot;/g, '"')
                                .replace(/\\&quot;/g, '"')
                                .replace(/\s+/g, ' ')
                                .replace(/"\s+/g, '"')
                                .replace(/\s+"/g, '"')
                                .replace(/" >/g, '">')
                                .replace(/> </g, '><')
                                .replace(/absolute;/g, '')
                                .replace(/display:/g, '')
                                .replace(/left:/g, '')
                                .replace(/top:/g, '')
                                .replace(/transform:/g, '')
                                .replace(/rotate\(-10deg\);/g, '')
                                .replace(/style="[^"]*"/g, '')
                                .replace(/\\"(\d+)\\"/g, '"$1"')
                                .replace(/\\"([^"]+)\\"/g, '"$1"');
                                
                            html += '<div class="washi-tape-item" data-id="' + tape.id + '" data-settings="' + encodeURIComponent(tape.settings) + '">';
                            html += '<div class="washi-tape-preview">';
                            html += '<div class="preview-background">';
                            html += cleanSvg;
                            html += '</div>';
                            html += '</div>';
                            html += '<div class="washi-tape-details">';
                            html += '<h3>' + tape.title + '</h3>';
                            html += '<div class="washi-tape-actions">';
                            html += '<button type="button" class="button edit-washi-tape">Edit</button>';
                            html += '<button type="button" class="button button-link-delete delete-washi-tape">Delete</button>';
                            html += '</div>';
                            html += '</div>';
                            html += '</div>';
                        });
                        
                        html += '</div>';
                        
                        WashiTapeGenerator.savedWashiTapesContainer.html(html);
                        
                        // Add event listeners
                        $('.edit-washi-tape').on('click', WashiTapeGenerator.editWashiTape);
                        $('.delete-washi-tape').on('click', WashiTapeGenerator.deleteWashiTape);
                    } else {
                        WashiTapeGenerator.savedWashiTapesContainer.html('<p>Error loading washi tapes.</p>');
                    }
                },
                error: function() {
                    WashiTapeGenerator.savedWashiTapesContainer.html('<p>Error loading washi tapes.</p>');
                }
            });
        },

        editWashiTape: function() {
            const item = $(this).closest('.washi-tape-item');
            const id = item.data('id');
            const settingsJson = decodeURIComponent(item.data('settings'));
            const settings = JSON.parse(settingsJson);
            
            // Fill the form with the settings
            $('#tape-id').val(id);
            $('#tape-title').val(item.find('h3').text());
            
            // Set all form values
            WashiTapeGenerator.colorInput.val(settings.color);
            WashiTapeGenerator.patternSelect.val(settings.pattern).trigger('change');
            WashiTapeGenerator.tornEdgesCheckbox.prop('checked', settings.tornEdges);
            WashiTapeGenerator.widthInput.val(settings.width);
            WashiTapeGenerator.heightInput.val(settings.height);
            WashiTapeGenerator.positionSelect.val(settings.position);
            WashiTapeGenerator.rotationInput.val(settings.rotation);
            WashiTapeGenerator.patternSpacingInput.val(settings.patternSpacing);
            WashiTapeGenerator.lineThicknessInput.val(settings.lineThickness);
            WashiTapeGenerator.lineColorInput.val(settings.lineColor);
            WashiTapeGenerator.dotDiameterInput.val(settings.dotDiameter);
            WashiTapeGenerator.dotColorInput.val(settings.dotColor);
            WashiTapeGenerator.patternRandomnessInput.val(settings.patternRandomness || 0);
            $('#pattern-randomness-value').text((settings.patternRandomness || 0) + '%');
            $('#roughness').val(settings.roughness);
            $('#roughness-value').text(settings.roughness + '%');
            $('#segments').val(settings.segments);
            $('#segments-value').text(settings.segments);
            $('#opacity').val(settings.opacity);
            $('#opacity-value').text(settings.opacity + '%');
            $('#pattern-opacity').val(settings.patternOpacity);
            $('#pattern-opacity-value').text(settings.patternOpacity + '%');
            
            // Handle image overlay
            WashiTapeGenerator.useImageOverlayCheckbox.prop('checked', settings.useImageOverlay).trigger('change');
            if (settings.useImageOverlay && settings.imageUrl) {
                WashiTapeGenerator.imageUrlInput.val(settings.imageUrl);
                WashiTapeGenerator.imageOpacityInput.val(settings.imageOpacity);
                $('#image-opacity-value').text(settings.imageOpacity + '%');
                $('#image-size').val(settings.imageSize || 'cover');
                
                if (settings.imageData) {
                    WashiTapeGenerator.currentImageData = settings.imageData;
                    $('#image-preview').html('<img src="' + settings.imageData + '" style="max-width: 100%; max-height: 100px;">');
                } else if (settings.imageUrl) {
                    $('#image-preview').html('<img src="' + settings.imageUrl + '" style="max-width: 100%; max-height: 100px;">');
                    WashiTapeGenerator.convertImageToBase64(settings.imageUrl);
                }
            }
            
            // Scroll to top of form
            $('html, body').animate({
                scrollTop: $('.generator-panel').offset().top - 50
            }, 500);
            
            // Update preview
            WashiTapeGenerator.updatePreview();
        },

        deleteWashiTape: function() {
            if (!confirm('Are you sure you want to delete this washi tape?')) {
                return;
            }
            
            const item = $(this).closest('.washi-tape-item');
            const id = item.data('id');
            
            $.ajax({
                url: washiTapeParams.ajaxUrl,
                type: 'POST',
                data: {
                    action: 'delete_washi_tape',
                    nonce: washiTapeParams.nonce,
                    id: id
                },
                success: function(response) {
                    if (response.success) {
                        alert(response.data.message);
                        // Reload saved washi tapes
                        WashiTapeGenerator.loadSavedWashiTapes();
                    } else {
                        alert(response.data.message);
                    }
                },
                error: function() {
                    alert('An error occurred while deleting the washi tape.');
                }
            });
        }
    };

    // Initialize on document ready
    $(document).ready(function() {
        WashiTapeGenerator.init();
    });

})(jQuery);

================
File: assets/js/elementor-editor.js
================
/**
 * Washi Tape Generator - Elementor Editor Integration
 * This script handles the integration with Elementor editor
 */
(function($) {
    'use strict';

    // Track editor state
    let isEditorInitialized = false;
    let editorWashiTapes = {};

    /**
     * Initialize Washi Tape in Elementor editor
     */
    function initWashiTapeEditor() {
        if (isEditorInitialized) {
            return;
        }
        
        isEditorInitialized = true;
        
        // Create container for washi tapes if not exists
        if ($('#elementor-washi-tapes-container').length === 0) {
            $('body').append('<div id="elementor-washi-tapes-container" style="display:none;"></div>');
        }

        // Listen for panel changes
        elementor.channels.editor.on('section:activated', handleSectionActivated);
        
        // Listen for element settings changes
        elementor.channels.editor.on('change', handleSettingsChanged);
        
        // Listen for preview related events
        elementor.settings.page.model.on('change', handlePageSettingsChange);
        
        // Add custom CSS class to the editor
        $('body').addClass('washi-tape-editor-active');
        
        console.log('Washi Tape Generator: Elementor editor integration initialized');
        
        // Scan for existing washi tapes
        scanExistingWashiTapes();
    }

    /**
     * Handle section activated in panel
     */
    function handleSectionActivated(sectionName, editor) {
        if (sectionName === 'section_washi_tape_controls') {
            const model = editor.getOption('editedElementView').getContainer().model;
            const settings = model.get('settings').attributes;
            
            // If washi tape is enabled, refresh it
            if (settings.enable_washi_tape === 'yes' && settings.washi_tape_id !== '0') {
                refreshWashiTape(model.get('id'), settings);
            }
        }
    }

    /**
     * Handle settings changed in panel
     */
    function handleSettingsChanged(view) {
        const settingsModel = view.container.settings;
        const settings = settingsModel.attributes;
        const elementId = view.container.model.get('id');
        
        // Check if this change affects washi tape settings
        if (settings.hasOwnProperty('enable_washi_tape') || 
            settings.hasOwnProperty('washi_tape_id') || 
            settings.hasOwnProperty('washi_tape_position') || 
            settings.hasOwnProperty('washi_tape_rotation') || 
            settings.hasOwnProperty('washi_tape_z_index')) {
            
            // If washi tape is enabled and has an ID
            if (settings.enable_washi_tape === 'yes' && settings.washi_tape_id !== '0') {
                refreshWashiTape(elementId, settings);
            } else {
                // Remove washi tape
                removeWashiTape(elementId);
            }
        }
    }

    /**
     * Handle page settings change
     */
    function handlePageSettingsChange() {
        // This is a good place to handle global settings that might affect all washi tapes
        // For now, we'll just log that settings changed
        console.log('Page settings changed - Washi Tape Generator is aware');
    }

    /**
     * Scan for existing washi tapes in the editor
     */
    function scanExistingWashiTapes() {
        // Get all elements with washi tape
        elementor.getPreviewView().$el.find('.has-washi-tape').each(function() {
            const $element = $(this);
            const elementId = $element.data('model-cid');
            
            if (elementId) {
                const container = elementor.getContainer(elementId);
                if (container) {
                    const settings = container.settings.attributes;
                    if (settings.enable_washi_tape === 'yes' && settings.washi_tape_id !== '0') {
                        refreshWashiTape(elementId, settings);
                    }
                }
            }
        });
    }

    /**
     * Refresh a washi tape on an element
     */
    function refreshWashiTape(elementId, settings) {
        // Get the element in preview
        const $element = elementor.getPreviewView().$el.find(`[data-model-cid="${elementId}"]`);
        
        if (!$element.length) {
            return;
        }
        
        // Mark the element
        $element.addClass('has-washi-tape');
        $element.attr('data-washi-tape-id', `washi-tape-${settings.washi_tape_id}`);
        $element.attr('data-washi-tape-position', settings.washi_tape_position || 'top-left');
        
        // Check if we already have this washi tape loaded
        if (editorWashiTapes[settings.washi_tape_id]) {
            insertWashiTape($element, settings);
        } else {
            // Fetch the washi tape
            loadWashiTape(settings.washi_tape_id, function() {
                insertWashiTape($element, settings);
            });
        }
    }

    /**
     * Load a washi tape from the server
     */
    function loadWashiTape(tapeId, callback) {
        $.ajax({
            url: ajaxurl,
            type: 'POST',
            data: {
                action: 'get_washi_tape_svg',
                nonce: washiTapePreviewParams.nonce,
                id: tapeId
            },
            success: function(response) {
                if (response.success && response.data.svg) {
                    // Store in our cache
                    editorWashiTapes[tapeId] = response.data.svg;
                    
                    // Make sure we have the container
                    let $container = $('#elementor-washi-tapes-container');
                    if (!$container.length) {
                        $container = $('<div id="elementor-washi-tapes-container" style="display:none;"></div>');
                        $('body').append($container);
                    }
                    
                    // Add or update the SVG in the container
                    const tapeElementId = `washi-tape-${tapeId}`;
                    let $tapeElement = $(`#${tapeElementId}`);
                    
                    if ($tapeElement.length) {
                        $tapeElement.html(response.data.svg);
                    } else {
                        $container.append(`<div id="${tapeElementId}" class="elementor-washi-tape">${response.data.svg}</div>`);
                    }
                    
                    if (typeof callback === 'function') {
                        callback();
                    }
                } else {
                    console.error('Failed to load washi tape:', response);
                }
            },
            error: function(xhr, status, error) {
                console.error('Failed to load washi tape:', error);
            }
        });
    }

    /**
     * Insert a washi tape onto an element
     */
    function insertWashiTape($element, settings) {
        // Remove any existing washi tape first
        $element.find('.elementor-washi-tape').remove();
        
        // Get the tape from our container
        const $sourceTape = $(`#washi-tape-${settings.washi_tape_id}`);
        
        if (!$sourceTape.length) {
            console.error('Washi tape not found:', settings.washi_tape_id);
            return;
        }
        
        // Clone the tape
        const $tapeCopy = $sourceTape.clone();
        $tapeCopy.removeAttr('id');
        
        // Position the tape
        positionTape($tapeCopy, settings);
        
        // Add to the element
        $element.append($tapeCopy);
        
        // Make sure element is positioned relatively
        if ($element.css('position') === 'static') {
            $element.css('position', 'relative');
        }
    }

    /**
     * Position a tape based on settings
     */
    function positionTape($tape, settings) {
        // Make tape visible
        $tape.css({
            'display': 'block',
            'position': 'absolute',
            'z-index': settings.washi_tape_z_index || 1
        });
        
        // Set position
        const position = settings.washi_tape_position || 'top-left';
        
        // Reset all positions first
        $tape.css({
            'top': '',
            'right': '',
            'bottom': '',
            'left': ''
        });
        
        if (position === 'top-left') {
            $tape.css({
                'top': '-20px',
                'left': '-20px'
            });
        } else if (position === 'top-right') {
            $tape.css({
                'top': '-20px',
                'right': '-20px'
            });
        } else if (position === 'bottom-left') {
            $tape.css({
                'bottom': '-20px',
                'left': '-20px'
            });
        } else if (position === 'bottom-right') {
            $tape.css({
                'bottom': '-20px',
                'right': '-20px'
            });
        }
        
        // Apply rotation if set
        if (settings.washi_tape_rotation) {
            const degrees = settings.washi_tape_rotation.size || 0;
            $tape.css('transform', `rotate(${degrees}deg)`);
        }
    }

    /**
     * Remove a washi tape from an element
     */
    function removeWashiTape(elementId) {
        const $element = elementor.getPreviewView().$el.find(`[data-model-cid="${elementId}"]`);
        
        if (!$element.length) {
            return;
        }
        
        $element.removeClass('has-washi-tape');
        $element.removeAttr('data-washi-tape-id');
        $element.removeAttr('data-washi-tape-position');
        $element.find('.elementor-washi-tape').remove();
    }

    // Initialize when Elementor is ready
    $(window).on('elementor/frontend/init', function() {
        elementor.on('preview:loaded', initWashiTapeEditor);
    });

})(jQuery);

================
File: assets/js/frontend-script.js
================
/**
 * Washi Tape Generator Frontend Script
 */
(function() {
    'use strict';

    /**
     * Initialize the washi tape positioning
     */
    function initWashiTapes() {
        const elements = document.querySelectorAll('.has-washi-tape');
        
        elements.forEach(function(element) {
            positionWashiTape(element);
        });
    }

    /**
     * Position a washi tape on an element
     */
    function positionWashiTape(element) {
        const tapeId = element.getAttribute('data-washi-tape-id');
        const tapePosition = element.getAttribute('data-washi-tape-position');
        const tapeElement = document.getElementById(tapeId);
        
        if (!tapeElement) return;
        
        // Clone the tape element
        const tapeClone = tapeElement.cloneNode(true);
        tapeClone.removeAttribute('id');
        tapeClone.style.display = 'block';
        
        // Remove any existing tape from this element
        const existingTape = element.querySelector('.elementor-washi-tape');
        if (existingTape) {
            element.removeChild(existingTape);
        }
        
        // Add the tape to the element
        element.appendChild(tapeClone);
    }

    /**
     * Initialize on DOM ready
     */
    function ready(fn) {
        if (document.readyState !== 'loading') {
            fn();
        } else {
            document.addEventListener('DOMContentLoaded', fn);
        }
    }

    ready(function() {
        initWashiTapes();
        
        // For Elementor editor
        if (typeof window.elementorFrontend !== 'undefined') {
            window.elementorFrontend.hooks.addAction('frontend/element_ready/global', function(scope) {
                const element = scope.closest('.has-washi-tape');
                if (element) {
                    positionWashiTape(element);
                }
            });
        }
    });

})();

================
File: assets/js/preview-script.js
================
/**
 * Washi Tape Generator Elementor Preview Script
 * This script is only loaded in the Elementor editor
 */
(function($) {
    'use strict';

    /**
     * Initialize the washi tape preview functionality
     */
    function initWashiTapePreview() {
        // Listen for changes to washi tape controls
        elementor.channels.editor.on('change', function(view) {
            const element = view.container.view.$el;
            const model = view.container.model;
            const settings = model.get('settings');
            
            // Check if washi tape is enabled
            if (settings.attributes.enable_washi_tape === 'yes' && settings.attributes.washi_tape_id !== '0') {
                updateWashiTape(element, settings.attributes);
            } else {
                removeWashiTape(element);
            }
        });
        
        // Handle section panel change
        elementor.channels.editor.on('section:activated', function(sectionName, editor) {
            if (sectionName === 'section_washi_tape_controls') {
                refreshWashiTapePreview(editor.model.cid);
            }
        });
    }
    
    /**
     * Update washi tape on an element
     */
    function updateWashiTape(element, settings) {
        // Add washi tape class and attributes
        element.addClass('has-washi-tape');
        element.attr('data-washi-tape-id', 'washi-tape-' + settings.washi_tape_id);
        element.attr('data-washi-tape-position', settings.washi_tape_position);
        
        // Create or update washi tape in editor
        createEditorWashiTape(settings.washi_tape_id, function(tapeElement) {
            if (!tapeElement) return;
            
            // Remove existing tape
            element.find('.elementor-washi-tape').remove();
            
            // Clone and add the new tape
            const tapeClone = $(tapeElement).clone();
            tapeClone.css({
                'display': 'block',
                'position': 'absolute',
                'z-index': settings.washi_tape_z_index || 1
            });
            
            // Position the tape
            positionTape(tapeClone, settings.washi_tape_position);
            
            // Apply rotation
            if (settings.washi_tape_rotation) {
                const degrees = settings.washi_tape_rotation.size || 0;
                tapeClone.css('transform', 'rotate(' + degrees + 'deg)');
            }
            
            element.append(tapeClone);
        });
    }
    
    /**
     * Position a tape based on position setting
     */
    function positionTape(tapeElement, position) {
        // Reset positioning
        tapeElement.css({
            'top': '',
            'right': '',
            'bottom': '',
            'left': ''
        });
        
        // Set position
        if (position === 'top-left') {
            tapeElement.css({
                'top': '-20px',
                'left': '-20px'
            });
        } else if (position === 'top-right') {
            tapeElement.css({
                'top': '-20px',
                'right': '-20px'
            });
        } else if (position === 'bottom-left') {
            tapeElement.css({
                'bottom': '-20px',
                'left': '-20px'
            });
        } else if (position === 'bottom-right') {
            tapeElement.css({
                'bottom': '-20px',
                'right': '-20px'
            });
        }
    }
    
    /**
     * Remove washi tape from an element
     */
    function removeWashiTape(element) {
        element.removeClass('has-washi-tape');
        element.removeAttr('data-washi-tape-id');
        element.removeAttr('data-washi-tape-position');
        element.find('.elementor-washi-tape').remove();
    }
    
    /**
     * Refresh washi tape preview when the section is activated
     */
    function refreshWashiTapePreview(cid) {
        const model = elementor.getContainer(cid).model;
        const settings = model.get('settings');
        const element = elementor.$preview.find('[data-model-cid="' + cid + '"]');
        
        if (settings.attributes.enable_washi_tape === 'yes' && settings.attributes.washi_tape_id !== '0') {
            updateWashiTape(element, settings.attributes);
        }
    }
    
    /**
     * Create a washi tape element in the editor
     */
    function createEditorWashiTape(tapeId, callback) {
        // Use AJAX to get the washi tape SVG
        $.ajax({
            url: ajaxurl,
            type: 'POST',
            data: {
                action: 'get_washi_tape_svg',
                nonce: washiTapePreviewParams.nonce,
                id: tapeId
            },
            success: function(response) {
                if (response.success && response.data.svg) {
                    // Create element
                    const tapeElement = $('<div class="elementor-washi-tape">' + response.data.svg + '</div>');
                    
                    // Add to hidden container if not exists
                    let container = $('#elementor-washi-tapes-container');
                    if (container.length === 0) {
                        container = $('<div id="elementor-washi-tapes-container" style="display:none;"></div>');
                        $('body').append(container);
                    }
                    
                    // Add with ID
                    const tapeId = 'washi-tape-' + response.data.id;
                    let existingTape = $('#' + tapeId);
                    if (existingTape.length) {
                        existingTape.replaceWith(tapeElement.attr('id', tapeId));
                    } else {
                        container.append(tapeElement.attr('id', tapeId));
                    }
                    
                    callback(tapeElement[0]);
                } else {
                    console.error('Error loading washi tape:', response);
                    callback(null);
                }
            },
            error: function() {
                console.error('Error loading washi tape');
                callback(null);
            }
        });
    }

    // Initialize when Elementor is ready
    $(window).on('elementor/frontend/init', function() {
        elementor.on('preview:loaded', initWashiTapePreview);
    });

})(jQuery);

================
File: includes/admin/views/admin-page.php
================
<?php
// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}
?>
<div class="wrap washi-tape-admin">
    <h1><?php echo esc_html__('Washi Tape Generator', 'washi-tape-generator'); ?></h1>

    <div class="washi-tape-admin-grid">
        <!-- Generator Panel -->
        <div class="washi-tape-panel generator-panel">
            <div class="panel-header">
                <h2><?php echo esc_html__('Create Washi Tape', 'washi-tape-generator'); ?></h2>
            </div>
            <div class="panel-body">
                <form id="washi-form">
                    <div class="form-section">
                        <div class="form-section-title"><?php echo esc_html__('Tape Name', 'washi-tape-generator'); ?></div>
                        <div class="form-control">
                            <input type="text" id="tape-title" class="regular-text" placeholder="<?php echo esc_attr__('Enter a name for your washi tape', 'washi-tape-generator'); ?>" required>
                            <input type="hidden" id="tape-id" value="0">
                        </div>
                    </div>

                    <div class="form-section">
                        <div class="form-section-title"><?php echo esc_html__('Appearance', 'washi-tape-generator'); ?></div>
                        <div class="form-group">
                            <div class="form-control">
                                <label for="color"><?php echo esc_html__('Base Color', 'washi-tape-generator'); ?></label>
                                <input type="color" id="color" value="#8a5cf7">
                            </div>
                            <div class="form-control">
                                <label for="opacity"><?php echo esc_html__('Base Opacity', 'washi-tape-generator'); ?></label>
                                <input type="range" id="opacity" min="0" max="100" value="100" class="range-slider">
                                <output for="opacity" id="opacity-value">100%</output>
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="form-control">
                                <label for="pattern"><?php echo esc_html__('Pattern', 'washi-tape-generator'); ?></label>
                                <select id="pattern">
                                    <option value="solid"><?php echo esc_html__('Solid', 'washi-tape-generator'); ?></option>
                                    <option value="horizontal-lines"><?php echo esc_html__('Horizontal Lines', 'washi-tape-generator'); ?></option>
                                    <option value="vertical-lines" selected><?php echo esc_html__('Vertical Lines', 'washi-tape-generator'); ?></option>
                                    <option value="grid"><?php echo esc_html__('Grid', 'washi-tape-generator'); ?></option>
                                    <option value="dots"><?php echo esc_html__('Dots', 'washi-tape-generator'); ?></option>
                                    <option value="random-lines"><?php echo esc_html__('Random Lines', 'washi-tape-generator'); ?></option>
                                </select>
                            </div>
                            <div class="form-control">
                                <label for="pattern-opacity"><?php echo esc_html__('Pattern Opacity', 'washi-tape-generator'); ?></label>
                                <input type="range" id="pattern-opacity" min="0" max="100" value="100" class="range-slider">
                                <output for="pattern-opacity" id="pattern-opacity-value">100%</output>
                            </div>
                        </div>

                        <div id="pattern-options">
                            <div class="form-group" id="pattern-spacing-group">
                                <div class="form-control">
                                    <label for="pattern-spacing"><?php echo esc_html__('Pattern Spacing (px)', 'washi-tape-generator'); ?></label>
                                    <input type="number" id="pattern-spacing" value="10" min="1">
                                </div>
                                <div class="form-control" id="pattern-randomness-control">
                                    <label for="pattern-randomness"><?php echo esc_html__('Pattern Randomness', 'washi-tape-generator'); ?></label>
                                    <input type="range" id="pattern-randomness" min="0" max="100" value="0" class="range-slider">
                                    <output for="pattern-randomness" id="pattern-randomness-value">0%</output>
                                </div>
                            </div>

                            <div class="form-group" id="line-options">
                                <div class="form-control">
                                    <label for="line-thickness"><?php echo esc_html__('Line Thickness (px)', 'washi-tape-generator'); ?></label>
                                    <input type="number" id="line-thickness" value="1" min="1">
                                </div>
                                <div class="form-control">
                                    <label for="line-color"><?php echo esc_html__('Line Color', 'washi-tape-generator'); ?></label>
                                    <input type="color" id="line-color" value="#000000">
                                </div>
                            </div>

                            <div class="form-group" id="dot-options" style="display: none;">
                                <div class="form-control">
                                    <label for="dot-diameter"><?php echo esc_html__('Dot Diameter (px)', 'washi-tape-generator'); ?></label>
                                    <input type="number" id="dot-diameter" value="5" min="1">
                                </div>
                                <div class="form-control">
                                    <label for="dot-color"><?php echo esc_html__('Dot Color', 'washi-tape-generator'); ?></label>
                                    <input type="color" id="dot-color" value="#ffffff">
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-section">
                        <div class="form-section-title"><?php echo esc_html__('Image Overlay', 'washi-tape-generator'); ?></div>
                        <div class="form-control">
                            <div class="toggle-container">
                                <label class="toggle">
                                    <input type="checkbox" id="use-image-overlay">
                                    <span class="toggle-slider"></span>
                                </label>
                                <span class="toggle-label"><?php echo esc_html__('Use Image Overlay', 'washi-tape-generator'); ?></span>
                            </div>
                        </div>

                        <div id="image-overlay-controls" style="display: none;">
                            <div class="form-control">
                                <label for="image-upload"><?php echo esc_html__('Upload Image', 'washi-tape-generator'); ?></label>
                                <div class="image-upload-container">
                                    <button type="button" id="image-upload-btn" class="button"><?php echo esc_html__('Select Image', 'washi-tape-generator'); ?></button>
                                    <div id="image-preview"></div>
                                    <input type="hidden" id="image-url" value="">
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="form-control">
                                    <label for="image-size"><?php echo esc_html__('Image Size', 'washi-tape-generator'); ?></label>
                                    <select id="image-size">
                                        <option value="cover"><?php echo esc_html__('Cover', 'washi-tape-generator'); ?></option>
                                        <option value="contain"><?php echo esc_html__('Contain', 'washi-tape-generator'); ?></option>
                                        <option value="repeat"><?php echo esc_html__('Repeat', 'washi-tape-generator'); ?></option>
                                        <option value="repeat-x"><?php echo esc_html__('Repeat X', 'washi-tape-generator'); ?></option>
                                        <option value="repeat-y"><?php echo esc_html__('Repeat Y', 'washi-tape-generator'); ?></option>
                                    </select>
                                </div>
                                <div class="form-control">
                                    <label for="image-opacity"><?php echo esc_html__('Image Opacity', 'washi-tape-generator'); ?></label>
                                    <input type="range" id="image-opacity" min="0" max="100" value="50" class="range-slider">
                                    <output for="image-opacity" id="image-opacity-value">50%</output>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-section">
                        <div class="form-section-title"><?php echo esc_html__('Size & Position', 'washi-tape-generator'); ?></div>
                        <div class="form-group">
                            <div class="form-control">
                                <label for="width"><?php echo esc_html__('Width (px)', 'washi-tape-generator'); ?></label>
                                <input type="number" id="width" value="180" min="50">
                            </div>
                            <div class="form-control">
                                <label for="height"><?php echo esc_html__('Height (px)', 'washi-tape-generator'); ?></label>
                                <input type="number" id="height" value="45" min="20">
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="form-control">
                                <label for="position"><?php echo esc_html__('Position', 'washi-tape-generator'); ?></label>
                                <select id="position">
                                    <option value="left"><?php echo esc_html__('Left', 'washi-tape-generator'); ?></option>
                                    <option value="right"><?php echo esc_html__('Right', 'washi-tape-generator'); ?></option>
                                    <option value="top"><?php echo esc_html__('Top', 'washi-tape-generator'); ?></option>
                                    <option value="bottom"><?php echo esc_html__('Bottom', 'washi-tape-generator'); ?></option>
                                </select>
                            </div>
                            <div class="form-control">
                                <label for="rotation"><?php echo esc_html__('Rotation (degrees)', 'washi-tape-generator'); ?></label>
                                <input type="number" id="rotation" value="0" step="1">
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="form-control">
                                <label for="roughness"><?php echo esc_html__('Edge Roughness', 'washi-tape-generator'); ?></label>
                                <input type="range" id="roughness" min="1" max="20" value="10" class="range-slider">
                                <output for="roughness" id="roughness-value">10%</output>
                            </div>
                            <div class="form-control">
                                <label for="segments"><?php echo esc_html__('Edge Segments', 'washi-tape-generator'); ?></label>
                                <input type="range" id="segments" min="5" max="20" value="10" class="range-slider">
                                <output for="segments" id="segments-value">10</output>
                            </div>
                        </div>

                        <div class="form-control">
                            <div class="toggle-container">
                                <label class="toggle">
                                    <input type="checkbox" id="torn-edges" checked>
                                    <span class="toggle-slider"></span>
                                </label>
                                <span class="toggle-label"><?php echo esc_html__('Torn Edges', 'washi-tape-generator'); ?></span>
                            </div>
                        </div>
                    </div>

                    <div class="form-actions">
                        <button type="button" id="save-washi-tape" class="button button-primary"><?php echo esc_html__('Save Washi Tape', 'washi-tape-generator'); ?></button>
                        <button type="button" id="reset-washi-tape" class="button"><?php echo esc_html__('Reset', 'washi-tape-generator'); ?></button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Preview & Saved Tapes Panel -->
        <div class="washi-tape-panel preview-panel">
            <div class="panel-header">
                <h2><?php echo esc_html__('Preview', 'washi-tape-generator'); ?></h2>
            </div>
            <div class="panel-body">
                <div class="preview-container">
                    <svg id="washi-svg" class="washi-svg" preserveAspectRatio="none"></svg>
                    <div class="content-box">
                        <h3><?php echo esc_html__('Washi Tape Preview', 'washi-tape-generator'); ?></h3>
                        <p><?php echo esc_html__('Customize your decorative tape using the controls', 'washi-tape-generator'); ?></p>
                    </div>
                </div>
            </div>

            <div class="panel-header saved-tapes-header">
                <h2><?php echo esc_html__('Saved Washi Tapes', 'washi-tape-generator'); ?></h2>
            </div>
            <div class="panel-body">
                <div id="saved-washi-tapes" class="saved-washi-tapes">
                    <div class="loading-indicator"><?php echo esc_html__('Loading...', 'washi-tape-generator'); ?></div>
                </div>
            </div>
        </div>
    </div>
</div>

================
File: includes/admin/class-washi-tape-admin.php
================
<?php

/**
 * Washi Tape Admin Class
 */
class Washi_Tape_Admin
{

    /**
     * Admin instance
     */
    private static $instance = null;

    /**
     * Get admin instance
     */
    public static function get_instance()
    {
        if (null === self::$instance) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    /**
     * Constructor
     */
    public function __construct()
    {
        // Add actions and filters
        add_action('admin_init', array($this, 'admin_init'));
    }

    /**
     * Admin init
     */
    public function admin_init()
    {
        // Register media uploader scripts for the image overlay
        add_action('admin_enqueue_scripts', array($this, 'enqueue_media_uploader'));
    }

    /**
     * Enqueue media uploader
     */
    public function enqueue_media_uploader($hook)
    {
        if ('toplevel_page_washi-tape-generator' !== $hook) {
            return;
        }

        wp_enqueue_media();
    }
}

// Initialize the admin class
Washi_Tape_Admin::get_instance();

================
File: includes/elementor/class-washi-tape-elementor.php
================
<?php

namespace Washi_Tape\Elementor;

if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly
}

/**
 * Add Washi Tape Controls to Elementor widgets
 */
class Washi_Tape_Controls
{
    /**
     * Initialize the class
     */
    public function __construct()
    {
        // Frontend styles
        add_action('elementor/frontend/after_enqueue_styles', [$this, 'enqueue_styles']);
        add_action('wp_enqueue_scripts', [$this, 'enqueue_styles']);

        // Editor styles
        add_action('elementor/editor/after_enqueue_styles', [$this, 'enqueue_editor_styles']);
        add_action('elementor/preview/enqueue_styles', [$this, 'enqueue_preview_styles']);

        // Controls
        add_action('elementor/element/after_section_end', [$this, 'add_washi_tape_controls'], 10, 3);

        // Content filter
        add_filter('elementor/widget/render_content', [$this, 'apply_washi_tape'], 10, 2);

        // Add editor script loading
        add_action('elementor/preview/enqueue_scripts', [$this, 'enqueue_preview_scripts']);

        // Register Washi Tape Controls
        add_action('elementor/controls/register', [$this, 'register_washi_tape_control']);
    }

    /**
     * Add Washi Tape controls to Elementor widgets
     */
    public function add_washi_tape_controls($element, $section_id, $args)
    {
        if ('section_custom_css' !== $section_id) {
            return;
        }

        // Log the start of control addition process
        if (WP_DEBUG) {
            error_log('Washi Tape Generator: Starting to add controls for element type: ' . $element->get_type());
        }

        if (!did_action('elementor/loaded')) {
            error_log('Washi Tape Generator: Elementor not loaded when attempting to add controls');
            return;
        }

        if (!class_exists('\Elementor\Plugin')) {
            error_log('Washi Tape Generator: Elementor Plugin class not found');
            return;
        }

        if (!$element instanceof \Elementor\Element_Base) {
            error_log('Washi Tape Generator: Invalid Elementor element instance. Got: ' . get_class($element));
            return;
        }

        $allowed_types = ['widget', 'section', 'column'];
        if (!in_array($element->get_type(), $allowed_types, true)) {
            error_log(sprintf(
                'Washi Tape Generator: Unsupported Elementor element type: %s. Allowed types are: %s',
                $element->get_type(),
                implode(', ', $allowed_types)
            ));
            return;
        }

        try {
            // Log database interaction
            if (WP_DEBUG) {
                error_log('Washi Tape Generator: Attempting to fetch washi tapes from database');
            }

            // Get all washi tapes
            $db = new \Washi_Tape_DB();
            $washi_tapes = $db->get_all_washi_tapes();

            if (empty($washi_tapes) && WP_DEBUG) {
                error_log('Washi Tape Generator: No washi tapes found in database');
            }

            // Start adding controls
            $element->start_controls_section(
                'section_washi_tape',
                [
                    'label' => __('Tape Decor', 'washi-tape-generator'),
                    'tab' => \Elementor\Controls_Manager::TAB_ADVANCED,
                ]
            );

            // Prepare options
            $options = array(
                '0' => __('None', 'washi-tape-generator'),
            );

            if (!empty($washi_tapes)) {
                foreach ($washi_tapes as $tape) {
                    $options[$tape->id] = $tape->title;
                }
            }

            $element->add_control(
                'enable_washi_tape',
                [
                    'label' => __('Enable Tape Decor', 'washi-tape-generator'),
                    'type' => \Elementor\Controls_Manager::SWITCHER,
                    'default' => '',
                    'label_on' => __('Yes', 'washi-tape-generator'),
                    'label_off' => __('No', 'washi-tape-generator'),
                    'return_value' => 'yes',
                ]
            );

            $element->add_control(
                'washi_tape_id',
                [
                    'label' => __('Select Tape', 'washi-tape-generator'),
                    'type' => \Elementor\Controls_Manager::SELECT,
                    'default' => '0',
                    'options' => $options,
                    'condition' => [
                        'enable_washi_tape' => 'yes',
                    ],
                ]
            );

            $element->add_control(
                'washi_tape_position',
                [
                    'label' => __('Position', 'washi-tape-generator'),
                    'type' => \Elementor\Controls_Manager::SELECT,
                    'default' => 'top-left',
                    'options' => [
                        'top-left' => __('Top Left', 'washi-tape-generator'),
                        'top-right' => __('Top Right', 'washi-tape-generator'),
                        'bottom-left' => __('Bottom Left', 'washi-tape-generator'),
                        'bottom-right' => __('Bottom Right', 'washi-tape-generator'),
                    ],
                    'condition' => [
                        'enable_washi_tape' => 'yes',
                        'washi_tape_id!' => '0',
                    ],
                ]
            );

            $element->add_control(
                'washi_tape_rotation',
                [
                    'label' => __('Rotation', 'washi-tape-generator'),
                    'type' => \Elementor\Controls_Manager::SLIDER,
                    'size_units' => ['deg'],
                    'range' => [
                        'deg' => [
                            'min' => -180,
                            'max' => 180,
                            'step' => 1,
                        ],
                    ],
                    'default' => [
                        'unit' => 'deg',
                        'size' => 0,
                    ],
                    'condition' => [
                        'enable_washi_tape' => 'yes',
                        'washi_tape_id!' => '0',
                    ],
                    'selectors' => [
                        '{{WRAPPER}} .elementor-washi-tape' => 'transform: rotate({{SIZE}}{{UNIT}});',
                    ],
                ]
            );

            $element->add_control(
                'washi_tape_z_index',
                [
                    'label' => __('Z-Index', 'washi-tape-generator'),
                    'type' => \Elementor\Controls_Manager::NUMBER,
                    'min' => -1000,
                    'max' => 1000,
                    'step' => 1,
                    'default' => 1,
                    'condition' => [
                        'enable_washi_tape' => 'yes',
                        'washi_tape_id!' => '0',
                    ],
                    'selectors' => [
                        '{{WRAPPER}} .elementor-washi-tape' => 'z-index: {{VALUE}};',
                    ],
                ]
            );

            $element->end_controls_section();

            if (WP_DEBUG) {
                error_log('Washi Tape Generator: Successfully added all controls to element');
            }
        } catch (\Exception $e) {
            error_log(sprintf(
                'Washi Tape Generator: Error adding controls - Message: %s | File: %s | Line: %d | Trace: %s',
                $e->getMessage(),
                $e->getFile(),
                $e->getLine(),
                $e->getTraceAsString()
            ));
            return;
        }
    }

    /**
     * Enqueue styles
     */
    public function enqueue_styles()
    {
        wp_enqueue_style(
            'washi-tape-elementor',
            WASHI_TAPE_URL . 'assets/css/elementor.css',
            [],
            WASHI_TAPE_VERSION
        );
    }

    /**
     * Enqueue editor styles
     */
    public function enqueue_editor_styles()
    {
        wp_enqueue_style(
            'washi-tape-elementor-editor',
            WASHI_TAPE_URL . 'assets/css/elementor-editor.css',
            [],
            WASHI_TAPE_VERSION
        );
    }

    /**
     * Enqueue preview styles
     */
    public function enqueue_preview_styles()
    {
        wp_enqueue_style(
            'washi-tape-elementor-preview',
            WASHI_TAPE_URL . 'assets/css/elementor-preview.css',
            [],
            WASHI_TAPE_VERSION
        );
    }

    /**
     * Enqueue preview scripts
     */
    public function enqueue_preview_scripts()
    {
        wp_enqueue_script(
            'washi-tape-elementor-preview',
            WASHI_TAPE_URL . 'assets/js/elementor-preview.js',
            ['jquery'],
            WASHI_TAPE_VERSION,
            true
        );
    }

    /**
     * Apply Washi Tape to widget content
     */
    public function apply_washi_tape($content, $widget)
    {
        try {
            if (WP_DEBUG) {
                error_log('Washi Tape Generator: Attempting to apply washi tape to widget: ' . $widget->get_name());
            }

            // Get settings
            $settings = $widget->get_settings_for_display();

            // Check if washi tape is enabled
            if (empty($settings['enable_washi_tape']) || $settings['enable_washi_tape'] !== 'yes') {
                return $content;
            }

            // Check if a tape is selected
            if (empty($settings['washi_tape_id']) || $settings['washi_tape_id'] === '0') {
                return $content;
            }

            // Get the washi tape data
            $db = new \Washi_Tape_DB();
            $tape = $db->get_washi_tape($settings['washi_tape_id']);

            if (!$tape) {
                if (WP_DEBUG) {
                    error_log('Washi Tape Generator: Tape not found with ID: ' . $settings['washi_tape_id']);
                }
                return $content;
            }

            // Get position
            $position = !empty($settings['washi_tape_position']) ? $settings['washi_tape_position'] : 'top-left';

            // Create the washi tape HTML
            $tape_html = sprintf(
                '<div class="elementor-washi-tape washi-tape-position-%s" style="background-image: url(%s);" data-tape-id="%d"></div>',
                esc_attr($position),
                esc_url($tape->image_url),
                (int) $tape->id
            );

            if (WP_DEBUG) {
                error_log('Washi Tape Generator: Successfully applied washi tape to widget');
            }

            return $tape_html . $content;
        } catch (\Exception $e) {
            error_log(sprintf(
                'Washi Tape Generator: Error applying washi tape - Message: %s | File: %s | Line: %d | Trace: %s',
                $e->getMessage(),
                $e->getFile(),
                $e->getLine(),
                $e->getTraceAsString()
            ));
            return $content;
        }
    }

    /**
     * Register Washi Tape Control
     * 
     * @param \Elementor\Controls_Manager $controls_manager Elementor controls manager.
     */
    public function register_washi_tape_control($controls_manager)
    {
        try {
            if (WP_DEBUG) {
                error_log('Washi Tape Generator: Starting control registration');
            }

            if (!$controls_manager instanceof \Elementor\Controls_Manager) {
                error_log('Washi Tape Generator: Invalid controls manager instance');
                return;
            }

            // Get all washi tapes from database
            $db = new \Washi_Tape_DB();
            $washi_tapes = $db->get_all_washi_tapes();

            if (empty($washi_tapes) && WP_DEBUG) {
                error_log('Washi Tape Generator: No washi tapes found during control registration');
            }

            // Prepare options for the dropdown
            $options = [
                '0' => __('None', 'washi-tape-generator'),
            ];

            if (!empty($washi_tapes)) {
                foreach ($washi_tapes as $tape) {
                    $options[$tape->id] = $tape->title;
                }
            }

            // Register a new control type
            $controls_manager->add_control(
                'washi_tape_selector',
                [
                    'label' => __('Washi Tape', 'washi-tape-generator'),
                    'type' => \Elementor\Controls_Manager::SELECT,
                    'default' => '0',
                    'options' => $options,
                    'label_block' => true,
                ]
            );

            if (WP_DEBUG) {
                error_log('Washi Tape Generator: Successfully registered washi tape control');
            }
        } catch (\Exception $e) {
            error_log(sprintf(
                'Washi Tape Generator: Error registering control - Message: %s | File: %s | Line: %d | Trace: %s',
                $e->getMessage(),
                $e->getFile(),
                $e->getLine(),
                $e->getTraceAsString()
            ));
        }
    }
}

================
File: includes/class-washi-tape-db.php
================
<?php

/**
 * Washi Tape Database Class
 */
class Washi_Tape_DB
{

    /**
     * Table name
     */
    private $table_name;

    /**
     * Constructor
     */
    public function __construct()
    {
        global $wpdb;
        $this->table_name = $wpdb->prefix . 'washi_tapes';
    }

    /**
     * Create database tables
     */
    public function create_tables()
    {
        global $wpdb;

        $charset_collate = $wpdb->get_charset_collate();

        $sql = "CREATE TABLE $this->table_name (
            id mediumint(9) NOT NULL AUTO_INCREMENT,
            title varchar(255) NOT NULL,
            svg longtext NOT NULL,
            settings longtext NOT NULL,
            created_at datetime DEFAULT CURRENT_TIMESTAMP NOT NULL,
            updated_at datetime NOT NULL,
            PRIMARY KEY  (id)
        ) $charset_collate;";

        require_once ABSPATH . 'wp-admin/includes/upgrade.php';
        dbDelta($sql);

        // Add error logging
        if ($wpdb->last_error) {
            error_log('Washi Tape Table Creation Error (DB Class): ' . $wpdb->last_error);
        } else {
            error_log('Washi Tape Table Creation Success (DB Class)');
        }
    }

    /**
     * Create a new washi tape design
     */
    public function create_washi_tape($title, $svg, $settings)
    {
        global $wpdb;

        $current_time = current_time('mysql');

        $result = $wpdb->insert(
            $this->table_name,
            array(
                'title' => $title,
                'svg' => $svg,
                'settings' => $settings,
                'updated_at' => $current_time
            ),
            array('%s', '%s', '%s', '%s')
        );

        return $result ? $wpdb->insert_id : false;
    }

    /**
     * Update an existing washi tape design
     */
    public function update_washi_tape($id, $title, $svg, $settings)
    {
        global $wpdb;

        $current_time = current_time('mysql');

        $result = $wpdb->update(
            $this->table_name,
            array(
                'title' => $title,
                'svg' => $svg,
                'settings' => $settings,
                'updated_at' => $current_time
            ),
            array('id' => $id),
            array('%s', '%s', '%s', '%s'),
            array('%d')
        );

        return $result !== false ? $id : false;
    }

    /**
     * Delete a washi tape design
     */
    public function delete_washi_tape($id)
    {
        global $wpdb;

        $result = $wpdb->delete(
            $this->table_name,
            array('id' => $id),
            array('%d')
        );

        return $result !== false;
    }

    /**
     * Get a single washi tape design
     */
    public function get_washi_tape($id)
    {
        global $wpdb;

        $query = $wpdb->prepare(
            "SELECT * FROM $this->table_name WHERE id = %d",
            $id
        );

        return $wpdb->get_row($query);
    }

    /**
     * Get all washi tape designs
     */
    public function get_all_washi_tapes()
    {
        global $wpdb;

        $query = "SELECT * FROM $this->table_name ORDER BY updated_at DESC";

        return $wpdb->get_results($query);
    }
}

================
File: washi-tape-generator.php
================
<?php

/**
 * Plugin Name: Washi Tape Generator
 * Description: Create and apply decorative washi tape designs to your Elementor elements
 * Version: 1.0.2
 * Author: Richard McLain
 * Text Domain: frugle.com
 */

// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Main Washi Tape Generator Plugin Class
 */
class Washi_Tape_Generator
{

    /**
     * Plugin instance
     */
    private static $instance = null;

    /**
     * Plugin version
     */
    const VERSION = '1.0.0';

    /**
     * Get plugin instance
     */
    public static function get_instance()
    {
        if (null === self::$instance) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    /**
     * Constructor
     */
    public function __construct()
    {
        // Define constants
        $this->define_constants();

        // Include required files
        $this->includes();

        // Initialize hooks
        $this->init_hooks();

        // Make sure table exists
        $this->check_and_create_table();

        // Initialize admin page
        if (is_admin()) {
            add_action('admin_menu', array($this, 'add_admin_menu'));
            add_action('admin_enqueue_scripts', array($this, 'enqueue_admin_assets'));
            add_action('wp_ajax_save_washi_tape', array($this, 'save_washi_tape'));
            add_action('wp_ajax_delete_washi_tape', array($this, 'delete_washi_tape'));
            add_action('wp_ajax_get_washi_tapes', array($this, 'get_washi_tapes'));
            add_action('wp_ajax_get_washi_tape_svg', array($this, 'get_washi_tape_svg'));
        }
    }

    /**
     * Define plugin constants
     */
    private function define_constants()
    {
        define('WASHI_TAPE_PLUGIN_URL', plugin_dir_url(__FILE__));
        define('WASHI_TAPE_URL', plugin_dir_url(__FILE__));
        define('WASHI_TAPE_PLUGIN_PATH', plugin_dir_path(__FILE__));
        define('WASHI_TAPE_VERSION', self::VERSION);
    }

    /**
     * Include required files
     */
    private function includes()
    {
        // Include admin class
        require_once WASHI_TAPE_PLUGIN_PATH . 'includes/admin/class-washi-tape-admin.php';

        // Include database class
        require_once WASHI_TAPE_PLUGIN_PATH . 'includes/class-washi-tape-db.php';

        // Include Elementor integration if Elementor is active
        if (did_action('elementor/loaded')) {
            require_once WASHI_TAPE_PLUGIN_PATH . 'includes/elementor/class-washi-tape-elementor.php';
        }
    }

    /**
     * Initialize hooks
     */
    private function init_hooks()
    {
        // Register activation hook
        register_activation_hook(__FILE__, array($this, 'activate'));

        // Add action for Elementor integration
        add_action('plugins_loaded', array($this, 'init_elementor_integration'));

        // Add front-end scripts
        add_action('wp_enqueue_scripts', array($this, 'enqueue_frontend_assets'));
    }

    /**
     * Plugin activation
     */
    public function activate()
    {
        // Create database tables
        require_once WASHI_TAPE_PLUGIN_PATH . 'includes/class-washi-tape-db.php';
        $db = new Washi_Tape_DB();
        $db->create_tables();

        // Add plugin version to database
        update_option('washi_tape_version', self::VERSION);
    }

    /**
     * Initialize Elementor integration
     */
    public function init_elementor_integration()
    {
        // Check if Elementor is installed and activated
        if (!did_action('elementor/loaded')) {
            return;
        }

        // Include and initialize the Elementor integration
        require_once WASHI_TAPE_PLUGIN_PATH . 'includes/elementor/class-washi-tape-elementor.php';
        new \Washi_Tape\Elementor\Washi_Tape_Controls();
    }

    /**
     * Add admin menu
     */
    public function add_admin_menu()
    {
        add_menu_page(
            __('Washi Tape Generator', 'washi-tape-generator'),
            __('Washi Tape', 'washi-tape-generator'),
            'manage_options',
            'washi-tape-generator',
            array($this, 'render_admin_page'),
            'dashicons-admin-appearance',
            30
        );
    }

    /**
     * Render admin page
     */
    public function render_admin_page()
    {
        require_once WASHI_TAPE_PLUGIN_PATH . 'includes/admin/views/admin-page.php';
    }

    /**
     * Enqueue admin assets
     */
    public function enqueue_admin_assets($hook)
    {
        if ('toplevel_page_washi-tape-generator' !== $hook) {
            return;
        }

        // Enqueue styles
        wp_enqueue_style(
            'washi-tape-admin-style',
            WASHI_TAPE_PLUGIN_URL . 'assets/css/admin-style.css',
            array(),
            WASHI_TAPE_VERSION
        );

        // Enqueue scripts
        wp_enqueue_script(
            'washi-tape-admin-script',
            WASHI_TAPE_PLUGIN_URL . 'assets/js/admin-script.js',
            array('jquery'),
            WASHI_TAPE_VERSION,
            true
        );

        // Localize script with ajax url
        wp_localize_script(
            'washi-tape-admin-script',
            'washiTapeParams',
            array(
                'ajaxUrl' => admin_url('admin-ajax.php'),
                'nonce' => wp_create_nonce('washi_tape_nonce')
            )
        );
    }

    /**
     * Enqueue frontend assets
     */
    public function enqueue_frontend_assets()
    {
        // Only enqueue if Elementor is active and we have washi tapes applied
        if (did_action('elementor/loaded')) {
            wp_enqueue_style(
                'washi-tape-frontend-style',
                WASHI_TAPE_PLUGIN_URL . 'assets/css/frontend-style.css',
                array(),
                WASHI_TAPE_VERSION
            );

            wp_enqueue_script(
                'washi-tape-frontend-script',
                WASHI_TAPE_PLUGIN_URL . 'assets/js/frontend-script.js',
                array('jquery'),
                WASHI_TAPE_VERSION,
                true
            );
        }
    }

    /**
     * Check if table exists and create it if it doesn't
     * This serves as a failsafe if the activation hook didn't work
     */
    public function check_and_create_table()
    {
        global $wpdb;

        $table_name = $wpdb->prefix . 'washi_tapes';

        // Check if the table exists
        $table_exists = $wpdb->get_var("SHOW TABLES LIKE '$table_name'") === $table_name;

        if (!$table_exists) {
            // Table doesn't exist, so create it
            error_log('Washi Tape Generator: Table does not exist, creating it now');

            $charset_collate = $wpdb->get_charset_collate();

            // More compatible SQL version without ON UPDATE
            $sql = "CREATE TABLE $table_name (
            id mediumint(9) NOT NULL AUTO_INCREMENT,
            title varchar(255) NOT NULL,
            svg longtext NOT NULL,
            settings longtext NOT NULL,
            created_at datetime DEFAULT CURRENT_TIMESTAMP NOT NULL,
            updated_at datetime NOT NULL,
            PRIMARY KEY  (id)
        ) $charset_collate;";

            require_once ABSPATH . 'wp-admin/includes/upgrade.php';
            dbDelta($sql);

            // Log any errors
            if ($wpdb->last_error) {
                error_log('Washi Tape Table Creation Error: ' . $wpdb->last_error);
            } else {
                error_log('Washi Tape Table Created Successfully');
            }
        }
    }

    /**
     * AJAX: Save washi tape design
     */
    public function save_washi_tape()
    {
        // Check nonce
        check_ajax_referer('washi_tape_nonce', 'nonce');

        // Check user capabilities
        if (!current_user_can('manage_options')) {
            wp_send_json_error(array('message' => __('You do not have permission to perform this action.', 'washi-tape-generator')));
        }

        // Get data
        $title = isset($_POST['title']) ? sanitize_text_field($_POST['title']) : '';
        $svg = isset($_POST['svg']) ? $_POST['svg'] : ''; // We'll sanitize SVG specifically
        $settings = isset($_POST['settings']) ? $_POST['settings'] : ''; // We'll sanitize JSON later

        // Validate data
        if (empty($title) || empty($svg)) {
            wp_send_json_error(array('message' => __('Required fields are missing.', 'washi-tape-generator')));
        }

        // Sanitize SVG (basic sanitization, consider a more robust method for production)
        $svg = $this->sanitize_svg($svg);

        // Sanitize settings JSON
        $settings = json_decode(stripslashes($settings), true);
        if (json_last_error() !== JSON_ERROR_NONE) {
            wp_send_json_error(array('message' => __('Invalid settings format.', 'washi-tape-generator')));
        }
        $settings = json_encode($settings);

        // Save to database
        $db = new Washi_Tape_DB();
        $id = isset($_POST['id']) ? intval($_POST['id']) : 0;

        if ($id > 0) {
            // Update existing
            $result = $db->update_washi_tape($id, $title, $svg, $settings);
        } else {
            // Create new
            $result = $db->create_washi_tape($title, $svg, $settings);
        }

        if ($result) {
            wp_send_json_success(array(
                'message' => __('Washi tape saved successfully.', 'washi-tape-generator'),
                'id' => $result
            ));
        } else {
            wp_send_json_error(array('message' => __('Error saving washi tape.', 'washi-tape-generator')));
        }
    }

    /**
     * AJAX: Delete washi tape design
     */
    public function delete_washi_tape()
    {
        // Check nonce
        check_ajax_referer('washi_tape_nonce', 'nonce');

        // Check user capabilities
        if (!current_user_can('manage_options')) {
            wp_send_json_error(array('message' => __('You do not have permission to perform this action.', 'washi-tape-generator')));
        }

        // Get data
        $id = isset($_POST['id']) ? intval($_POST['id']) : 0;

        // Validate data
        if ($id <= 0) {
            wp_send_json_error(array('message' => __('Invalid washi tape ID.', 'washi-tape-generator')));
        }

        // Delete from database
        $db = new Washi_Tape_DB();
        $result = $db->delete_washi_tape($id);

        if ($result) {
            wp_send_json_success(array('message' => __('Washi tape deleted successfully.', 'washi-tape-generator')));
        } else {
            wp_send_json_error(array('message' => __('Error deleting washi tape.', 'washi-tape-generator')));
        }
    }

    /**
     * AJAX: Get all washi tapes
     */
    public function get_washi_tapes()
    {
        // Check nonce
        check_ajax_referer('washi_tape_nonce', 'nonce');

        // Check user capabilities
        if (!current_user_can('manage_options')) {
            wp_send_json_error(array('message' => __('You do not have permission to perform this action.', 'washi-tape-generator')));
        }

        // Get from database
        $db = new Washi_Tape_DB();
        $washi_tapes = $db->get_all_washi_tapes();

        wp_send_json_success(array('washi_tapes' => $washi_tapes));
    }

    /**
     * AJAX: Get washi tape SVG
     */
    public function get_washi_tape_svg()
    {
        // Check nonce
        check_ajax_referer('washi_tape_nonce', 'nonce');

        // Get tape ID
        $id = isset($_POST['id']) ? intval($_POST['id']) : 0;

        if ($id <= 0) {
            wp_send_json_error(array('message' => __('Invalid washi tape ID.', 'washi-tape-generator')));
        }

        // Get from database
        $db = new Washi_Tape_DB();
        $washi_tape = $db->get_washi_tape($id);

        if (!$washi_tape) {
            wp_send_json_error(array('message' => __('Washi tape not found.', 'washi-tape-generator')));
        }

        wp_send_json_success(array(
            'id' => $washi_tape->id,
            'svg' => $washi_tape->svg
        ));
    }

    /**
     * Sanitize SVG
     * 
     * Basic SVG sanitization (consider using a more robust solution for production)
     */
    private function sanitize_svg($svg)
    {
        // Remove any scripts
        $svg = preg_replace('/<script\b[^>]*>(.*?)<\/script>/is', '', $svg);

        // Remove event handlers
        $svg = preg_replace('/\bon\w+\s*=\s*["\'][^"\']*["\']/i', '', $svg);

        // Clean up quotes and spaces
        $svg = str_replace('&quot;', '"', $svg);
        $svg = str_replace('\&quot;', '"', $svg);
        $svg = preg_replace('/\s+/', ' ', $svg);
        $svg = str_replace('" >', '">', $svg);
        $svg = str_replace('> <', '><', $svg);

        // Ensure proper xmlns attribute
        if (strpos($svg, 'xmlns="http://www.w3.org/2000/svg"') === false) {
            $svg = str_replace('<svg', '<svg xmlns="http://www.w3.org/2000/svg"', $svg);
        }

        return $svg;
    }
}

// Initialize the plugin
function washi_tape_generator_init()
{
    Washi_Tape_Generator::get_instance();
}
add_action('plugins_loaded', 'washi_tape_generator_init');



================================================================
End of Codebase
================================================================
