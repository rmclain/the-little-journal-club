This file is a merged representation of the entire codebase, combined into a single document.
Generated by Repomix on: 2025-08-13T15:25:56.274Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
crafty-chic-navigation/
  assets/
    script.js
    style.css
  crafty-chic-navigation.php
little-journal-club/
  assets/
    css/
      inset-image-box.css
      shop-new-carousel.css
      washi-back.css
      washi-editor.css
      washi-preview.css
      washi.css
      widget-washi-tape.css
    js/
      shop-new-carousel.js
      washi-preview.js
  includes/
    elementor/
      washi-tape-controls.php
  widgets/
    inset-image-box.php
    shop-new-carousel.php
    washi-tape-div.php
  little-journal-club.php
ljc-add-to-cart/
  ljc-add-to-cart.php
mu-plugins/
  elementor-thankyou.php
  smtp-test.php
scrapbook-shop/
  assets/
    css/
      scrapbook-shop.css
  languages/
    README.md
    scrapbook-shop.pot
  widgets/
    scrapbook-product-card.php
    scrapbook-products-grid.php
  repomix-output.md
  scrapbook-shop.php
tljc-posts/
  assets/
    css/
      tljc-posts.css
    js/
      editor.js
  widgets/
    class-tljc-posts-widget.php
  README.md
  tljc-posts.php
washi-tape-attacher/
  assets/
    css/
      editor.css
      frontend.css
    js/
      editor.js
  includes/
    class-elementor-integration.php
  washi-tape-attacher.php
washi-tape-generator/
  assets/
    css/
      admin-style.css
      frontend-style.css
      preview-style.css
    js/
      admin-script.js
      elementor-editor.js
      frontend-script.js
      preview-script.js
  includes/
    admin/
      views/
        admin-page.php
      class-washi-tape-admin.php
    elementor/
      class-washi-tape-elementor.php
    class-washi-tape-db.php
  repomix-output.txt
  washi-tape-generator.php

================================================================
Files
================================================================

================
File: crafty-chic-navigation/assets/script.js
================
/**
 * Crafty Chic Navigation JavaScript
 * Handles mobile menu toggle and smooth interactions
 */

(function($) {
    'use strict';
    
    $(document).ready(function() {
        initCraftyNavigation();
    });
    
    function initCraftyNavigation() {
        // Mobile menu toggle
        $('.crafty-nav-toggle').on('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log('Hamburger menu clicked'); // Debug log
            toggleMobileMenu($(this));
        });
        
        // Mobile dropdown toggle
        $('.crafty-nav-item.has-dropdown .crafty-nav-link').on('click', function(e) {
            if ($(window).width() <= 768) {
                e.preventDefault();
                toggleMobileDropdown($(this).parent());
            }
        });
        
        // Close mobile menu when clicking outside
        $(document).on('click', function(e) {
            if (!$(e.target).closest('.crafty-nav-container').length) {
                closeMobileMenu();
            }
        });
        
        // Handle window resize
        $(window).on('resize', function() {
            if ($(window).width() > 768) {
                closeMobileMenu();
                $('.crafty-nav-item').removeClass('active');
            }
        });
        
        // Smooth scroll for anchor links
        $('.crafty-nav-link[href*="#"], .crafty-nav-dropdown-link[href*="#"]').on('click', function(e) {
            var target = $(this.hash);
            if (target.length) {
                e.preventDefault();
                smoothScrollTo(target);
                closeMobileMenu();
            }
        });
        
        // Update cart count when cart changes (for WooCommerce)
        $(document.body).on('added_to_cart removed_from_cart updated_cart_totals', function() {
            updateCartCount();
        });
        
        // Add loading animation
        addLoadingAnimation();
        
        // Initialize accessibility features
        initAccessibility();
        
        // Debug log to confirm initialization
        console.log('Crafty Navigation initialized');
    }
    
    function toggleMobileMenu($toggle) {
        var $menu = $toggle.closest('.crafty-nav-container').find('.crafty-nav-menu');
        var isActive = $toggle.hasClass('active');
        
        console.log('Toggle mobile menu - isActive:', isActive, 'Menu found:', $menu.length); // Debug log
        
        if (isActive) {
            closeMobileMenu();
        } else {
            openMobileMenu($toggle, $menu);
        }
    }
    
    function openMobileMenu($toggle, $menu) {
        console.log('Opening mobile menu'); // Debug log
        $toggle.addClass('active');
        $menu.addClass('active');
        $('body').addClass('nav-open');
        
        // Add staggered animation to menu items
        $menu.find('.crafty-nav-item').each(function(index) {
            $(this).css({
                'animation-delay': (index * 0.1) + 's',
                'animation-duration': '0.5s',
                'animation-name': 'slideInFromRight',
                'animation-fill-mode': 'both'
            });
        });
    }
    
    function closeMobileMenu() {
        console.log('Closing mobile menu'); // Debug log
        $('.crafty-nav-toggle').removeClass('active');
        $('.crafty-nav-menu').removeClass('active');
        $('.crafty-nav-item').removeClass('active');
        $('body').removeClass('nav-open');
        
        // Reset animations
        $('.crafty-nav-item').css({
            'animation': 'none'
        });
    }
    
    function toggleMobileDropdown($item) {
        var isActive = $item.hasClass('active');
        
        // Close other dropdowns
        $('.crafty-nav-item').not($item).removeClass('active');
        
        // Toggle current dropdown
        if (isActive) {
            $item.removeClass('active');
        } else {
            $item.addClass('active');
        }
    }
    
    function smoothScrollTo($target) {
        var offset = $target.offset().top - 100; // Account for fixed header
        
        $('html, body').animate({
            scrollTop: offset
        }, 800, 'easeInOutCubic');
    }
    
    function addLoadingAnimation() {
        // Add CSS animations dynamically
        var styles = `
            @keyframes slideInFromRight {
                from {
                    opacity: 0;
                    transform: translateX(30px);
                }
                to {
                    opacity: 1;
                    transform: translateX(0);
                }
            }
            
            @keyframes fadeInScale {
                from {
                    opacity: 0;
                    transform: scale(0.9);
                }
                to {
                    opacity: 1;
                    transform: scale(1);
                }
            }
            
            .crafty-nav-container {
                animation: fadeInScale 0.6s ease-out;
            }
            
            .crafty-nav-link::after {
                content: '';
                position: absolute;
                bottom: 0;
                left: 50%;
                width: 0;
                height: 2px;
                background: linear-gradient(90deg, #e8a87c, #c27d54);
                transition: all 0.3s ease;
                transform: translateX(-50%);
            }
            
            .crafty-nav-link:hover::after {
                width: 80%;
            }
            
            @media (max-width: 768px) {
                .crafty-nav-link::after {
                    display: none;
                }
            }
        `;
        
        $('<style>').prop('type', 'text/css').html(styles).appendTo('head');
    }
    
    function initAccessibility() {
        // Add ARIA attributes
        $('.crafty-nav-toggle').attr({
            'aria-expanded': 'false',
            'aria-controls': 'crafty-nav-menu',
            'aria-label': 'Toggle navigation menu'
        });
        
        $('.crafty-nav-menu').attr('id', 'crafty-nav-menu');
        
        // Update ARIA states on menu toggle
        $('.crafty-nav-toggle').on('click', function() {
            var expanded = $(this).hasClass('active');
            $(this).attr('aria-expanded', expanded);
        });
        
        // Keyboard navigation
        $('.crafty-nav-link, .crafty-nav-dropdown-link').on('keydown', function(e) {
            var $this = $(this);
            var $items = $('.crafty-nav-link, .crafty-nav-dropdown-link');
            var currentIndex = $items.index($this);
            
            switch(e.keyCode) {
                case 37: // Left arrow
                    e.preventDefault();
                    focusMenuItem(currentIndex - 1, $items);
                    break;
                case 39: // Right arrow
                    e.preventDefault();
                    focusMenuItem(currentIndex + 1, $items);
                    break;
                case 40: // Down arrow
                    e.preventDefault();
                    if ($this.hasClass('crafty-nav-link') && $this.siblings('.crafty-nav-dropdown').length) {
                        $this.siblings('.crafty-nav-dropdown').find('.crafty-nav-dropdown-link').first().focus();
                    } else {
                        focusMenuItem(currentIndex + 1, $items);
                    }
                    break;
                case 38: // Up arrow
                    e.preventDefault();
                    if ($this.hasClass('crafty-nav-dropdown-link')) {
                        var $parentLink = $this.closest('.crafty-nav-item').find('.crafty-nav-link');
                        $parentLink.focus();
                    } else {
                        focusMenuItem(currentIndex - 1, $items);
                    }
                    break;
                case 27: // Escape
                    e.preventDefault();
                    closeMobileMenu();
                    break;
            }
        });
    }
    
    function focusMenuItem(index, $items) {
        if (index < 0) index = $items.length - 1;
        if (index >= $items.length) index = 0;
        $items.eq(index).focus();
    }
    
    function updateCartCount() {
        // Update cart count via AJAX for WooCommerce
        if (typeof wc_add_to_cart_params !== 'undefined') {
            $.ajax({
                type: 'POST',
                url: wc_add_to_cart_params.ajax_url,
                data: {
                    action: 'get_cart_count'
                },
                success: function(response) {
                    if (response.success) {
                        var count = parseInt(response.data.count);
                        var $cartCount = $('.crafty-nav-cart-count');
                        
                        if (count > 0) {
                            $cartCount.text(count).show();
                        } else {
                            $cartCount.hide();
                        }
                        
                        // Add a small animation
                        $cartCount.addClass('updated');
                        setTimeout(function() {
                            $cartCount.removeClass('updated');
                        }, 300);
                    }
                }
            });
        }
    }
    
    // Custom easing function
    $.easing.easeInOutCubic = function (x, t, b, c, d) {
        if ((t/=d/2) < 1) return c/2*t*t*t + b;
        return c/2*((t-=2)*t*t + 2) + b;
    };
    
    // Add scroll effect to navigation
    $(window).on('scroll', function() {
        var scrollTop = $(window).scrollTop();
        var $nav = $('.crafty-nav-container');
        
        if (scrollTop > 100) {
            $nav.addClass('scrolled');
        } else {
            $nav.removeClass('scrolled');
        }
    });
    
    // Add scroll effect styles
    $('<style>').prop('type', 'text/css').html(`
        .crafty-nav-container.scrolled {
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            transform: translateY(-1px);
            transition: all 0.3s ease;
        }
        
        .crafty-nav-container.scrolled::before {
            opacity: 1;
        }
    `).appendTo('head');
    
})(jQuery);

================
File: crafty-chic-navigation/assets/style.css
================
/* Crafty Chic Navigation Styles - Optimized */

/* Base Navigation Container */
.crafty-nav-container {
    width: 100%;
    background: linear-gradient(135deg, #faf8f5 0%, #f5f2ed 100%);
    border-bottom: 3px solid transparent;
    border-image: linear-gradient(90deg, #e8a87c, #c27d54, #d4a574, #e8a87c) 1;
    position: relative;
    z-index: 1000;
    font-family: 'Georgia', 'Times New Roman', serif;
    box-shadow: 0 2px 10px rgba(0,0,0,0.05);
}

/* Washi Tape Effect */
.crafty-nav-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: repeating-linear-gradient(
        90deg,
        #e8a87c 0px,
        #e8a87c 10px,
        #d4a574 10px,
        #d4a574 20px,
        #c27d54 20px,
        #c27d54 30px,
        #f4b996 30px,
        #f4b996 40px
    );
    opacity: 0.8;
    animation: washi-slide 8s linear infinite;
}

@keyframes washi-slide {
    0% { background-position: 0% 0%; }
    100% { background-position: 40px 0%; }
}

/* Navigation Wrapper */
.crafty-nav-wrapper {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: space-between;
}

/* Mobile Toggle Bar */
.crafty-nav-mobile-bar {
    display: none;
    width: 100% !important;
    background: #f8f8f8 !important;
    border-top: 1px solid #e0e0e0 !important;
    padding: 10px 0 !important;
    justify-content: center;
    align-items: center;
}

/* Navigation Actions */
.crafty-nav-actions {
    display: flex;
    align-items: center;
    gap: 15px;
}

/* Cart Styles */
.crafty-nav-cart {
    display: flex;
    align-items: center;
    text-decoration: none;
    color: #5a4a3a;
    padding: 10px;
    border-radius: 8px;
    transition: all 0.3s ease;
    position: relative;
}

.crafty-nav-cart:hover {
    color: #c27d54;
    background: rgba(232, 168, 124, 0.1);
}

.crafty-nav-cart-count {
    background: #c27d54;
    color: white;
    border-radius: 50%;
    font-size: 12px;
    font-weight: bold;
    min-width: 18px;
    height: 18px;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-left: 5px;
    line-height: 1;
}

.crafty-nav-cart-count:empty {
    display: none;
}

.crafty-nav-cart-count.updated {
    animation: cartBounce 0.3s ease;
}

@keyframes cartBounce {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.2); }
}

/* Mobile Toggle Button - Clean hamburger only */
.crafty-nav-toggle {
    display: none;
    background: transparent !important;
    border: none !important;
    cursor: pointer;
    padding: 10px !important;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    width: auto !important;
    height: auto !important;
    z-index: 1001;
    box-shadow: none !important;
    outline: none !important;
}

.crafty-nav-toggle-line {
    width: 25px;
    height: 3px;
    background: #c27d54;
    margin: 2px 0;
    transition: all 0.3s ease;
    border-radius: 2px;
}

.crafty-nav-toggle.active .crafty-nav-toggle-line:nth-child(1) {
    transform: rotate(45deg) translate(6px, 6px);
}

.crafty-nav-toggle.active .crafty-nav-toggle-line:nth-child(2) {
    opacity: 0;
}

.crafty-nav-toggle.active .crafty-nav-toggle-line:nth-child(3) {
    transform: rotate(-45deg) translate(6px, -6px);
}

/* Main Navigation Menu */
.crafty-nav-menu {
    display: flex;
    list-style: none;
    margin: 0;
    padding: 0;
    justify-content: center;
    align-items: center;
    min-height: 70px;
    flex: 1;
}

.crafty-nav-item {
    position: relative;
    margin: 0 5px;
}

.crafty-nav-link {
    display: flex;
    align-items: center;
    padding: 15px 20px;
    text-decoration: none;
    color: #5a4a3a;
    font-weight: 500;
    font-size: 16px;
    letter-spacing: 0.5px;
    transition: all 0.3s ease;
    border-radius: 25px;
    position: relative;
    overflow: hidden;
}

.crafty-nav-link::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(232, 168, 124, 0.1), transparent);
    transition: left 0.5s ease;
}

.crafty-nav-link:hover::before {
    left: 100%;
}

.crafty-nav-link:hover {
    color: #c27d54;
    background: rgba(232, 168, 124, 0.05);
    transform: translateY(-2px);
}

.crafty-nav-arrow {
    margin-left: 5px;
    font-size: 12px;
    transition: transform 0.3s ease;
}

.crafty-nav-item:hover .crafty-nav-arrow {
    transform: rotate(180deg);
}

/* Dropdown Styles */
.crafty-nav-dropdown {
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    background: #ffffff;
    border-radius: 15px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    list-style: none;
    margin: 0;
    padding: 10px 0;
    min-width: 200px;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    border: 2px solid #f4b996;
    z-index: 1001;
}

.crafty-nav-dropdown::before {
    content: '';
    position: absolute;
    top: -8px;
    left: 50%;
    transform: translateX(-50%);
    width: 0;
    height: 0;
    border-left: 8px solid transparent;
    border-right: 8px solid transparent;
    border-bottom: 8px solid #f4b996;
}

.crafty-nav-item:hover .crafty-nav-dropdown,
.crafty-nav-item:focus-within .crafty-nav-dropdown {
    opacity: 1;
    visibility: visible;
    transform: translateX(-50%) translateY(5px);
}

.crafty-nav-dropdown-item {
    margin: 0;
}

.crafty-nav-dropdown-link {
    display: block;
    padding: 12px 20px;
    color: #5a4a3a;
    text-decoration: none;
    transition: all 0.3s ease;
    border-radius: 10px;
    margin: 0 10px;
    font-size: 14px;
}

.crafty-nav-dropdown-link:hover {
    background: linear-gradient(135deg, #f4b996, #e8a87c);
    color: #ffffff;
    transform: translateX(5px);
}

/* Minimal Style Variant */
.crafty-nav-container[data-style="minimal"] {
    background: #ffffff;
    border: none;
    box-shadow: none;
}

.crafty-nav-container[data-style="minimal"]::before {
    display: none;
}

.crafty-nav-container[data-style="minimal"] .crafty-nav-link {
    font-family: "Meloso", sans-serif;
    border-radius: 0;
    padding: 15px 20px;
}

.crafty-nav-container[data-style="minimal"] .crafty-nav-link::before {
    display: none;
}

.crafty-nav-container[data-style="minimal"] .crafty-nav-link:hover {
    background: transparent;
    transform: none;
    color: #5a4a3a;
}

.crafty-nav-container[data-style="minimal"] .crafty-nav-cart {
    font-family: "Meloso", sans-serif;
}

.crafty-nav-container[data-style="minimal"] .crafty-nav-cart:hover {
    background: transparent;
    color: #5a4a3a;
}

.crafty-nav-container[data-style="minimal"] .crafty-nav-toggle-line {
    background: #5a4a3a;
}

/* Mobile Responsiveness */
@media (max-width: 768px) {
    .crafty-nav-mobile-bar {
        display: flex;
    }
    
    .crafty-nav-toggle {
        display: flex;
    }
    
    .crafty-nav-wrapper {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }
    
    .crafty-nav-actions {
        justify-content: flex-start;
    }
    
    .crafty-nav-menu {
        position: absolute !important;
        top: calc(100% + 50px) !important;
        left: 0 !important;
        right: 0 !important;
        background: #FBF2F1 !important;
        flex-direction: column !important;
        align-items: stretch !important;
        min-height: auto !important;
        padding: 20px 0 !important;
        border-radius: 0 0 15px 15px !important;
        box-shadow: 0 5px 20px rgba(0,0,0,0.1) !important;
        opacity: 0 !important;
        visibility: hidden !important;
        transform: translateY(-20px) !important;
        transition: all 0.3s ease !important;
        width: 100% !important;
        z-index: 999 !important;
        list-style: none !important;
        margin: 0 !important;
    }
    
    .crafty-nav-menu.active {
        opacity: 1 !important;
        visibility: visible !important;
        transform: translateY(0) !important;
    }
    
    .crafty-nav-item {
        margin: 0;
        width: 100%;
    }
    
    .crafty-nav-link {
        padding: 15px 25px !important;
        border-radius: 0 !important;
        justify-content: space-between !important;
        border-bottom: 1px solid rgba(255,255,255,0.3) !important;
        color: #5a4a3a !important;
        display: flex !important;
        text-decoration: none !important;
    }
    
    .crafty-nav-link:hover {
        background: rgba(255,255,255,0.3) !important;
        transform: none !important;
        color: #5a4a3a !important;
    }
    
    .crafty-nav-dropdown {
        position: static;
        transform: none;
        box-shadow: none;
        border: none;
        border-radius: 0;
        background: rgba(255,255,255,0.2);
        opacity: 1;
        visibility: visible;
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.3s ease;
    }
    
    .crafty-nav-dropdown::before {
        display: none;
    }
    
    .crafty-nav-item:hover .crafty-nav-dropdown,
    .crafty-nav-item.active .crafty-nav-dropdown {
        max-height: 300px;
        transform: none;
    }
    
    .crafty-nav-dropdown-link {
        margin: 0;
        padding-left: 45px;
        border-radius: 0;
        background: transparent;
        color: #5a4a3a;
    }
    
    .crafty-nav-dropdown-link:hover {
        background: rgba(255,255,255,0.3);
        transform: none;
        color: #5a4a3a;
    }

    /* Minimal style mobile overrides */
    .crafty-nav-container[data-style="minimal"] .crafty-nav-mobile-bar {
        background: #ffffff !important;
        border-top: 1px solid #f0f0f0 !important;
    }
    
    .crafty-nav-container[data-style="minimal"] .crafty-nav-menu {
        background: #FBF2F1 !important;
    }
    
    .crafty-nav-container[data-style="minimal"] .crafty-nav-link,
    .crafty-nav-container[data-style="minimal"] .crafty-nav-dropdown-link {
        font-family: "Meloso", sans-serif !important;
        color: #5a4a3a !important;
    }
    
    .crafty-nav-container[data-style="minimal"] .crafty-nav-link:hover,
    .crafty-nav-container[data-style="minimal"] .crafty-nav-dropdown-link:hover {
        background: rgba(255,255,255,0.3) !important;
        color: #5a4a3a !important;
    }
    
    .crafty-nav-container[data-style="minimal"] .crafty-nav-dropdown {
        background: rgba(255,255,255,0.2) !important;
    }
    
    .crafty-nav-container[data-style="minimal"] .crafty-nav-toggle-line {
        background: #5a4a3a !important;
    }
}

@media (max-width: 480px) {
    .crafty-nav-wrapper {
        padding: 0 15px;
    }
    
    .crafty-nav-link {
        padding: 12px 20px;
        font-size: 14px;
    }
}

/* Accessibility */
.crafty-nav-link:focus,
.crafty-nav-dropdown-link:focus {
    outline: 2px solid #c27d54;
    outline-offset: 2px;
}

/* Print styles */
@media print {
    .crafty-nav-container {
        display: none;
    }
}

================
File: crafty-chic-navigation/crafty-chic-navigation.php
================
<?php
/**
 * Plugin Name: Crafty Chic Navigation
 * Description: A beautiful, responsive navigation menu with crafty chic styling perfect for creative websites
 * Version: 1.0.0
 * Author: Kayla Brasher
 */

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

class CraftyChicNavigation {
    
    public function __construct() {
        add_action('init', array($this, 'init'));
    }
    
    public function init() {
        // Enqueue styles and scripts
        add_action('wp_enqueue_scripts', array($this, 'enqueue_assets'));
        
        // Add shortcode
        add_shortcode('crafty_nav', array($this, 'render_navigation'));
        
        // Add admin menu
        add_action('admin_menu', array($this, 'add_admin_menu'));
        
        // AJAX handlers for cart count
        add_action('wp_ajax_get_cart_count', array($this, 'ajax_get_cart_count'));
        add_action('wp_ajax_nopriv_get_cart_count', array($this, 'ajax_get_cart_count'));
        
        // Register Elementor widget if Elementor is active
        if (class_exists('\Elementor\Plugin')) {
            add_action('elementor/widgets/widgets_registered', array($this, 'register_elementor_widget'));
        }
    }
    
    public function enqueue_assets() {
        wp_enqueue_style('crafty-nav-style', plugin_dir_url(__FILE__) . 'assets/style.css', array(), '1.0.0');
        wp_enqueue_script('crafty-nav-script', plugin_dir_url(__FILE__) . 'assets/script.js', array('jquery'), '1.0.0', true);
    }
    
    public function render_navigation($atts) {
        $atts = shortcode_atts(array(
            'menu_name' => '',
            'style' => 'minimal',
            'show_cart' => 'true'
        ), $atts);
        
        $menu_items = $this->get_menu_items($atts['menu_name']);
        
        ob_start();
        ?>
        <nav class="crafty-nav-container" data-style="<?php echo esc_attr($atts['style']); ?>">
            <div class="crafty-nav-wrapper">
                <ul class="crafty-nav-menu">
                    <?php foreach ($menu_items as $item) : ?>
                        <li class="crafty-nav-item <?php echo $item['has_children'] ? 'has-dropdown' : ''; ?>">
                            <a href="<?php echo esc_url($item['url']); ?>" class="crafty-nav-link">
                                <?php echo esc_html($item['title']); ?>
                                <?php if ($item['has_children']) : ?>
                                    <span class="crafty-nav-arrow">▾</span>
                                <?php endif; ?>
                            </a>
                            
                            <?php if ($item['has_children']) : ?>
                                <ul class="crafty-nav-dropdown">
                                    <?php foreach ($item['children'] as $child) : ?>
                                        <li class="crafty-nav-dropdown-item">
                                            <a href="<?php echo esc_url($child['url']); ?>" class="crafty-nav-dropdown-link">
                                                <?php echo esc_html($child['title']); ?>
                                            </a>
                                        </li>
                                    <?php endforeach; ?>
                                </ul>
                            <?php endif; ?>
                        </li>
                    <?php endforeach; ?>
                </ul>
                
                <div class="crafty-nav-actions">
                    <?php if ($atts['show_cart'] === 'true') : ?>
                        <a href="<?php echo $this->get_cart_url(); ?>" class="crafty-nav-cart">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M7 18c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zM1 2v2h2l3.6 7.59-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h12v-2H7.42c-.14 0-.25-.11-.25-.25l.03-.12L8.1 13h7.45c.75 0 1.41-.41 1.75-1.03L21.7 4H5.21l-.94-2H1zm16 16c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"/>
                            </svg>
                            <span class="crafty-nav-cart-count"><?php echo $this->get_cart_count(); ?></span>
                        </a>
                    <?php endif; ?>
                </div>
            </div>
            
            <!-- Mobile Toggle Bar -->
            <div class="crafty-nav-mobile-bar">
                <button class="crafty-nav-toggle" aria-label="Toggle navigation">
                    <span class="crafty-nav-toggle-line"></span>
                    <span class="crafty-nav-toggle-line"></span>
                    <span class="crafty-nav-toggle-line"></span>
                </button>
            </div>
        </nav>
        <?php
        return ob_get_clean();
    }
    
    private function get_menu_items($menu_name) {
        // Try to get the specified menu first
        $menu = null;
        
        if (!empty($menu_name)) {
            // Try by slug first, then by name
            $menu = wp_get_nav_menu_object($menu_name);
            if (!$menu) {
                // Try by name if slug didn't work
                $menus = wp_get_nav_menus();
                foreach ($menus as $menu_obj) {
                    if ($menu_obj->name === $menu_name || $menu_obj->slug === $menu_name) {
                        $menu = $menu_obj;
                        break;
                    }
                }
            }
        }
        
        // If no specific menu found, try to get primary menu location
        if (!$menu) {
            $locations = get_nav_menu_locations();
            if (isset($locations['primary'])) {
                $menu = wp_get_nav_menu_object($locations['primary']);
            }
        }
        
        // If still no menu, try to get the first available menu
        if (!$menu) {
            $menus = wp_get_nav_menus();
            if (!empty($menus)) {
                $menu = $menus[0];
            }
        }
        
        // If we have a menu, format it
        if ($menu) {
            $menu_items = wp_get_nav_menu_items($menu);
            if ($menu_items) {
                return $this->format_menu_items($menu_items);
            }
        }
        
        // Fallback to default menu items with working URLs
        return array(
            array('title' => 'Home', 'url' => home_url('/'), 'has_children' => false),
            array('title' => 'Shop', 'url' => home_url('/shop/'), 'has_children' => true, 'children' => array(
                array('title' => 'All Products', 'url' => home_url('/shop/')),
                array('title' => 'Journals', 'url' => home_url('/product-category/journals/')),
                array('title' => 'Stickers', 'url' => home_url('/product-category/stickers/')),
                array('title' => 'Washi Tape', 'url' => home_url('/product-category/washi-tape/')),
                array('title' => 'Gift Sets', 'url' => home_url('/product-category/gift-sets/'))
            )),
            array('title' => 'Blog', 'url' => home_url('/blog/'), 'has_children' => false),
            array('title' => 'About', 'url' => home_url('/about/'), 'has_children' => false),
            array('title' => 'Contact', 'url' => home_url('/contact/'), 'has_children' => false)
        );
    }
    
    private function format_menu_items($menu_items) {
        if (!$menu_items || !is_array($menu_items)) return array();
        
        $formatted = array();
        $parent_items = array();
        $child_items = array();
        
        // Separate parent and child items
        foreach ($menu_items as $item) {
            if ($item->menu_item_parent == 0) {
                $parent_items[$item->ID] = array(
                    'title' => $item->title,
                    'url' => $item->url,
                    'has_children' => false,
                    'children' => array(),
                    'menu_order' => $item->menu_order
                );
            } else {
                $child_items[] = array(
                    'parent_id' => $item->menu_item_parent,
                    'title' => $item->title,
                    'url' => $item->url,
                    'menu_order' => $item->menu_order
                );
            }
        }
        
        // Assign children to parents
        foreach ($child_items as $child) {
            if (isset($parent_items[$child['parent_id']])) {
                $parent_items[$child['parent_id']]['has_children'] = true;
                $parent_items[$child['parent_id']]['children'][] = array(
                    'title' => $child['title'],
                    'url' => $child['url'],
                    'menu_order' => $child['menu_order']
                );
            }
        }
        
        // Sort children by menu order
        foreach ($parent_items as &$parent) {
            if ($parent['has_children']) {
                usort($parent['children'], function($a, $b) {
                    return $a['menu_order'] - $b['menu_order'];
                });
            }
        }
        
        // Sort parent items by menu order and return
        uasort($parent_items, function($a, $b) {
            return $a['menu_order'] - $b['menu_order'];
        });
        
        return array_values($parent_items);
    }
    
    private function get_cart_url() {
        if (function_exists('wc_get_cart_url')) {
            return wc_get_cart_url();
        }
        return home_url('/cart/');
    }
    
    private function get_cart_count() {
        if (function_exists('WC') && WC()->cart) {
            return WC()->cart->get_cart_contents_count();
        }
        return 0;
    }
    
    public function ajax_get_cart_count() {
        wp_send_json_success(array(
            'count' => $this->get_cart_count()
        ));
    }
    
    public function add_admin_menu() {
        add_options_page(
            'Crafty Navigation Settings',
            'Crafty Navigation',
            'manage_options',
            'crafty-nav-settings',
            array($this, 'admin_page')
        );
    }
    
    public function admin_page() {
        // Get available menus for display
        $menus = wp_get_nav_menus();
        $menu_list = '';
        if (!empty($menus)) {
            foreach ($menus as $menu) {
                $menu_list .= '<li><code>[crafty_nav menu_name="' . $menu->slug . '"]</code> - ' . $menu->name . '</li>';
            }
        } else {
            $menu_list = '<li>No menus found. <a href="' . admin_url('nav-menus.php') . '">Create a menu first</a>.</li>';
        }
        
        ?>
        <div class="wrap">
            <h1>Crafty Chic Navigation Settings</h1>
            <p>Use the shortcode <code>[crafty_nav]</code> to display your navigation menu.</p>
            <p>For Elementor, search for "Crafty Navigation" in the widget panel.</p>
            
            <h2>Shortcode Options</h2>
            <table class="form-table">
                <tr>
                    <th scope="row">Basic Usage</th>
                    <td><code>[crafty_nav]</code></td>
                </tr>
                <tr>
                    <th scope="row">Style Options</th>
                    <td>
                        <code>[crafty_nav style="default"]</code> - Full decorative style<br>
                        <code>[crafty_nav style="minimal"]</code> - Clean minimal style
                    </td>
                </tr>
                <tr>
                    <th scope="row">Cart Options</th>
                    <td>
                        <code>[crafty_nav show_cart="true"]</code> - Show cart (default)<br>
                        <code>[crafty_nav show_cart="false"]</code> - Hide cart
                    </td>
                </tr>
                <tr>
                    <th scope="row">Available Menus</th>
                    <td>
                        <ul>
                            <?php echo $menu_list; ?>
                        </ul>
                    </td>
                </tr>
            </table>
            
            <h2>Features</h2>
            <ul>
                <li>✅ WordPress menu integration with dropdown selection</li>
                <li>✅ Mobile responsive with full-width hamburger bar</li>
                <li>✅ WooCommerce cart integration with live count updates</li>
                <li>✅ Dropdown support for sub-categories</li>
                <li>✅ Meloso font family for minimal style</li>
                <li>✅ Custom mobile background color (#FBF2F1)</li>
                <li>✅ Accessibility features and keyboard navigation</li>
                <li>✅ Elementor widget with menu selection dropdown</li>
            </ul>
            
            <h2>Elementor Widget</h2>
            <p>When using the Elementor widget, you can:</p>
            <ul>
                <li><strong>Select Menu:</strong> Choose from any WordPress menu you've created</li>
                <li><strong>Choose Style:</strong> Toggle between Default and Minimal styles</li>
                <li><strong>Toggle Cart:</strong> Show/hide the shopping cart icon</li>
            </ul>
            
            <h2>Creating Menus</h2>
            <p>To create or edit menus, go to <a href="<?php echo admin_url('nav-menus.php'); ?>">Appearance → Menus</a> in your WordPress admin.</p>
            
            <h2>Mobile Menu</h2>
            <p>On mobile devices:</p>
            <ul>
                <li>Cart icon appears in top area</li>
                <li>Full-width hamburger bar appears below cart</li>
                <li>Menu slides down with custom #FBF2F1 background</li>
                <li>Smooth animations and transitions</li>
            </ul>
        </div>
        <?php
    }
    
    public function register_elementor_widget() {
        // Only register if Elementor is properly loaded
        if (!class_exists('\Elementor\Widget_Base')) {
            return;
        }
        
        // Define the widget class inline to avoid loading issues
        $widget_class = new class extends \Elementor\Widget_Base {
            
            public function get_name() {
                return 'crafty_navigation';
            }
            
            public function get_title() {
                return 'Crafty Navigation';
            }
            
            public function get_icon() {
                return 'eicon-nav-menu';
            }
            
            public function get_categories() {
                return ['general'];
            }
            
            protected function register_controls() {
                $this->start_controls_section(
                    'content_section',
                    [
                        'label' => 'Navigation Settings',
                        'tab' => \Elementor\Controls_Manager::TAB_CONTENT,
                    ]
                );
                
                $this->add_control(
                    'menu_style',
                    [
                        'label' => 'Style',
                        'type' => \Elementor\Controls_Manager::SELECT,
                        'default' => 'minimal',
                        'options' => [
                            'default' => 'Default',
                            'minimal' => 'Minimal',
                        ],
                    ]
                );
                
                // Get all WordPress menus
                $menus = wp_get_nav_menus();
                $menu_options = [];
                $menu_options[''] = 'Select a menu...';
                
                foreach ($menus as $menu) {
                    $menu_options[$menu->slug] = $menu->name;
                }
                
                $this->add_control(
                    'selected_menu',
                    [
                        'label' => 'Select Menu',
                        'type' => \Elementor\Controls_Manager::SELECT,
                        'default' => '',
                        'options' => $menu_options,
                        'description' => 'Choose which WordPress menu to display. Create menus in Appearance > Menus.',
                    ]
                );
                
                $this->add_control(
                    'show_cart',
                    [
                        'label' => 'Show Cart',
                        'type' => \Elementor\Controls_Manager::SWITCHER,
                        'label_on' => 'Show',
                        'label_off' => 'Hide',
                        'return_value' => 'true',
                        'default' => 'true',
                    ]
                );
                
                $this->end_controls_section();
            }
            
            protected function render() {
                $settings = $this->get_settings_for_display();
                $shortcode_atts = [
                    'style="' . $settings['menu_style'] . '"',
                    'show_cart="' . $settings['show_cart'] . '"'
                ];
                
                if (!empty($settings['selected_menu'])) {
                    $shortcode_atts[] = 'menu_name="' . $settings['selected_menu'] . '"';
                }
                
                echo do_shortcode('[crafty_nav ' . implode(' ', $shortcode_atts) . ']');
            }
        };
        
        \Elementor\Plugin::instance()->widgets_manager->register($widget_class);
    }
}

// Initialize the plugin
new CraftyChicNavigation();
?>

================
File: little-journal-club/assets/css/inset-image-box.css
================
.inset-image-box {
    border-style: solid;
    border-color: #333;
    transition: transform 0.3s ease;
    /* Default styles for larger screens */
    width: 300px;
    height: 300px;
}

.inset-image-box:hover {
    transform: scale(1.05);
}

.inset-image-box img {
    max-width: 100%;
    height: auto;
    display: block;
}

/* Media query for smaller screens */
@media (max-width: 768px) {
    .inset-image-box {
        width: 100%;
        height: auto; /* Adjust height to maintain aspect ratio */
    }
}

================
File: little-journal-club/assets/css/shop-new-carousel.css
================
/* Outer container styling */
.shop-new-carousel-container {
    width: 100%;
    overflow: visible;
    padding: 20px;
    text-align: center;
  }
  
  /* Swiper container */
  .shop-new-carousel {
    position: relative;
    overflow: visible;
    margin: 0 auto;
  }
  
  /* Each slide */
  .shop-new-carousel .swiper-slide {
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  /* Wrapper that gets scaled */
  .shop-new-item__wrapper {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    padding: 10px;
  }
  
  /* Image container with optional mask */
  .shop-new-item__image {
    width: 100%;
    height: auto;
    overflow: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  /* Product image styling */
  .shop-new-item__image img {
    width: 100%;
    height: auto;
    object-fit: contain;
  }
  
  /* Information styling */
  .shop-new-item__info {
    margin-top: 10px;
  }
  .shop-new-item__title {
    font-size: 16px;
    margin: 5px 0;
  }
  .shop-new-item__price {
    font-size: 14px;
    color: #333;
  }
  
  /* Navigation buttons (optional) */
  .swiper-button-prev,
  .swiper-button-next {
    color: #000;
  }

================
File: little-journal-club/assets/css/washi-back.css
================
/* ===============================
   1. Washi Tape Div Widget Styles 
   =============================== */
.widget-washi-tape-container {
  position: relative;
  margin: 35px auto;
  padding: 0;
  box-sizing: border-box;
  padding-top: 49px;
}

.widget-washi-tape-content {
  position: relative;
  z-index: 0;
  width: 100%;
  box-sizing: border-box;
  background-color: #fff;
  top: -49px;
}

.widget-washi-tape-title {
  margin: 0 0 15px 0;
  font-size: 1.5em;
  font-weight: 600;
  line-height: 1.2;
}

.widget-washi-tape-content-text {
  margin: 0;
  flex: 1;
}

/* Widget Tape Base Styles */
.widget-tape {
  position: absolute;
  width: 195px;
  height: 52px;
  z-index: 1;
  opacity: 0.8;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

/* Widget Tape Positioning */
.widget-tape-left {
  left: -50px;
  top: calc(-26px + 50px);
  transform: rotate(-33deg);
  transform-origin: 0 50%;
}

.widget-tape-right {
  right: -50px;
  top: calc(-26px + 50px);
  transform: rotate(33deg);
  transform-origin: 100% 50%;
}

.widget-tape-center {
  left: 50%;
  top: calc(-26px + 50px);
  transform: translateX(-50%);
}

/* Widget-specific responsive styles */
@media (max-width: 767px) {
  .widget-tape {
    height: 25px;
  }

  .widget-tape-left,
  .widget-tape-right {
    width: 70px;
  }

  .widget-washi-tape-title {
    font-size: 1.3em;
  }
}

/* ===============================
   2. Elementor Washi Tape Styles 
   =============================== */
[class*="elementor-washi-"] {
  position: relative;
}

[class*="elementor-washi-"]::before {
  content: '';
  position: absolute;
  width: 80px;
  height: 30px;
  top: -15px;
  z-index: 1;
  opacity: 0.8;
}

/* Elementor Washi Positions */
.elementor-washi-left::before {
  left: 20px;
  transform: rotate(-35deg);
}

.elementor-washi-right::before {
  right: 20px;
  transform: rotate(35deg);
}

.elementor-washi-center::before {
  left: 50%;
  transform: translateX(-50%) rotate(-5deg);
}

/* Shared Tape Style Patterns */
.tape-pattern-pink,
.elementor-washi-pink::before {
  background-color: rgba(255, 182, 193, 0.8);
}

.tape-pattern-mint,
.elementor-washi-mint::before {
  background-color: rgba(152, 255, 178, 0.8);
}

/* Tape styles */
.ljc-tape-lavender {
  background-color: rgba(230, 190, 255, 0.8);
}

.ljc-tape-striped {
  background: repeating-linear-gradient(45deg,
      rgba(255, 192, 203, 0.8),
      rgba(255, 192, 203, 0.8) 10px,
      rgba(255, 218, 224, 0.8) 10px,
      rgba(255, 218, 224, 0.8) 20px);
}

.ljc-tape-polkadot {
  background-color: rgba(255, 223, 186, 0.8);
  background-image: radial-gradient(circle at 3px 3px,
      rgba(255, 155, 55, 0.5) 2px,
      transparent 0);
  background-size: 15px 15px;
}

.ljc-tape-floral {
  background-color: rgba(255, 240, 245, 0.8);
  background-image:
    radial-gradient(circle at 50% 50%, rgba(255, 182, 193, 0.6) 2px, transparent 0),
    radial-gradient(circle at 0% 50%, rgba(255, 182, 193, 0.6) 2px, transparent 0),
    radial-gradient(circle at 100% 50%, rgba(255, 182, 193, 0.6) 2px, transparent 0);
  background-size: 20px 20px;
}

.ljc-tape-grid {
  background-color: rgba(176, 224, 230, 0.8);
  background-image:
    linear-gradient(rgba(255, 255, 255, 0.2) 2px, transparent 2px),
    linear-gradient(90deg, rgba(255, 255, 255, 0.2) 2px, transparent 2px);
  background-size: 10px 10px;
}

.ljc-tape-rainbow {
  background: linear-gradient(90deg,
      rgba(255, 182, 193, 0.8),
      rgba(255, 218, 185, 0.8),
      rgba(255, 255, 186, 0.8),
      rgba(176, 224, 230, 0.8),
      rgba(230, 190, 255, 0.8));
}

.ljc-tape-bw-grid {
  background-color: rgba(255, 255, 255, 0.9);
  background-image:
    linear-gradient(black 2.2px, transparent 2.2px),
    linear-gradient(90deg, black 2.2px, transparent 2.2px);
  background-size: 10px 10px;
  background-position: 5px 5px;
  /* Offset by 5px in both directions */
}

.ljc-tape-custom-image {
  background-color: transparent;
  background-position: center;
  image-rendering: -webkit-optimize-contrast;
  /* Improves image quality on Webkit browsers */
  image-rendering: crisp-edges;
  /* Modern browsers */
}

/* Additional Washi Styles */
.ljc-elementor-washi.ljc-washi-style-pastel-grid::before {
  background-color: rgba(255, 218, 235, 0.8);
  /* pastel pink */
  background-image:
    linear-gradient(rgba(255, 255, 255, 0.3) 1px, transparent 1px),
    linear-gradient(90deg, rgba(255, 255, 255, 0.3) 1px, transparent 1px);
  background-size: 8px 8px;
}

.ljc-elementor-washi.ljc-washi-style-mint-dots::before {
  background-color: rgba(183, 255, 219, 0.8);
  /* pastel mint */
  background-image: radial-gradient(circle at 4px 4px,
      rgba(255, 255, 255, 0.6) 1.5px,
      transparent 0);
  background-size: 12px 12px;
}

.ljc-elementor-washi.ljc-washi-style-lavender-cross::before {
  background-color: rgba(230, 208, 255, 0.8);
  /* pastel lavender */
  background-image:
    linear-gradient(45deg, rgba(255, 255, 255, 0.3) 1px, transparent 1px),
    linear-gradient(-45deg, rgba(255, 255, 255, 0.3) 1px, transparent 1px);
  background-size: 10px 10px;
}

.ljc-elementor-washi.ljc-washi-style-sky-dots::before {
  background-color: rgba(191, 232, 255, 0.8);
  /* pastel blue */
  background-image:
    radial-gradient(circle at 3px 3px, rgba(255, 255, 255, 0.5) 1px, transparent 0),
    radial-gradient(circle at 9px 9px, rgba(255, 255, 255, 0.5) 1px, transparent 0);
  background-size: 12px 12px;
}

.ljc-elementor-washi.ljc-washi-style-lemon-grid::before {
  background-color: rgba(255, 250, 185, 0.8);
  /* pastel yellow */
  background-image:
    linear-gradient(rgba(255, 255, 255, 0.4) 1px, transparent 1px),
    linear-gradient(90deg, rgba(255, 255, 255, 0.4) 1px, transparent 1px);
  background-size: 15px 15px;
}

.ljc-elementor-washi.ljc-washi-style-peach-diamonds::before {
  background-color: rgba(255, 218, 185, 0.8);
  /* pastel peach */
  background-image:
    linear-gradient(45deg, rgba(255, 255, 255, 0.3) 25%, transparent 25%),
    linear-gradient(-45deg, rgba(255, 255, 255, 0.3) 25%, transparent 25%);
  background-size: 10px 10px;
}

/* Elementor Washi Sizes */
.elementor-washi-small::before {
  width: min(80px, 20vw);
  height: 25px;
  top: -12px;
}

.elementor-washi-medium::before {
  width: min(120px, 25vw);
  height: 35px;
  top: -17px;
}

.elementor-washi-large::before {
  width: min(160px, 30vw);
  height: 45px;
  top: -22px;
}

/* Washi Tape Base Styles */
.ljc-elementor-washi-wrapper {
    position: relative;
}

.ljc-elementor-washi::before {
    content: '';
    position: absolute;
    z-index: 1;
    opacity: 0.8;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

/* Tape Sizes */
.ljc-elementor-washi-small::before {
    width: min(80px, 20vw);
    height: 25px;
    top: -12px;
}

.ljc-elementor-washi-medium::before {
    width: min(120px, 25vw);
    height: 35px;
    top: -17px;
}

.ljc-elementor-washi-large::before {
    width: min(160px, 30vw);
    height: 45px;
    top: -22px;
}

/* Tape Positions */
.ljc-elementor-washi.washi-left::before {
    left: 20px;
    transform: rotate(-35deg);
}

.ljc-elementor-washi.washi-right::before {
    right: 20px;
    transform: rotate(35deg);
}

.ljc-elementor-washi.washi-center::before {
    left: 50%;
    transform: translateX(-50%) rotate(-5deg);
}

/* Tape Styles */
.ljc-elementor-washi.washi-style-pink::before {
    background-color: rgba(255, 182, 193, 0.8);
}

/* ... (rest of the styles with ljc- prefix) ... */

================
File: little-journal-club/assets/css/washi-editor.css
================
/* Editor-specific styles */
.elementor-control-section_washi_tape .elementor-panel-heading-title {
    color: #6d7882;
}

/* Preview visibility improvements */
.elementor-editor-active .ljc-washi-tape-wrapper {
    min-height: 20px;
    position: relative;
}

.elementor-editor-active .ljc-tape {
    pointer-events: none; /* Prevent tape from interfering with editor controls */
}

/* Make tape more visible in editor */
.elementor-editor-active .ljc-tape {
    opacity: 1 !important;
}

/* Improve visibility of tape positions in editor */
.elementor-editor-active .ljc-tape-left,
.elementor-editor-active .ljc-tape-right,
.elementor-editor-active .ljc-tape-center {
    transition: all 0.3s ease;
}

================
File: little-journal-club/assets/css/washi-preview.css
================
/* Preview-specific styles */
.elementor-editor-preview .ljc-washi-tape-wrapper {
    position: relative !important;
    z-index: 0 !important;
}

.elementor-editor-preview .ljc-tape {
    position: absolute !important;
    z-index: 2 !important;
    pointer-events: none;
}

.elementor-editor-preview .ljc-washi-content {
    position: relative !important;
    z-index: 1 !important;
}

/* Ensure tape styles are visible in preview */
.elementor-editor-preview .ljc-tape {
    opacity: 0.8;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

/* Force tape positions in preview */
.elementor-editor-preview .ljc-tape-left {
    left: -20px !important;
    transform-origin: left center !important;
}

.elementor-editor-preview .ljc-tape-right {
    right: -20px !important;
    transform-origin: right center !important;
}

.elementor-editor-preview .ljc-tape-center {
    left: 50% !important;
    transform: translateX(-50%) !important;
}

/* Ensure tape styles are applied in preview */
.elementor-editor-preview .ljc-tape-pink {
    background-color: rgba(255, 182, 193, 0.8) !important;
}

.elementor-editor-preview .ljc-tape-mint {
    background-color: rgba(152, 255, 178, 0.8) !important;
}

.elementor-editor-preview .ljc-tape-lavender {
    background-color: rgba(230, 190, 255, 0.8) !important;
}

/* Add other tape style variations with !important */

/* Add to existing preview styles */
.elementor-editor-preview .ljc-tape {
    transition: margin-top 0.3s ease !important;
}

/* Ensure vertical offset works in preview */
.elementor-editor-preview .ljc-washi-tape-wrapper {
    overflow: visible !important;
}

/* Custom image preview styles */
.elementor-editor-preview .ljc-tape.ljc-tape-custom-image {
    background-size: cover !important;
    background-position: center !important;
    background-repeat: repeat !important;
}

.elementor-editor-preview .ljc-tape-overlay {
    pointer-events: none !important;
}

/* Add to existing preview styles */
.elementor-editor-preview .ljc-washi-tape-wrapper {
    transition: all 0.3s ease !important;
}

.elementor-editor-preview .ljc-tape {
    transition: all 0.3s ease !important;
}

/* Ensure tape remains visible during transitions */
.elementor-editor-preview .ljc-tape {
    will-change: transform, opacity;
}

/* Add these styles */
.elementor-editor-preview .ljc-washi-tape-wrapper[data-tape-enabled="true"] {
    display: block !important;
    visibility: visible !important;
    opacity: 1 !important;
}

.elementor-editor-preview .ljc-washi-tape-wrapper[data-tape-enabled="true"] .ljc-tape {
    display: block !important;
    visibility: visible !important;
    opacity: 0.8 !important;
}

/* Ensure smooth transitions */
.elementor-editor-preview .ljc-tape {
    transition: all 0.3s ease !important;
    will-change: transform, width, height, margin-top !important;
}

================
File: little-journal-club/assets/css/washi.css
================
/* ===============================
   1. Washi Tape Div Widget Styles 
   =============================== */
.widget-washi-tape-container {
  position: relative;
  margin: 35px auto;
  padding: 0;
  box-sizing: border-box;
  padding-top: 49px;
}

.widget-washi-tape-content {
  position: relative;
  z-index: 0;
  width: 100%;
  box-sizing: border-box;
  background-color: #fff;
  top: -49px;
}

.widget-washi-tape-title {
  margin: 0 0 15px 0;
  font-size: 1.5em;
  font-weight: 600;
  line-height: 1.2;
}

.widget-washi-tape-content-text {
  margin: 0;
  flex: 1;
}

/* Widget Tape Base Styles */
.widget-tape {
  position: absolute;
  width: 195px;
  height: 52px;
  z-index: 1;
  opacity: 0.8;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

/* When using generator SVG, remove legacy paint and make the SVG fill the tape box */
.widget-tape.tape-from-generator {
  background: transparent !important;
  opacity: 1;
  overflow: visible;
}

.widget-tape.tape-from-generator svg {
  width: 100% !important;
  height: 100% !important;
  display: block;
}

/* Widget Tape Positioning */
.widget-tape-left {
  left: -50px;
  top: calc(-26px + 50px);
  transform: rotate(-33deg);
  transform-origin: 0 50%;
}

.widget-tape-right {
  right: -50px;
  top: calc(-26px + 50px);
  transform: rotate(33deg);
  transform-origin: 100% 50%;
}

.widget-tape-center {
  left: 50%;
  top: calc(-26px + 50px);
  transform: translateX(-50%);
}

/* Widget Tape Pattern Styles - Fixed class names */
.tape-pattern-pink {
  background-color: rgba(255, 182, 193, 0.8);
}

.tape-pattern-mint {
  background-color: rgba(152, 255, 178, 0.8);
}

.tape-pattern-lavender {
  background-color: rgba(230, 190, 255, 0.8);
}

.tape-pattern-striped {
  background: repeating-linear-gradient(45deg,
      rgba(255, 192, 203, 0.8),
      rgba(255, 192, 203, 0.8) 10px,
      rgba(255, 218, 224, 0.8) 10px,
      rgba(255, 218, 224, 0.8) 20px);
}

.tape-pattern-polkadot {
  background-color: rgba(255, 223, 186, 0.8);
  background-image: radial-gradient(circle at 3px 3px,
      rgba(255, 155, 55, 0.5) 2px,
      transparent 0);
  background-size: 15px 15px;
}

.tape-pattern-floral {
  background-color: rgba(255, 240, 245, 0.8);
  background-image:
    radial-gradient(circle at 50% 50%, rgba(255, 182, 193, 0.6) 2px, transparent 0),
    radial-gradient(circle at 0% 50%, rgba(255, 182, 193, 0.6) 2px, transparent 0),
    radial-gradient(circle at 100% 50%, rgba(255, 182, 193, 0.6) 2px, transparent 0);
  background-size: 20px 20px;
}

.tape-pattern-grid {
  background-color: rgba(176, 224, 230, 0.8);
  background-image:
    linear-gradient(rgba(255, 255, 255, 0.2) 2px, transparent 2px),
    linear-gradient(90deg, rgba(255, 255, 255, 0.2) 2px, transparent 2px);
  background-size: 10px 10px;
}

.tape-pattern-bw-grid {
  background-color: rgba(255, 255, 255, 0.9);
  background-image:
    linear-gradient(black 2.2px, transparent 2.2px),
    linear-gradient(90deg, black 2.2px, transparent 2.2px);
  background-size: 10px 10px;
  background-position: 5px 5px;
}

.tape-pattern-rainbow {
  background: linear-gradient(90deg,
      rgba(255, 182, 193, 0.8),
      rgba(255, 218, 185, 0.8),
      rgba(255, 255, 186, 0.8),
      rgba(176, 224, 230, 0.8),
      rgba(230, 190, 255, 0.8));
}

.tape-pattern-custom {
  /* Custom color will be applied via inline styles */
}

.tape-pattern-custom-image {
  background-color: transparent;
  background-position: center;
  background-repeat: repeat;
  background-size: 50px;
  image-rendering: -webkit-optimize-contrast;
  image-rendering: crisp-edges;
}

/* Widget-specific responsive styles */
@media (max-width: 767px) {
  .widget-tape {
    height: 25px;
  }

  .widget-tape-left,
  .widget-tape-right {
    width: 70px;
  }

  .widget-washi-tape-title {
    font-size: 1.3em;
  }
}

/* Additional responsive breakpoints */
@media (max-width: 480px) {
  .widget-tape {
    height: 20px;
  }

  .widget-tape-left,
  .widget-tape-right {
    width: 60px;
  }

  .widget-washi-tape-container {
    padding-top: 35px;
  }

  .widget-washi-tape-content {
    top: -35px;
  }
}

/* Ensure proper z-index stacking */
.widget-washi-tape-container {
  position: relative;
  z-index: 1;
}

.widget-tape {
  z-index: 2;
}

.widget-washi-tape-content {
  z-index: 3;
}

/* Fix for potential transform issues */
.widget-tape {
  backface-visibility: hidden;
  -webkit-backface-visibility: hidden;
  transform-style: preserve-3d;
  -webkit-transform-style: preserve-3d;
}

/* Ensure SVG scaling works properly */
.widget-tape.tape-from-generator svg {
  width: 100% !important;
  height: 100% !important;
  display: block;
  max-width: none;
  max-height: none;
}

/* Fallback for browsers that don't support CSS calc() */
@supports not (top: calc(0px)) {
  .widget-tape-left {
    top: 24px;
  }

  .widget-tape-right {
    top: 24px;
  }

  .widget-tape-center {
    top: 24px;
  }
}

/* ===============================
   2. Elementor Washi Tape Styles 
   =============================== */
[class*="elementor-washi-"] {
  position: relative;
}

[class*="elementor-washi-"]::before {
  content: '';
  position: absolute;
  width: 80px;
  height: 30px;
  top: -15px;
  z-index: 1;
  opacity: 0.8;
}

/* Elementor Washi Positions */
.elementor-washi-left::before {
  left: 20px;
  transform: rotate(-35deg);
}

.elementor-washi-right::before {
  right: 20px;
  transform: rotate(35deg);
}

.elementor-washi-center::before {
  left: 50%;
  transform: translateX(-50%) rotate(-5deg);
}

/* Shared Tape Style Patterns */
.tape-pattern-pink,
.elementor-washi-pink::before {
  background-color: rgba(255, 182, 193, 0.8);
}

.tape-pattern-mint,
.elementor-washi-mint::before {
  background-color: rgba(152, 255, 178, 0.8);
}

/* Tape styles */
.ljc-tape-lavender {
  background-color: rgba(230, 190, 255, 0.8);
}

.ljc-tape-striped {
  background: repeating-linear-gradient(45deg,
      rgba(255, 192, 203, 0.8),
      rgba(255, 192, 203, 0.8) 10px,
      rgba(255, 218, 224, 0.8) 10px,
      rgba(255, 218, 224, 0.8) 20px);
}

.ljc-tape-polkadot {
  background-color: rgba(255, 223, 186, 0.8);
  background-image: radial-gradient(circle at 3px 3px,
      rgba(255, 155, 55, 0.5) 2px,
      transparent 0);
  background-size: 15px 15px;
}

.ljc-tape-floral {
  background-color: rgba(255, 240, 245, 0.8);
  background-image:
    radial-gradient(circle at 50% 50%, rgba(255, 182, 193, 0.6) 2px, transparent 0),
    radial-gradient(circle at 0% 50%, rgba(255, 182, 193, 0.6) 2px, transparent 0),
    radial-gradient(circle at 100% 50%, rgba(255, 182, 193, 0.6) 2px, transparent 0);
  background-size: 20px 20px;
}

.ljc-tape-grid {
  background-color: rgba(176, 224, 230, 0.8);
  background-image:
    linear-gradient(rgba(255, 255, 255, 0.2) 2px, transparent 2px),
    linear-gradient(90deg, rgba(255, 255, 255, 0.2) 2px, transparent 2px);
  background-size: 10px 10px;
}

.ljc-tape-rainbow {
  background: linear-gradient(90deg,
      rgba(255, 182, 193, 0.8),
      rgba(255, 218, 185, 0.8),
      rgba(255, 255, 186, 0.8),
      rgba(176, 224, 230, 0.8),
      rgba(230, 190, 255, 0.8));
}

.ljc-tape-bw-grid {
  background-color: rgba(255, 255, 255, 0.9);
  background-image:
    linear-gradient(black 2.2px, transparent 2.2px),
    linear-gradient(90deg, black 2.2px, transparent 2.2px);
  background-size: 10px 10px;
  background-position: 5px 5px;
  /* Offset by 5px in both directions */
}

.ljc-tape-custom-image::before {
  background-color: transparent;
  background-position: center;
  image-rendering: -webkit-optimize-contrast;
  image-rendering: crisp-edges;
}

/* Additional Washi Styles */
.ljc-washi.ljc-washi-style-pastel-grid::before {
  background-color: rgba(255, 218, 235, 0.8);
  /* pastel pink */
  background-image:
    linear-gradient(rgba(255, 255, 255, 0.3) 1px, transparent 1px),
    linear-gradient(90deg, rgba(255, 255, 255, 0.3) 1px, transparent 1px);
  background-size: 8px 8px;
}

.ljc-washi.ljc-washi-style-mint-dots::before {
  background-color: rgba(183, 255, 219, 0.8);
  /* pastel mint */
  background-image: radial-gradient(circle at 4px 4px,
      rgba(255, 255, 255, 0.6) 1.5px,
      transparent 0);
  background-size: 12px 12px;
}

.ljc-washi.ljc-washi-style-lavender-cross::before {
  background-color: rgba(230, 208, 255, 0.8);
  /* pastel lavender */
  background-image:
    linear-gradient(45deg, rgba(255, 255, 255, 0.3) 1px, transparent 1px),
    linear-gradient(-45deg, rgba(255, 255, 255, 0.3) 1px, transparent 1px);
  background-size: 10px 10px;
}

.ljc-washi.ljc-washi-style-sky-dots::before {
  background-color: rgba(191, 232, 255, 0.8);
  /* pastel blue */
  background-image:
    radial-gradient(circle at 3px 3px, rgba(255, 255, 255, 0.5) 1px, transparent 0),
    radial-gradient(circle at 9px 9px, rgba(255, 255, 255, 0.5) 1px, transparent 0);
  background-size: 12px 12px;
}

.ljc-washi.ljc-washi-style-lemon-grid::before {
  background-color: rgba(255, 250, 185, 0.8);
  /* pastel yellow */
  background-image:
    linear-gradient(rgba(255, 255, 255, 0.4) 1px, transparent 1px),
    linear-gradient(90deg, rgba(255, 255, 255, 0.4) 1px, transparent 1px);
  background-size: 15px 15px;
}

.ljc-washi.ljc-washi-style-peach-diamonds::before {
  background-color: rgba(255, 218, 185, 0.8);
  /* pastel peach */
  background-image:
    linear-gradient(45deg, rgba(255, 255, 255, 0.3) 25%, transparent 25%),
    linear-gradient(-45deg, rgba(255, 255, 255, 0.3) 25%, transparent 25%);
  background-size: 10px 10px;
}

/* Elementor Washi Sizes */
.elementor-washi-small::before {
  width: min(80px, 20vw);
  height: 25px;
  top: -12px;
}

.elementor-washi-medium::before {
  width: min(120px, 25vw);
  height: 35px;
  top: -17px;
}

.elementor-washi-large::before {
  width: min(160px, 30vw);
  height: 45px;
  top: -22px;
}

/* Base washi tape wrapper */
.ljc-washi-tape-wrapper {
  position: relative !important;
  margin: 35px auto;
  padding: 0;
  box-sizing: border-box;
  z-index: 0;
}

/* Base tape styles */
.ljc-tape {
  position: absolute !important;
  opacity: 0.8;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  z-index: 2;
  pointer-events: none;
  transition: margin-top 0.3s ease;
  overflow: hidden;
}

/* Custom image specific styles */
.ljc-tape.ljc-tape-custom-image {
  background-color: transparent;
  opacity: 1;
}

.ljc-tape.ljc-tape-custom-image::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(255, 255, 255, 0.2);
  z-index: 1;
}

/* Overlay for better visibility */
.ljc-tape-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(255, 255, 255, 0.3);
  pointer-events: none;
  z-index: 1;
}

/* Position-specific styles */
.ljc-tape-left {
  left: -20px;
  transform-origin: left center;
}

.ljc-tape-right {
  right: -20px;
  transform-origin: right center;
}

.ljc-tape-center {
  left: 50%;
  transform: translateX(-50%);
}

/* Content wrapper */
.ljc-washi-content {
  position: relative;
  z-index: 1;
  width: 100%;
}

/* Tape style variations */
.ljc-tape.ljc-tape-pink {
  background-color: rgba(255, 182, 193, 0.8);
}

.ljc-tape.ljc-tape-mint {
  background-color: rgba(152, 255, 178, 0.8);
}

.ljc-tape.ljc-tape-lavender {
  background-color: rgba(230, 190, 255, 0.8);
}

.ljc-tape.ljc-tape-striped {
  background: repeating-linear-gradient(45deg,
      rgba(255, 192, 203, 0.8),
      rgba(255, 192, 203, 0.8) 10px,
      rgba(255, 218, 224, 0.8) 10px,
      rgba(255, 218, 224, 0.8) 20px);
}

.ljc-tape.ljc-tape-polkadot {
  background-color: rgba(255, 223, 186, 0.8);
  background-image: radial-gradient(circle at 3px 3px,
      rgba(255, 155, 55, 0.5) 2px,
      transparent 0);
  background-size: 15px 15px;
}

.ljc-tape.ljc-tape-floral {
  background-color: rgba(255, 240, 245, 0.8);
  background-image:
    radial-gradient(circle at 50% 50%, rgba(255, 182, 193, 0.6) 2px, transparent 0),
    radial-gradient(circle at 0% 50%, rgba(255, 182, 193, 0.6) 2px, transparent 0),
    radial-gradient(circle at 100% 50%, rgba(255, 182, 193, 0.6) 2px, transparent 0);
  background-size: 20px 20px;
}

.ljc-tape.ljc-tape-grid {
  background-color: rgba(176, 224, 230, 0.8);
  background-image:
    linear-gradient(rgba(255, 255, 255, 0.2) 2px, transparent 2px),
    linear-gradient(90deg, rgba(255, 255, 255, 0.2) 2px, transparent 2px);
  background-size: 10px 10px;
}

.ljc-tape.ljc-tape-bw-grid {
  background-color: rgba(255, 255, 255, 0.9);
  background-image:
    linear-gradient(black 2.2px, transparent 2.2px),
    linear-gradient(90deg, black 2.2px, transparent 2.2px);
  background-size: 10px 10px;
  background-position: 5px 5px;
}

.ljc-tape.ljc-tape-rainbow {
  background: linear-gradient(90deg,
      rgba(255, 182, 193, 0.8),
      rgba(255, 218, 185, 0.8),
      rgba(255, 255, 186, 0.8),
      rgba(176, 224, 230, 0.8),
      rgba(230, 190, 255, 0.8));
}

/* Responsive styles */
@media (max-width: 767px) {
  .ljc-tape {
    height: 25px !important;
  }

  .ljc-tape-left,
  .ljc-tape-right {
    width: 70px !important;
  }
}

/* ... (rest of the styles with ljc- prefix) ... */

================
File: little-journal-club/assets/css/widget-washi-tape.css
================
/**
 * Washi Tape Div Widget - Dedicated Styles
 * This file contains styles specifically for the Washi Tape Div Widget
 */

/* Widget Container */
.widget-washi-tape-container {
    position: relative;
    margin: 35px auto;
    padding: 0;
    box-sizing: border-box;
    padding-top: 49px;
    z-index: 1;
}

/* Widget Content */
.widget-washi-tape-content {
    position: relative;
    z-index: 3;
    width: 100%;
    box-sizing: border-box;
    background-color: #fff;
    top: -49px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

/* Widget Title */
.widget-washi-tape-title {
    margin: 0 0 15px 0;
    font-size: 1.5em;
    font-weight: 600;
    line-height: 1.2;
    color: #222222;
}

/* Widget Content Text */
.widget-washi-tape-content-text {
    margin: 0;
    flex: 1;
    color: #333333;
    line-height: 1.6;
}

/* Widget Tape Base Styles */
.widget-tape {
    position: absolute;
    width: 195px;
    height: 52px;
    z-index: 2;
    opacity: 0.8;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    backface-visibility: hidden;
    -webkit-backface-visibility: hidden;
    transform-style: preserve-3d;
    -webkit-transform-style: preserve-3d;
}

/* Generator SVG Integration */
.widget-tape.tape-from-generator {
    background: transparent !important;
    opacity: 1;
    overflow: visible;
}

.widget-tape.tape-from-generator svg {
    width: 100% !important;
    height: 100% !important;
    display: block;
    max-width: none;
    max-height: none;
}

/* Widget Tape Positioning */
.widget-tape-left {
    left: -50px;
    top: calc(-26px + 50px);
    transform: rotate(-33deg);
    transform-origin: 0 50%;
}

.widget-tape-right {
    right: -50px;
    top: calc(-26px + 50px);
    transform: rotate(33deg);
    transform-origin: 100% 50%;
}

.widget-tape-center {
    left: 50%;
    top: calc(-26px + 50px);
    transform: translateX(-50%);
}

/* Widget Tape Pattern Styles */
.tape-pattern-pink {
    background-color: rgba(255, 182, 193, 0.8);
}

.tape-pattern-mint {
    background-color: rgba(152, 255, 178, 0.8);
}

.tape-pattern-lavender {
    background-color: rgba(230, 190, 255, 0.8);
}

.tape-pattern-striped {
    background: repeating-linear-gradient(45deg,
            rgba(255, 192, 203, 0.8),
            rgba(255, 192, 203, 0.8) 10px,
            rgba(255, 218, 224, 0.8) 10px,
            rgba(255, 218, 224, 0.8) 20px);
}

.tape-pattern-polkadot {
    background-color: rgba(255, 223, 186, 0.8);
    background-image: radial-gradient(circle at 3px 3px,
            rgba(255, 155, 55, 0.5) 2px,
            transparent 0);
    background-size: 15px 15px;
}

.tape-pattern-floral {
    background-color: rgba(255, 240, 245, 0.8);
    background-image:
        radial-gradient(circle at 50% 50%, rgba(255, 182, 193, 0.6) 2px, transparent 0),
        radial-gradient(circle at 0% 50%, rgba(255, 182, 193, 0.6) 2px, transparent 0),
        radial-gradient(circle at 100% 50%, rgba(255, 182, 193, 0.6) 2px, transparent 0);
    background-size: 20px 20px;
}

.tape-pattern-grid {
    background-color: rgba(176, 224, 230, 0.8);
    background-image:
        linear-gradient(rgba(255, 255, 255, 0.2) 2px, transparent 2px),
        linear-gradient(90deg, rgba(255, 255, 255, 0.2) 2px, transparent 2px);
    background-size: 10px 10px;
}

.tape-pattern-bw-grid {
    background-color: rgba(255, 255, 255, 0.9);
    background-image:
        linear-gradient(black 2.2px, transparent 2.2px),
        linear-gradient(90deg, black 2.2px, transparent 2.2px);
    background-size: 10px 10px;
    background-position: 5px 5px;
}

.tape-pattern-rainbow {
    background: linear-gradient(90deg,
            rgba(255, 182, 193, 0.8),
            rgba(255, 218, 185, 0.8),
            rgba(255, 255, 186, 0.8),
            rgba(176, 224, 230, 0.8),
            rgba(230, 190, 255, 0.8));
}

.tape-pattern-custom {
    /* Custom color will be applied via inline styles */
}

.tape-pattern-custom-image {
    background-color: transparent;
    background-position: center;
    background-repeat: repeat;
    background-size: 50px;
    image-rendering: -webkit-optimize-contrast;
    image-rendering: crisp-edges;
}

/* Responsive Design */
@media (max-width: 767px) {
    .widget-tape {
        height: 25px;
    }

    .widget-tape-left,
    .widget-tape-right {
        width: 70px;
    }

    .widget-washi-tape-title {
        font-size: 1.3em;
    }
}

@media (max-width: 480px) {
    .widget-tape {
        height: 20px;
    }

    .widget-tape-left,
    .widget-tape-right {
        width: 60px;
    }

    .widget-washi-tape-container {
        padding-top: 35px;
    }

    .widget-washi-tape-content {
        top: -35px;
    }
}

/* Browser Fallbacks */
@supports not (top: calc(0px)) {
    .widget-tape-left {
        top: 24px;
    }

    .widget-tape-right {
        top: 24px;
    }

    .widget-tape-center {
        top: 24px;
    }
}

/* Print Styles */
@media print {
    .widget-tape {
        opacity: 0.6;
        box-shadow: none;
    }

    .widget-washi-tape-content {
        box-shadow: none;
        border: 1px solid #ccc;
    }
}

================
File: little-journal-club/assets/js/shop-new-carousel.js
================
(function($) {
    /**
     * Initialize Swiper for every matching carousel container within the given scope.
     */
    function initShopNewCarousel($scope) {
      var $carousels = $scope.find('.shop-new-carousel.swiper-container');
      if (!$carousels.length) {
        return;
      }
  
      $carousels.each(function() {
        var $carousel = $(this);
  
        // If there's already a Swiper instance attached, destroy it first.
        if ($carousel[0].swiper) {
          $carousel[0].swiper.destroy(true, true);
        }
  
        // Initialize Swiper with your desired settings.
        new Swiper($carousel[0], {
          slidesPerView: 1,
          spaceBetween: 20,
          loop: true,
          navigation: {
            nextEl: $carousel.find('.swiper-button-next')[0],
            prevEl: $carousel.find('.swiper-button-prev')[0],
          },
          pagination: {
            el: $carousel.find('.swiper-pagination')[0],
            clickable: true,
          },
          // Breakpoints for responsiveness:
          breakpoints: {
            640: {
              slidesPerView: 2,
            },
            768: {
              slidesPerView: 3,
            },
            1024: {
              slidesPerView: 4, // Show 4 elements on screens >= 1024px
            },
          },
        });
      });
    }
  
    /**
     * 1. Initialize for published/live pages (DOM ready).
     */
    $(document).ready(function() {
      initShopNewCarousel($(document));
    });
  
    /**
     * 2. Re-initialize in Elementor preview for this widget.
     *    "shop_new_carousel" is the get_name() value from your PHP widget class.
     */
    elementorFrontend.hooks.addAction(
      'frontend/element_ready/shop_new_carousel.default',
      function($scope) {
        initShopNewCarousel($scope);
      }
    );
  })(jQuery);

================
File: little-journal-club/assets/js/washi-preview.js
================
(function($) {
    'use strict';

    // Handler for Washi Tape controls
    var WashiTapeHandler = elementorModules.frontend.handlers.Base.extend({
        getDefaultSettings: function() {
            return {
                selectors: {
                    wrapper: '.ljc-washi-tape-wrapper',
                    tape: '.ljc-tape'
                }
            };
        },

        getDefaultElements: function() {
            var selectors = this.getSettings('selectors');
            return {
                $wrapper: this.$element.find(selectors.wrapper),
                $tape: this.$element.find(selectors.tape)
            };
        },

        bindEvents: function() {
            // Bind to control changes
            this.addControlsEventListeners();
        },

        addControlsEventListeners: function() {
            var self = this;

            // Listen for any control changes in the washi tape section
            self.controls = {
                tape_style: self.getElementSettings('tape_style'),
                tape_position: self.getElementSettings('tape_position'),
                enable_washi_tape: self.getElementSettings('enable_washi_tape'),
                tape_width: self.getElementSettings('tape_width'),
                tape_height: self.getElementSettings('tape_height'),
                tape_rotation: self.getElementSettings('tape_rotation'),
                tape_vertical_offset: self.getElementSettings('tape_vertical_offset'),
                tape_custom_image: self.getElementSettings('tape_custom_image'),
                tape_image_size: self.getElementSettings('tape_image_size'),
                tape_image_opacity: self.getElementSettings('tape_image_opacity')
            };

            // Update on any control change
            Object.keys(self.controls).forEach(function(controlName) {
                self.addControlListener(controlName, function(controlValue) {
                    self.updateTape(controlName, controlValue);
                });
            });
        },

        updateTape: function(controlName, value) {
            var self = this;
            var $wrapper = self.elements.$wrapper;

            // Update the control value in our stored settings
            self.controls[controlName] = value;

            // If wrapper doesn't exist, create it
            if (!$wrapper.length) {
                $wrapper = $('<div>', {
                    class: 'ljc-washi-tape-wrapper',
                    'data-tape-enabled': 'true'
                });
                self.$element.prepend($wrapper);
                self.elements.$wrapper = $wrapper;
            }

            // Handle enable/disable
            if (controlName === 'enable_washi_tape') {
                $wrapper.toggle(value === 'yes');
                return;
            }

            // Handle style changes
            if (controlName === 'tape_style') {
                self.elements.$tape.removeClass(function(index, className) {
                    return (className.match(/(^|\s)ljc-tape-\S+/g) || []).join(' ');
                }).addClass('ljc-tape ljc-tape-' + self.controls.tape_position + ' ljc-tape-' + value);
            }

            // Handle position changes
            if (controlName === 'tape_position') {
                self.updateTapePosition(value);
            }

            // Handle dimension changes
            if (['tape_width', 'tape_height', 'tape_vertical_offset'].includes(controlName)) {
                var size = value.size + value.unit;
                if (controlName === 'tape_width') {
                    self.elements.$tape.css('width', size);
                } else if (controlName === 'tape_height') {
                    self.elements.$tape.css('height', size);
                } else if (controlName === 'tape_vertical_offset') {
                    self.elements.$tape.css('margin-top', size);
                }
            }

            // Handle custom image
            if (controlName === 'tape_custom_image' && self.controls.tape_style === 'custom-image') {
                if (value.url) {
                    self.elements.$tape.css('background-image', 'url(' + value.url + ')');
                }
            }

            // Ensure the wrapper remains visible
            $wrapper.css('display', 'block');
        },

        updateTapePosition: function(position) {
            var self = this;
            var $wrapper = self.elements.$wrapper;
            var $existingTapes = $wrapper.find('.ljc-tape');

            // Remove existing tapes
            $existingTapes.remove();

            // Create new tape(s) based on position
            if (position === 'both' || position === 'left') {
                self.createTape('left');
            }
            if (position === 'both' || position === 'right') {
                self.createTape('right');
            }
            if (position === 'center') {
                self.createTape('center');
            }
        },

        createTape: function(position) {
            var self = this;
            var $wrapper = self.elements.$wrapper;
            var style = self.controls.tape_style;
            
            var $tape = $('<div>', {
                class: 'ljc-tape ljc-tape-' + position + ' ljc-tape-' + style
            });

            if (style === 'custom-image' && self.controls.tape_custom_image.url) {
                $tape.css('background-image', 'url(' + self.controls.tape_custom_image.url + ')');
            }

            $wrapper.prepend($tape);
        },

        onElementChange: function(propertyName) {
            // This ensures we catch all control changes
            if (propertyName.startsWith('tape_')) {
                this.updateTape(propertyName, this.getElementSettings(propertyName));
            }
        },

        forceRefresh: function() {
            var self = this;
            if (self.elements.$wrapper.length) {
                self.elements.$wrapper.hide().show(0);
            }
        }
    });

    // Add the handler to Elementor's frontend
    elementorFrontend.hooks.addAction('frontend/element_ready/widget', function($scope) {
        elementorFrontend.elementsHandler.addHandler(WashiTapeHandler, {
            $element: $scope
        });
    });

})(jQuery);

================
File: little-journal-club/includes/elementor/washi-tape-controls.php
================
<?php
namespace LJC\Elementor;

if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly
}

/**
 * Add Washi Tape Controls to Elementor widgets
 */
class Washi_Tape_Controls
{

    /**
     * Initialize the class
     */
    public function __construct()
    {
        // Frontend styles
        add_action('elementor/frontend/after_enqueue_styles', [$this, 'enqueue_styles']);
        add_action('wp_enqueue_scripts', [$this, 'enqueue_styles']);
        
        // Editor styles
        add_action('elementor/editor/after_enqueue_styles', [$this, 'enqueue_editor_styles']);
        add_action('elementor/preview/enqueue_styles', [$this, 'enqueue_preview_styles']);
        
        // Controls
        add_action('elementor/element/after_section_end', [$this, 'add_washi_tape_controls'], 10, 3);
        
        // Content filter
        add_filter('elementor/widget/render_content', [$this, 'apply_washi_tape'], 10, 2);

        // Add editor script loading
        add_action('elementor/preview/enqueue_scripts', [$this, 'enqueue_preview_scripts']);
    }

    /**
     * Add Washi Tape controls to Elementor widgets
     */
    public function add_washi_tape_controls($element, $section_id, $args)
    {
        if ('section_custom_css' !== $section_id) {
            return;
        }

        if (!did_action('elementor/loaded') || !class_exists('\Elementor\Plugin')) {
            return;
        }

        if (!$element instanceof \Elementor\Element_Base) {
            return;
        }

        $allowed_types = ['widget', 'section', 'column'];
        if (!in_array($element->get_type(), $allowed_types, true)) {
            return;
        }

        try {
            $element->start_controls_section(
                'section_washi_tape',
                [
                    'label' => __('Washi Tape', 'little-journal-club'),
                    'tab' => \Elementor\Controls_Manager::TAB_ADVANCED,
                ]
            );

            $element->add_control(
                'enable_washi_tape',
                [
                    'label' => __('Enable Washi Tape', 'little-journal-club'),
                    'type' => \Elementor\Controls_Manager::SWITCHER,
                    'default' => '',
                    'label_on' => __('Yes', 'little-journal-club'),
                    'label_off' => __('No', 'little-journal-club'),
                    'return_value' => 'yes',
                ]
            );

            $element->add_control(
                'tape_position',
                [
                    'label' => __('Tape Position', 'little-journal-club'),
                    'type' => \Elementor\Controls_Manager::SELECT,
                    'default' => 'both',
                    'options' => [
                        'both' => __('Both Sides', 'little-journal-club'),
                        'left' => __('Left Side Only', 'little-journal-club'),
                        'right' => __('Right Side Only', 'little-journal-club'),
                        'center' => __('Center', 'little-journal-club'),
                    ],
                    'condition' => [
                        'enable_washi_tape' => 'yes',
                    ],
                ]
            );

            $element->add_control(
                'tape_style',
                [
                    'label' => __('Tape Style', 'little-journal-club'),
                    'type' => \Elementor\Controls_Manager::SELECT,
                    'default' => 'pink',
                    'options' => [
                        'pink' => __('Pink', 'little-journal-club'),
                        'mint' => __('Mint', 'little-journal-club'),
                        'lavender' => __('Lavender', 'little-journal-club'),
                        'striped' => __('Striped', 'little-journal-club'),
                        'polkadot' => __('Polka Dot', 'little-journal-club'),
                        'floral' => __('Floral', 'little-journal-club'),
                        'grid' => __('Blue Grid', 'little-journal-club'),
                        'bw-grid' => __('Black & White Grid', 'little-journal-club'),
                        'rainbow' => __('Rainbow', 'little-journal-club'),
                        'custom' => __('Custom Color', 'little-journal-club'),
                        'custom-image' => __('Custom Image', 'little-journal-club'),
                    ],
                    'condition' => [
                        'enable_washi_tape' => 'yes',
                    ],
                ]
            );

            $element->add_control(
                'tape_custom_color',
                [
                    'label' => __('Custom Tape Color', 'little-journal-club'),
                    'type' => \Elementor\Controls_Manager::COLOR,
                    'default' => '#FFD166',
                    'condition' => [
                        'enable_washi_tape' => 'yes',
                        'tape_style' => 'custom',
                    ],
                ]
            );

            $element->add_control(
                'tape_custom_image',
                [
                    'label' => __('Custom Tape Image', 'little-journal-club'),
                    'type' => \Elementor\Controls_Manager::MEDIA,
                    'default' => [
                        'url' => '',
                    ],
                    'condition' => [
                        'tape_style' => 'custom-image',
                    ],
                ]
            );

            $element->add_control(
                'tape_width',
                [
                    'label' => __('Tape Width', 'little-journal-club'),
                    'type' => \Elementor\Controls_Manager::SLIDER,
                    'size_units' => ['px'],
                    'range' => [
                        'px' => [
                            'min' => 25,
                            'max' => 300,
                            'step' => 5,
                        ],
                    ],
                    'default' => [
                        'unit' => 'px',
                        'size' => 125,
                    ],
                    'condition' => [
                        'enable_washi_tape' => 'yes',
                    ],
                ]
            );

            $element->add_control(
                'tape_height',
                [
                    'label' => __('Tape Height', 'little-journal-club'),
                    'type' => \Elementor\Controls_Manager::SLIDER,
                    'size_units' => ['px'],
                    'range' => [
                        'px' => [
                            'min' => 22,
                            'max' => 82,
                            'step' => 2,
                        ],
                    ],
                    'default' => [
                        'unit' => 'px',
                        'size' => 52,
                    ],
                    'condition' => [
                        'enable_washi_tape' => 'yes',
                    ],
                ]
            );

            $element->add_control(
                'tape_rotation',
                [
                    'label' => __('Tape Rotation', 'little-journal-club'),
                    'type' => \Elementor\Controls_Manager::SLIDER,
                    'size_units' => ['deg'],
                    'range' => [
                        'deg' => [
                            'min' => 13,
                            'max' => 53,
                            'step' => 1,
                        ],
                    ],
                    'default' => [
                        'unit' => 'deg',
                        'size' => 33,
                    ],
                    'condition' => [
                        'enable_washi_tape' => 'yes',
                        'tape_position!' => 'center',
                    ],
                ]
            );

            $element->add_control(
                'tape_vertical_offset',
                [
                    'label' => __('Tape Vertical Position', 'little-journal-club'),
                    'type' => \Elementor\Controls_Manager::SLIDER,
                    'size_units' => ['px'],
                    'range' => [
                        'px' => [
                            'min' => -100,
                            'max' => 100,
                            'step' => 1,
                        ],
                    ],
                    'default' => [
                        'unit' => 'px',
                        'size' => 25,
                    ],
                    'condition' => [
                        'enable_washi_tape' => 'yes',
                    ],
                    'selectors' => [
                        '{{WRAPPER}} .ljc-tape' => 'margin-top: {{SIZE}}{{UNIT}};',
                    ],
                ]
            );

            $element->add_control(
                'tape_image_size',
                [
                    'label' => __('Image Size', 'little-journal-club'),
                    'type' => \Elementor\Controls_Manager::SELECT,
                    'default' => 'cover',
                    'options' => [
                        'cover' => __('Cover', 'little-journal-club'),
                        'contain' => __('Contain', 'little-journal-club'),
                        'repeat' => __('Repeat', 'little-journal-club'),
                    ],
                    'condition' => [
                        'enable_washi_tape' => 'yes',
                        'tape_style' => 'custom-image',
                    ],
                    'selectors' => [
                        '{{WRAPPER}} .ljc-tape.ljc-tape-custom-image' => 'background-size: {{VALUE}};',
                    ],
                ]
            );

            $element->add_control(
                'tape_image_opacity',
                [
                    'label' => __('Image Opacity', 'little-journal-club'),
                    'type' => \Elementor\Controls_Manager::SLIDER,
                    'size_units' => ['%'],
                    'range' => [
                        '%' => [
                            'min' => 0,
                            'max' => 100,
                            'step' => 1,
                        ],
                    ],
                    'default' => [
                        'unit' => '%',
                        'size' => 80,
                    ],
                    'condition' => [
                        'enable_washi_tape' => 'yes',
                        'tape_style' => 'custom-image',
                    ],
                    'selectors' => [
                        '{{WRAPPER}} .ljc-tape.ljc-tape-custom-image' => 'opacity: {{SIZE}}%;',
                    ],
                ]
            );

            $element->end_controls_section();

        } catch (\Exception $e) {
            error_log('LJC Washi Tape: Error adding controls - ' . $e->getMessage());
            return;
        }
    }

    /**
     * Apply Washi Tape to widget content
     */
    public function apply_washi_tape($content, $widget)
    {
        $settings = $widget->get_settings_for_display();

        if (empty($settings['enable_washi_tape']) || $settings['enable_washi_tape'] !== 'yes') {
            return $content;
        }

        $tape_position = $settings['tape_position'];
        $tape_style = $settings['tape_style'];
        $tape_width = isset($settings['tape_width']['size']) ? $settings['tape_width']['size'] : 125;
        $tape_width .= isset($settings['tape_width']['unit']) ? $settings['tape_width']['unit'] : 'px';
        $tape_height = isset($settings['tape_height']['size']) ? $settings['tape_height']['size'] : 52;
        $tape_height .= 'px';
        $tape_rotation = isset($settings['tape_rotation']['size']) ? $settings['tape_rotation']['size'] : 33;
        $tape_rotation .= 'deg';
        $vertical_offset = isset($settings['tape_vertical_offset']['size']) ? $settings['tape_vertical_offset']['size'] : 25;
        $vertical_offset .= 'px';

        // Create unique ID for this instance
        $unique_id = 'ljc-washi-' . uniqid();

        // Handle custom image background
        $custom_bg_style = '';
        if ($tape_style === 'custom-image' && !empty($settings['tape_custom_image']['url'])) {
            $custom_bg_style = sprintf(
                'background-image: url(%s); background-size: cover; background-position: center; background-repeat: no-repeat;',
                esc_url($settings['tape_custom_image']['url'])
            );
        }

        // Start building the wrapper
        $output = '<div class="ljc-washi-tape-wrapper" id="' . esc_attr($unique_id) . '" data-tape-enabled="true">';
        
        // Base tape styles
        $tape_style_attr = sprintf(
            'width: %s; height: %s; margin-top: %s; %s',
            esc_attr($tape_width),
            esc_attr($tape_height),
            esc_attr($vertical_offset),
            $custom_bg_style
        );

        // Function to create tape element
        $create_tape = function($position) use ($tape_style, $tape_style_attr) {
            $output = sprintf(
                '<div class="ljc-tape ljc-tape-%s ljc-tape-%s" style="%s">',
                esc_attr($position),
                esc_attr($tape_style),
                $tape_style_attr
            );
            
            if ($tape_style === 'custom-image') {
                $output .= '<div class="ljc-tape-overlay"></div>';
            }
            
            $output .= '</div>';
            return $output;
        };

        // Add tape elements based on position
        if ($tape_position === 'both' || $tape_position === 'left') {
            $output .= $create_tape('left');
        }
        
        if ($tape_position === 'both' || $tape_position === 'right') {
            $output .= $create_tape('right');
        }
        
        if ($tape_position === 'center') {
            $output .= $create_tape('center');
        }

        // Add the content
        $output .= '<div class="ljc-washi-content">';
        $output .= $content;
        $output .= '</div>';
        
        $output .= '</div>';

        // Add custom CSS for this instance
        $custom_css = '<style>
            #' . $unique_id . ' {
                position: relative;
                z-index: 0;
            }
            #' . $unique_id . ' .ljc-tape {
                position: absolute;
                z-index: 2;
            }
            #' . $unique_id . ' .ljc-tape-left {
                transform: rotate(-' . $tape_rotation . ');
                left: -20px;
            }
            #' . $unique_id . ' .ljc-tape-right {
                transform: rotate(' . $tape_rotation . ');
                right: -20px;
            }
            #' . $unique_id . ' .ljc-tape-center {
                left: 50%;
                transform: translateX(-50%);
            }
            #' . $unique_id . ' .ljc-washi-content {
                position: relative;
                z-index: 1;
            }
        </style>';

        return $custom_css . $output;
    }

    /**
     * Enqueue frontend styles
     */
    public function enqueue_styles()
    {
        wp_enqueue_style(
            'ljc-washi-tape',
            LJC_PLUGIN_URL . 'assets/css/washi.css',
            [],
            LJC_VERSION
        );
    }

    /**
     * Enqueue editor styles
     */
    public function enqueue_editor_styles()
    {
        wp_enqueue_style(
            'ljc-washi-tape-editor',
            LJC_PLUGIN_URL . 'assets/css/washi-editor.css',
            [],
            LJC_VERSION
        );
    }

    /**
     * Enqueue preview styles
     */
    public function enqueue_preview_styles()
    {
        wp_enqueue_style(
            'ljc-washi-tape-preview',
            LJC_PLUGIN_URL . 'assets/css/washi-preview.css',
            [],
            LJC_VERSION
        );
        
        // Also enqueue main styles to ensure they're available in preview
        wp_enqueue_style(
            'ljc-washi-tape',
            LJC_PLUGIN_URL . 'assets/css/washi.css',
            [],
            LJC_VERSION
        );
    }

    public function enqueue_preview_scripts()
    {
        wp_enqueue_script(
            'ljc-washi-tape-preview',
            LJC_PLUGIN_URL . 'assets/js/washi-preview.js',
            ['jquery', 'elementor-frontend'],
            LJC_VERSION,
            true
        );
    }
}

================
File: little-journal-club/widgets/inset-image-box.php
================
<?php

if (! defined('ABSPATH')) {
    exit; // Exit if accessed directly.
}

class Inset_Image_Box_Widget extends \Elementor\Widget_Base
{

    public function get_name()
    {
        return 'inset_image_box';
    }

    public function get_title()
    {
        return __('Inset Image Box', 'little-journal-club');
    }

    public function get_icon()
    {
        return 'eicon-image-box';
    }

    public function get_categories()
    {
        return ['little-journal-club'];
    }


    protected function _register_controls()
    {

        $this->start_controls_section(
            'content_section',
            [
                'label' => __('Content', 'little-journal-club'),
                'tab'   => \Elementor\Controls_Manager::TAB_CONTENT,
            ]
        );

        $this->add_control(
            'image',
            [
                'label'   => __('Choose Image', 'little-journal-club'),
                'type'    => \Elementor\Controls_Manager::MEDIA,
                'default' => [
                    'url' => \Elementor\Utils::get_placeholder_image_src(),
                ],
            ]
        );

        $this->add_control(
            'padding',
            [
                'label'      => __('Padding', 'little-journal-club'),
                'type'       => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px', '%'],
                'range'      => [
                    'px' => [
                        'min' => 0,
                        'max' => 200,
                    ],
                    '%'  => [
                        'min' => 0,
                        'max' => 100,
                    ],
                ],
                'default'    => [
                    'unit' => 'px',
                    'size' => 10,
                ],
            ]
        );

        $this->add_control(
            'frame_size',
            [
                'label'      => __('Frame Size', 'little-journal-club'),
                'type'       => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['%', 'px'],
                'range'      => [
                    '%' => [
                        'min' => 0,
                        'max' => 100,
                    ],
                    'px' => [
                        'min' => 0,
                        'max' => 1000,
                    ],
                ],
                'default'    => [
                    'unit' => '%',
                    'size' => 5,
                ],
            ]
        );

        $this->add_control(
            'frame_width',
            [
                'label'      => __('Frame Width', 'little-journal-club'),
                'type'       => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['%', 'px'],
                'range'      => [
                    '%' => [
                        'min' => 0,
                        'max' => 100,
                    ],
                    'px' => [
                        'min' => 0,
                        'max' => 1000,
                    ],
                ],
                'default'    => [
                    'unit' => '%',
                    'size' => 50,
                ],
            ]
        );

        $this->add_control(
            'frame_height',
            [
                'label'      => __('Frame Height', 'little-journal-club'),
                'type'       => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['%', 'px'],
                'range'      => [
                    '%' => [
                        'min' => 0,
                        'max' => 100,
                    ],
                    'px' => [
                        'min' => 0,
                        'max' => 1000,
                    ],
                ],
                'default'    => [
                    'unit' => '%',
                    'size' => 50,
                ],
            ]
        );

        $this->add_control(
            'frame_background_color',
            [
                'label'     => __('Frame Background Color', 'little-journal-club'),
                'type'      => \Elementor\Controls_Manager::COLOR,
                'default'   => '#ffffff',
            ]
        );

        $this->add_control(
            'image_link',
            [
                'label'       => __('Image Link', 'little-journal-club'),
                'type'        => \Elementor\Controls_Manager::URL,
                'placeholder' => __('https://your-link.com', 'little-journal-club'),
                'default'     => [
                    'url' => '',
                ],
            ]
        );

        $this->end_controls_section();
    }

    protected function render()
    {
        $settings = $this->get_settings_for_display();
?>
        <div class="inset-image-box" style="padding: <?php echo esc_attr($settings['padding']['size'] . $settings['padding']['unit']); ?>; border-width: <?php echo esc_attr($settings['frame_size']['size']); ?>px; background-color: <?php echo esc_attr($settings['frame_background_color']); ?>; width: <?php echo esc_attr($settings['frame_width']['size'] . $settings['frame_width']['unit']); ?>; height: <?php echo esc_attr($settings['frame_height']['size'] . $settings['frame_height']['unit']); ?>;">
            <a href="<?php echo esc_url($settings['image_link']['url']); ?>" target="<?php echo esc_attr($settings['image_link']['is_external'] ? '_blank' : '_self'); ?>">
                <img src="<?php echo esc_url($settings['image']['url']); ?>" alt="">
            </a>
        </div>
<?php
    }
}

function enqueue_inset_image_box_styles()
{
    wp_enqueue_style(
        'inset-image-box-style',
        plugin_dir_url(__FILE__) . 'assets/css/inset-image-box.css', // Adjust the path if needed.
        [],
        '1.0.0'
    );
}
add_action('wp_enqueue_scripts', 'enqueue_inset_image_box_styles');

================
File: little-journal-club/widgets/shop-new-carousel.php
================
<?php
if (! defined('ABSPATH')) {
    exit; // Exit if accessed directly
}

class Shop_New_Carousel_Widget extends \Elementor\Widget_Base
{

    public function get_name()
    {
        return 'shop_new_carousel';
    }

    public function get_title()
    {
        return __('Shop New Carousel', 'little-journal-club');
    }

    public function get_icon()
    {
        return 'eicon-products';
    }

    public function get_categories()
    {
        return ['little-journal-club'];
    }

    public function get_script_depends()
    {
        return ['ljc-shop-new-carousel-script'];
    }

    public function get_style_depends()
    {
        return ['ljc-shop-new-carousel-style'];
    }

    protected function _register_controls()
    {
        // Create a Repeater for multiple products.
        $repeater = new \Elementor\Repeater();

        $repeater->add_control(
            'product_id',
            [
                'label'       => __('Select Product', 'little-journal-club'),
                'type'        => \Elementor\Controls_Manager::SELECT2,
                'options'     => $this->get_woocommerce_products(),
                'label_block' => true,
            ]
        );

        $repeater->add_control(
            'svg_mask',
            [
                'label'       => __('SVG Mask', 'little-journal-club'),
                'type'        => \Elementor\Controls_Manager::MEDIA,
                'media_types' => ['svg'],
                'label_block' => true,
                'description' => __('Upload or select an SVG file to mask the product image.', 'little-journal-club'),
            ]
        );

        $this->start_controls_section(
            'section_products',
            [
                'label' => __('Products', 'little-journal-club'),
            ]
        );

        $this->add_control(
            'products_list',
            [
                'label'       => __('Products List', 'little-journal-club'),
                'type'        => \Elementor\Controls_Manager::REPEATER,
                'fields'      => $repeater->get_controls(),
                'default'     => [],
                'title_field' => '{{{ product_id }}}',
            ]
        );

        $this->end_controls_section();

        $this->start_controls_section(
            'section_style',
            [
                'label' => __('Style', 'little-journal-club'),
                'tab'   => \Elementor\Controls_Manager::TAB_STYLE,
            ]
        );

        $this->add_control(
            'extend_background',
            [
                'label' => __('Extend Background Full Width', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'label_on' => __('Yes', 'little-journal-club'),
                'label_off' => __('No', 'little-journal-club'),
                'return_value' => 'yes',
                'default' => 'no',
                'prefix_class' => 'extend-background-',
            ]
        );

        $this->add_control(
            'banner_background',
            [
                'label'     => __('Banner Background Color', 'little-journal-club'),
                'type'      => \Elementor\Controls_Manager::COLOR,
                'selectors' => [
                    '{{WRAPPER}} .shop-new-carousel-container' => 'background-color: {{VALUE}};',
                    '{{WRAPPER}}.extend-background-yes .shop-new-carousel-container' => 'width: 100vw; position: relative; left: 50%; right: 50%; margin-left: -50vw; margin-right: -50vw;',
                ],
            ]
        );

        $this->add_control(
            'scale_percentage',
            [
                'label'      => __('Scale Percentage', 'little-journal-club'),
                'type'       => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['%'],
                'range'      => [
                    '%' => [
                        'min' => 50,
                        'max' => 150,
                    ],
                ],
                'default' => [
                    'unit' => '%',
                    'size' => 100,
                ],
            ]
        );

        $this->add_control(
            'font_size',
            [
                'label'      => __('Font Size', 'little-journal-club'),
                'type'       => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px', 'em', 'rem'],
                'range'      => [
                    'px' => [
                        'min' => 10,
                        'max' => 100,
                    ],
                    'em' => [
                        'min' => 0.5,
                        'max' => 5,
                    ],
                    'rem' => [
                        'min' => 0.5,
                        'max' => 5,
                    ],
                ],
                'default' => [
                    'unit' => 'px',
                    'size' => 16,
                ],
                'selectors' => [
                    '{{WRAPPER}} .shop-new-item__title' => 'font-size: {{SIZE}}{{UNIT}};',
                ],
            ]
        );

        $this->add_control(
            'font_color',
            [
                'label'     => __('Font Color', 'little-journal-club'),
                'type'      => \Elementor\Controls_Manager::COLOR,
                'selectors' => [
                    '{{WRAPPER}} .shop-new-item__title' => 'color: {{VALUE}};',
                ],
            ]
        );

        $this->add_group_control(
            \Elementor\Group_Control_Typography::get_type(),
            [
                'name'     => 'typography',
                'label'    => __('Typography', 'little-journal-club'),
                'selector' => '{{WRAPPER}} .shop-new-item__title',
            ]
        );

        $this->add_control(
            'enable_scrolling',
            [
                'label'        => __('Enable Scrolling', 'little-journal-club'),
                'type'         => \Elementor\Controls_Manager::SWITCHER,
                'label_on'     => __('Yes', 'little-journal-club'),
                'label_off'    => __('No', 'little-journal-club'),
                'return_value' => 'yes',
                'default'      => 'yes',
            ]
        );

        $this->add_control(
            'element_padding',
            [
                'label'      => __('Element Padding', 'little-journal-club'),
                'type'       => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px', 'em', 'rem'],
                'range'      => [
                    'px' => [
                        'min' => 0,
                        'max' => 100,
                    ],
                    'em' => [
                        'min' => 0,
                        'max' => 10,
                    ],
                    'rem' => [
                        'min' => 0,
                        'max' => 10,
                    ],
                ],
                'default' => [
                    'unit' => 'px',
                    'size' => 10,
                ],
                'selectors' => [
                    '{{WRAPPER}} .shop-new-item' => 'padding: {{SIZE}}{{UNIT}};',
                ],
            ]
        );

        $this->add_control(
            'image_width',
            [
                'label'      => __('Image Width', 'little-journal-club'),
                'type'       => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px', '%'],
                'range'      => [
                    'px' => [
                        'min' => 50,
                        'max' => 1000,
                    ],
                    '%' => [
                        'min' => 10,
                        'max' => 100,
                    ],
                ],
                'default' => [
                    'unit' => '%',
                    'size' => 100,
                ],
            ]
        );

        $this->add_control(
            'image_height',
            [
                'label'      => __('Image Height', 'little-journal-club'),
                'type'       => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px', '%'],
                'range'      => [
                    'px' => [
                        'min' => 50,
                        'max' => 1000,
                    ],
                    '%' => [
                        'min' => 10,
                        'max' => 100,
                    ],
                ],
                'default' => [
                    'unit' => 'auto',
                    'size' => '',
                ],
            ]
        );

        $this->add_control(
            'widget_height',
            [
                'label'      => __('Widget Height', 'little-journal-club'),
                'type'       => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px', '%'],
                'range'      => [
                    'px' => [
                        'min' => 100,
                        'max' => 1000,
                    ],
                    '%' => [
                        'min' => 10,
                        'max' => 100,
                    ],
                ],
                'default' => [
                    'unit' => 'auto',
                    'size' => '',
                ],
            ]
        );

        $this->end_controls_section();
    }

    protected function render()
    {
        $settings      = $this->get_settings_for_display();
        $products_list = $settings['products_list'];

        if (empty($products_list)) {
            return; // No products to display
        }

        // Convert scale to a factor (e.g. 100% becomes 1, 80% becomes 0.8, etc.)
        $scale = ! empty($settings['scale_percentage']['size'])
            ? (float) $settings['scale_percentage']['size'] / 100
            : 1;

        $widget_height = ! empty($settings['widget_height']['size'])
            ? $settings['widget_height']['size'] . $settings['widget_height']['unit']
            : 'auto';

        $image_width = ! empty($settings['image_width']['size'])
            ? $settings['image_width']['size'] . $settings['image_width']['unit']
            : '100%';

        $image_height = ! empty($settings['image_height']['size'])
            ? $settings['image_height']['size'] . $settings['image_height']['unit']
            : 'auto';
?>
        <div class="shop-new-carousel-container" style="overflow: visible; padding: 20px; text-align: center; height: <?php echo esc_attr($widget_height); ?>;">
            <div class="shop-new-carousel swiper-container" <?php if ($settings['enable_scrolling'] !== 'yes') echo 'style="overflow: hidden;"'; ?>>
                <div class="swiper-wrapper">
                    <?php foreach ($products_list as $item) : ?>
                        <?php
                        $product_id = $item['product_id'] ?? '';
                        if (! $product_id) {
                            continue;
                        }
                        $product = wc_get_product($product_id);
                        if (! $product) {
                            continue;
                        }
                        $title      = $product->get_name();
                        $price_html = $product->get_price_html();
                        $img_id     = $product->get_image_id();
                        $img_url    = $img_id ? wp_get_attachment_url($img_id) : \Elementor\Utils::get_placeholder_image_src();
                        $mask_url   = ! empty($item['svg_mask']['url']) ? $item['svg_mask']['url'] : '';
                        $product_url = get_permalink($product_id);
                        ?>
                        <div class="swiper-slide shop-new-item" style="padding: <?php echo esc_attr($settings['element_padding']['size'] . $settings['element_padding']['unit']); ?>;">
                            <div class="shop-new-item__wrapper" style="transform: scale(<?php echo esc_attr($scale); ?>); transform-origin: center center;">
                                <a href="<?php echo esc_url($product_url); ?>" class="shop-new-item__image" style="width: <?php echo esc_attr($image_width); ?>; height: <?php echo esc_attr($image_height); ?>; <?php if ($mask_url) : ?>
                                    mask-image: url('<?php echo esc_url($mask_url); ?>');
                                    -webkit-mask-image: url('<?php echo esc_url($mask_url); ?>');
                                    mask-size: contain;
                                    -webkit-mask-size: contain;
                                    mask-repeat: no-repeat;
                                    -webkit-mask-repeat: no-repeat;
                                    mask-position: center;
                                    -webkit-mask-position: center;
                                <?php endif; ?>">
                                    <img src="<?php echo esc_url($img_url); ?>" alt="<?php echo esc_attr($title); ?>">
                                </a>
                                <div class="shop-new-item__info">
                                    <h3 class="shop-new-item__title"><?php echo esc_html($title); ?></h3>
                                    <span class="shop-new-item__price"><?php echo wp_kses_post($price_html); ?></span>
                                </div>
                            </div> <!-- .shop-new-item__wrapper -->
                        </div>
                    <?php endforeach; ?>
                </div> <!-- .swiper-wrapper -->

                <?php if ($settings['enable_scrolling'] === 'yes') : ?>
                    <!-- Optional Swiper navigation -->
                    <div class="swiper-pagination"></div>
                    <div class="swiper-button-prev"></div>
                    <div class="swiper-button-next"></div>
                <?php endif; ?>
            </div> <!-- .shop-new-carousel -->
        </div> <!-- .shop-new-carousel-container -->
<?php
    }

    private function get_woocommerce_products()
    {
        if (! class_exists('WooCommerce')) {
            return [];
        }

        $args     = [
            'post_type'      => 'product',
            'posts_per_page' => -1,
            'post_status'    => 'publish',
        ];
        $products = get_posts($args);
        $options  = [];

        foreach ($products as $prod) {
            $options[$prod->ID] = $prod->post_title;
        }

        return $options;
    }
}

================
File: little-journal-club/widgets/washi-tape-div.php
================
<?php
if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly
}

class Washi_Tape_Div_Widget extends \Elementor\Widget_Base
{
    /**
     * Retrieve saved washi tapes from the Generator plugin if available
     * @return array id => title
     */
    private function get_generator_washi_tape_options()
    {
        $options = ['0' => __('Select a Tape', 'little-journal-club')];

        // Check if the Washi_Tape_DB class exists and is available
        if (class_exists('Washi_Tape_DB')) {
            try {
                $db = new \Washi_Tape_DB();
                if (method_exists($db, 'get_all_washi_tapes')) {
                    $tapes = $db->get_all_washi_tapes();
                    if (!empty($tapes) && is_array($tapes)) {
                        foreach ($tapes as $tape) {
                            if (isset($tape->id) && isset($tape->title)) {
                                $options[(string) $tape->id] = $tape->title;
                            }
                        }
                    }
                }
            } catch (\Exception $e) {
                // Silently ignore and fall back to default
                error_log('Washi Tape DB Error: ' . $e->getMessage());
            }
        }

        return $options;
    }

    /**
     * Fetch SVG for a saved washi tape from the Generator plugin
     */
    private function get_generator_washi_tape_svg($tape_id)
    {
        if (!class_exists('Washi_Tape_DB')) {
            return '';
        }

        try {
            $db = new \Washi_Tape_DB();
            if (method_exists($db, 'get_washi_tape')) {
                $record = $db->get_washi_tape(intval($tape_id));
                if ($record && !empty($record->svg)) {
                    return $record->svg;
                }
            }
        } catch (\Exception $e) {
            // Log error but don't break the widget
            error_log('Washi Tape SVG Error: ' . $e->getMessage());
        }

        return '';
    }

    /**
     * Very basic SVG sanitization (aligns with the generator plugin approach)
     */
    private function sanitize_svg_content($svg_content)
    {
        $allowed_tags = [
            'svg' => [
                'xmlns' => [],
                'viewbox' => [],
                'width' => [],
                'height' => [],
                'preserveaspectratio' => [],
                'class' => [],
            ],
            'path' => [
                'd' => [],
                'fill' => [],
                'stroke' => [],
                'stroke-width' => [],
                'opacity' => [],
            ],
            'g' => ['transform' => [], 'fill' => [], 'stroke' => []],
            'rect' => ['x' => [], 'y' => [], 'width' => [], 'height' => [], 'fill' => [], 'rx' => [], 'ry' => []],
            'circle' => ['cx' => [], 'cy' => [], 'r' => [], 'fill' => []],
            'polygon' => ['points' => [], 'fill' => []],
            'defs' => [],
            'pattern' => ['id' => [], 'patternUnits' => [], 'width' => [], 'height' => []],
            'line' => ['x1' => [], 'y1' => [], 'x2' => [], 'y2' => [], 'stroke' => [], 'stroke-width' => []],
        ];

        if (function_exists('wp_kses_svg')) {
            return wp_kses($svg_content, wp_kses_svg());
        }
        return wp_kses($svg_content, $allowed_tags);
    }
    public function get_name()
    {
        return 'washi_tape_div';
    }

    public function get_title()
    {
        return __('Washi Tape Div', 'little-journal-club');
    }

    public function get_icon()
    {
        return 'eicon-image-box';
    }

    public function get_categories()
    {
        return ['little-journal-club'];
    }

    public function get_script_depends()
    {
        return [];
    }

    public function get_style_depends()
    {
        return ['ljc-washi-tape-style', 'ljc-widget-washi-tape-style'];
    }

    protected function _register_controls()
    {
        // Content Section
        $this->start_controls_section(
            'section_content',
            [
                'label' => __('Content', 'little-journal-club'),
            ]
        );

        $this->add_control(
            'title',
            [
                'label' => __('Title', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::TEXT,
                'default' => __('Your Title Here', 'little-journal-club'),
                'placeholder' => __('Enter your title', 'little-journal-club'),
                'label_block' => true,
            ]
        );

        $this->add_control(
            'content',
            [
                'label' => __('Content', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::WYSIWYG,
                'default' => __('Add your content here', 'little-journal-club'),
            ]
        );

        $this->end_controls_section();

        // Washi Tape Settings (Legacy built-in styles)
        $this->start_controls_section(
            'section_washi_tape',
            [
                'label' => __('Washi Tape Settings (Legacy)', 'little-journal-club'),
            ]
        );

        $this->add_control(
            'tape_position',
            [
                'label' => __('Tape Position', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::SELECT,
                'default' => 'both',
                'options' => [
                    'both' => __('Both Sides', 'little-journal-club'),
                    'left' => __('Left Side Only', 'little-journal-club'),
                    'right' => __('Right Side Only', 'little-journal-club'),
                    'center' => __('Center', 'little-journal-club'),
                ],
            ]
        );

        $this->add_control(
            'tape_style',
            [
                'label' => __('Tape Style', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::SELECT,
                'default' => 'pink',
                'options' => [
                    'pink' => __('Pink', 'little-journal-club'),
                    'mint' => __('Mint', 'little-journal-club'),
                    'lavender' => __('Lavender', 'little-journal-club'),
                    'striped' => __('Striped', 'little-journal-club'),
                    'polkadot' => __('Polka Dot', 'little-journal-club'),
                    'floral' => __('Floral', 'little-journal-club'),
                    'grid' => __('Blue Grid', 'little-journal-club'),
                    'bw-grid' => __('Black & White Grid', 'little-journal-club'),
                    'rainbow' => __('Rainbow', 'little-journal-club'),
                    'custom' => __('Custom Color', 'little-journal-club'),
                    'custom-image' => __('Custom Image', 'little-journal-club'),
                ],
            ]
        );

        $this->add_control(
            'tape_custom_color',
            [
                'label' => __('Custom Tape Color', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'default' => '#FFD166',
                'condition' => [
                    'tape_style' => 'custom',
                ],
            ]
        );

        $this->add_control(
            'tape_custom_image',
            [
                'label' => __('Custom Tape Image', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::MEDIA,
                'default' => [
                    'url' => '',
                ],
                'condition' => [
                    'tape_style' => 'custom-image',
                ],
            ]
        );

        $this->add_control(
            'tape_image_size',
            [
                'label' => __('Image Pattern Size', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px'],
                'range' => [
                    'px' => [
                        'min' => 20,
                        'max' => 200,
                        'step' => 1,
                    ],
                ],
                'default' => [
                    'unit' => 'px',
                    'size' => 50,
                ],
                'condition' => [
                    'tape_style' => 'custom-image',
                ],
            ]
        );

        $this->add_control(
            'tape_width',
            [
                'label' => __('Tape Width', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px', '%'],
                'range' => [
                    'px' => [
                        'min' => 95,
                        'max' => 295,
                        'step' => 5,
                    ],
                    '%' => [
                        'min' => 10,
                        'max' => 100,
                        'step' => 1,
                    ],
                ],
                'default' => [
                    'unit' => 'px',
                    'size' => 195,
                ],
                'condition' => [
                    'tape_position!' => '',
                ],
            ]
        );

        $this->add_control(
            'tape_height',
            [
                'label' => __('Tape Height', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px'],
                'range' => [
                    'px' => [
                        'min' => 22,
                        'max' => 82,
                        'step' => 2,
                    ],
                ],
                'default' => [
                    'unit' => 'px',
                    'size' => 52,
                ],
                'condition' => [
                    'tape_position!' => '',
                ],
            ]
        );

        $this->add_control(
            'tape_rotation',
            [
                'label' => __('Tape Rotation', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['deg'],
                'range' => [
                    'deg' => [
                        'min' => 13,
                        'max' => 53,
                        'step' => 1,
                    ],
                ],
                'default' => [
                    'unit' => 'deg',
                    'size' => 33,
                ],
                'condition' => [
                    'tape_position!' => 'center',
                ],
            ]
        );

        $this->add_responsive_control(
            'tape_vertical_position',
            [
                'label' => __('Tape Vertical Position', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px', 'vh', '%'],
                'range' => [
                    'px' => [
                        'min' => 0,
                        'max' => 100,
                        'step' => 1,
                    ],
                    'vh' => [
                        'min' => 0,
                        'max' => 20,
                        'step' => 1,
                    ],
                    '%' => [
                        'min' => 0,
                        'max' => 20,
                        'step' => 1,
                    ],
                ],
                'default' => [
                    'unit' => 'px',
                    'size' => 50,
                ],
                'description' => __('Adjust the vertical position of all tape elements', 'little-journal-club'),
            ]
        );

        $this->add_control(
            'tape_left_offset',
            [
                'label' => __('Left Tape Offset', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px', '%'],
                'range' => [
                    'px' => [
                        'min' => -100,
                        'max' => 0,
                        'step' => 1,
                    ],
                    '%' => [
                        'min' => -40,
                        'max' => 0,
                        'step' => 1,
                    ],
                ],
                'default' => [
                    'unit' => 'px',
                    'size' => -50,
                ],
                'condition' => [
                    'tape_position' => ['both', 'left'],
                ],
            ]
        );

        $this->add_control(
            'tape_right_offset',
            [
                'label' => __('Right Tape Offset', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px', '%'],
                'range' => [
                    'px' => [
                        'min' => -100,
                        'max' => 0,
                        'step' => 1,
                    ],
                    '%' => [
                        'min' => -40,
                        'max' => 0,
                        'step' => 1,
                    ],
                ],
                'default' => [
                    'unit' => 'px',
                    'size' => -50,
                ],
                'condition' => [
                    'tape_position' => ['both', 'right'],
                ],
            ]
        );

        $this->add_control(
            'tape_center_offset',
            [
                'label' => __('Center Tape Offset', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px', '%'],
                'range' => [
                    'px' => [
                        'min' => -50,
                        'max' => 50,
                        'step' => 1,
                    ],
                    '%' => [
                        'min' => -10,
                        'max' => 10,
                        'step' => 1,
                    ],
                ],
                'default' => [
                    'unit' => 'px',
                    'size' => 0,
                ],
                'condition' => [
                    'tape_position' => 'center',
                ],
            ]
        );

        $this->add_control(
            'tape_shadow',
            [
                'label' => __('Tape Shadow', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'label_on' => __('Yes', 'little-journal-club'),
                'label_off' => __('No', 'little-journal-club'),
                'return_value' => 'yes',
                'default' => 'yes',
            ]
        );

        $this->add_control(
            'tape_shadow_intensity',
            [
                'label' => __('Shadow Intensity', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px'],
                'range' => [
                    'px' => [
                        'min' => 0,
                        'max' => 20,
                        'step' => 1,
                    ],
                ],
                'default' => [
                    'unit' => 'px',
                    'size' => 10,
                ],
                'condition' => [
                    'tape_shadow' => 'yes',
                ],
            ]
        );

        $this->add_control(
            'tape_shadow_color',
            [
                'label' => __('Shadow Color', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'default' => 'rgba(0, 0, 0, 0.2)',
                'condition' => [
                    'tape_shadow' => 'yes',
                ],
            ]
        );

        $this->end_controls_section();

        // Advanced: Generator compatibility controls (applies to this widget)
        $this->start_controls_section(
            'section_washi_tape_generator',
            [
                'label' => __('Washi Tape Settings', 'little-journal-club'),
                'tab' => \Elementor\Controls_Manager::TAB_ADVANCED,
            ]
        );

        $this->add_control(
            'gen_enable_washi_tape',
            [
                'label' => __('Enable Washi Tape', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'label_on' => __('Yes', 'little-journal-club'),
                'label_off' => __('No', 'little-journal-club'),
                'return_value' => 'yes',
                'default' => '',
            ]
        );

        $this->add_control(
            'gen_washi_tape_mode',
            [
                'label' => __('Washi Tape Mode', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::SELECT,
                'default' => 'specific',
                'options' => [
                    'specific' => __('Specific Tape', 'little-journal-club'),
                    'legacy' => __('Legacy Styles', 'little-journal-club'),
                ],
                'condition' => ['gen_enable_washi_tape' => 'yes'],
            ]
        );

        $this->add_control(
            'gen_washi_tape_id',
            [
                'label' => __('Select Washi Tape', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::SELECT,
                'options' => $this->get_generator_washi_tape_options(),
                'default' => '0',
                'condition' => [
                    'gen_enable_washi_tape' => 'yes',
                    'gen_washi_tape_mode' => 'specific',
                ],
            ]
        );

        $this->add_control(
            'gen_top_clearance',
            [
                'label' => __('Top Clearance (padding at top of card)', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px'],
                'range' => ['px' => ['min' => 0, 'max' => 200, 'step' => 1]],
                'default' => ['unit' => 'px', 'size' => 25],
                'condition' => ['gen_enable_washi_tape' => 'yes'],
            ]
        );

        $this->add_control(
            'gen_horizontal_offset',
            [
                'label' => __('Horizontal Offset', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px'],
                'range' => ['px' => ['min' => -200, 'max' => 200, 'step' => 1]],
                'default' => ['unit' => 'px', 'size' => 0],
                'condition' => ['gen_enable_washi_tape' => 'yes'],
            ]
        );

        $this->add_control(
            'gen_vertical_offset',
            [
                'label' => __('Vertical Offset (Y)', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px'],
                'range' => ['px' => ['min' => -200, 'max' => 200, 'step' => 1]],
                'default' => ['unit' => 'px', 'size' => -64],
                'condition' => ['gen_enable_washi_tape' => 'yes'],
            ]
        );

        $this->add_control(
            'gen_randomize_angles',
            [
                'label' => __('Randomize Tape Angles', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'label_on' => __('Yes', 'little-journal-club'),
                'label_off' => __('No', 'little-journal-club'),
                'return_value' => 'yes',
                'default' => '',
                'condition' => ['gen_enable_washi_tape' => 'yes'],
            ]
        );

        $this->add_control(
            'gen_tape_rotation',
            [
                'label' => __('Tape Rotation', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['deg'],
                'range' => ['deg' => ['min' => 0, 'max' => 90, 'step' => 1]],
                'default' => ['unit' => 'deg', 'size' => 10],
                'condition' => ['gen_enable_washi_tape' => 'yes'],
            ]
        );

        $this->end_controls_section();

        // Div Style Settings
        $this->start_controls_section(
            'section_div_style',
            [
                'label' => __('Div Style', 'little-journal-club'),
                'tab' => \Elementor\Controls_Manager::TAB_STYLE,
            ]
        );

        $this->add_control(
            'div_background',
            [
                'label' => __('Background Color', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'default' => '#FFFFFF',
                'selectors' => [
                    '{{WRAPPER}} .washi-tape-content' => 'background-color: {{VALUE}};',
                ],
            ]
        );

        $this->add_group_control(
            \Elementor\Group_Control_Border::get_type(),
            [
                'name' => 'div_border',
                'label' => __('Border', 'little-journal-club'),
                'selector' => '{{WRAPPER}} .washi-tape-content',
            ]
        );

        $this->add_control(
            'div_border_radius',
            [
                'label' => __('Border Radius', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::DIMENSIONS,
                'size_units' => ['px', '%'],
                'selectors' => [
                    '{{WRAPPER}} .washi-tape-content' => 'border-radius: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
                ],
                'default' => [
                    'top' => 0,
                    'right' => 0,
                    'bottom' => 0,
                    'left' => 0,
                    'unit' => 'px',
                    'isLinked' => true,
                ],
            ]
        );

        $this->add_responsive_control(
            'div_padding',
            [
                'label' => __('Padding', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::DIMENSIONS,
                'size_units' => ['px', 'em', '%'],
                'selectors' => [
                    '{{WRAPPER}} .washi-tape-content' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
                ],
                'default' => [
                    'top' => 20,
                    'right' => 20,
                    'bottom' => 20,
                    'left' => 20,
                    'unit' => 'px',
                    'isLinked' => true,
                ],
            ]
        );

        $this->add_group_control(
            \Elementor\Group_Control_Box_Shadow::get_type(),
            [
                'name' => 'div_box_shadow',
                'label' => __('Box Shadow', 'little-journal-club'),
                'selector' => '{{WRAPPER}} .washi-tape-content',
            ]
        );

        $this->add_responsive_control(
            'div_min_height',
            [
                'label' => __('Minimum Height', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px', 'vh', '%'],
                'range' => [
                    'px' => [
                        'min' => 0,
                        'max' => 1000,
                        'step' => 10,
                    ],
                    'vh' => [
                        'min' => 0,
                        'max' => 100,
                    ],
                    '%' => [
                        'min' => 0,
                        'max' => 100,
                    ],
                ],
                'selectors' => [
                    '{{WRAPPER}} .washi-tape-content' => 'min-height: {{SIZE}}{{UNIT}};',
                ],
            ]
        );

        $this->add_responsive_control(
            'div_width',
            [
                'label' => __('Width', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px', '%'],
                'range' => [
                    'px' => [
                        'min' => 0,
                        'max' => 1200,
                        'step' => 10,
                    ],
                    '%' => [
                        'min' => 0,
                        'max' => 100,
                    ],
                ],
                'default' => [
                    'unit' => '%',
                    'size' => 100,
                ],
                'selectors' => [
                    '{{WRAPPER}} .washi-tape-container' => 'width: {{SIZE}}{{UNIT}};',
                ],
            ]
        );

        $this->add_responsive_control(
            'container_min_height',
            [
                'label' => __('Container Minimum Height', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px', 'vh', '%'],
                'range' => [
                    'px' => [
                        'min' => 0,
                        'max' => 1000,
                        'step' => 10,
                    ],
                    'vh' => [
                        'min' => 0,
                        'max' => 100,
                    ],
                    '%' => [
                        'min' => 0,
                        'max' => 100,
                    ],
                ],
                'selectors' => [
                    '{{WRAPPER}} .washi-tape-container' => 'min-height: {{SIZE}}{{UNIT}};',
                ],
            ]
        );

        $this->add_responsive_control(
            'content_top_position',
            [
                'label' => __('Content Top Position', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px', 'vh', '%'],
                'range' => [
                    'px' => [
                        'min' => -99,
                        'max' => 1,
                        'step' => 1,
                    ],
                    'vh' => [
                        'min' => -20,
                        'max' => 10,
                        'step' => 1,
                    ],
                    '%' => [
                        'min' => -20,
                        'max' => 10,
                        'step' => 1,
                    ],
                ],
                'default' => [
                    'unit' => 'px',
                    'size' => -49,
                ],
                'selectors' => [
                    '{{WRAPPER}} .washi-tape-content' => 'position: relative; top: {{SIZE}}{{UNIT}} !important;',
                ],
            ]
        );

        $this->add_control(
            'text_align',
            [
                'label' => __('Text Alignment', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::CHOOSE,
                'options' => [
                    'left' => [
                        'title' => __('Left', 'little-journal-club'),
                        'icon' => 'eicon-text-align-left',
                    ],
                    'center' => [
                        'title' => __('Center', 'little-journal-club'),
                        'icon' => 'eicon-text-align-center',
                    ],
                    'right' => [
                        'title' => __('Right', 'little-journal-club'),
                        'icon' => 'eicon-text-align-right',
                    ],
                ],
                'default' => 'left',
                'selectors' => [
                    '{{WRAPPER}} .washi-tape-content' => 'text-align: {{VALUE}};',
                ],
            ]
        );

        $this->end_controls_section();

        // Title Typography Section
        $this->start_controls_section(
            'section_title_style',
            [
                'label' => __('Title Style', 'little-journal-club'),
                'tab' => \Elementor\Controls_Manager::TAB_STYLE,
            ]
        );

        $this->add_control(
            'title_color',
            [
                'label' => __('Title Color', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'default' => '#222222',
                'selectors' => [
                    '{{WRAPPER}} .washi-tape-title' => 'color: {{VALUE}};',
                ],
            ]
        );

        $this->add_group_control(
            \Elementor\Group_Control_Typography::get_type(),
            [
                'name' => 'title_typography',
                'label' => __('Typography', 'little-journal-club'),
                'selector' => '{{WRAPPER}} .washi-tape-title',
            ]
        );

        $this->add_responsive_control(
            'title_margin',
            [
                'label' => __('Margin', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::DIMENSIONS,
                'size_units' => ['px', 'em', '%'],
                'selectors' => [
                    '{{WRAPPER}} .washi-tape-title' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
                ],
                'default' => [
                    'top' => 0,
                    'right' => 0,
                    'bottom' => 15,
                    'left' => 0,
                    'unit' => 'px',
                    'isLinked' => false,
                ],
            ]
        );

        $this->end_controls_section();

        // Content Typography Section
        $this->start_controls_section(
            'section_typography',
            [
                'label' => __('Content Typography', 'little-journal-club'),
                'tab' => \Elementor\Controls_Manager::TAB_STYLE,
            ]
        );

        $this->add_group_control(
            \Elementor\Group_Control_Typography::get_type(),
            [
                'name' => 'content_typography',
                'label' => __('Typography', 'little-journal-club'),
                'selector' => '{{WRAPPER}} .washi-tape-content-text',
            ]
        );

        $this->add_control(
            'content_color',
            [
                'label' => __('Text Color', 'little-journal-club'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'default' => '#333333',
                'selectors' => [
                    '{{WRAPPER}} .washi-tape-content-text' => 'color: {{VALUE}};',
                ],
            ]
        );

        $this->end_controls_section();
    }

    protected function render()
    {
        $settings = $this->get_settings_for_display();

        // Get tape settings with proper fallbacks
        $tape_position = isset($settings['tape_position']) ? $settings['tape_position'] : 'both';
        $tape_style = isset($settings['tape_style']) ? $settings['tape_style'] : 'pink';

        // Ensure width and height have proper defaults
        $tape_width = isset($settings['tape_width']['size']) ? $settings['tape_width']['size'] . $settings['tape_width']['unit'] : '195px';
        $tape_height = isset($settings['tape_height']['size']) ? $settings['tape_height']['size'] . 'px' : '52px';
        $tape_rotation = isset($settings['tape_rotation']['size']) ? $settings['tape_rotation']['size'] . 'deg' : '33deg';

        // Get offset values with updated defaults
        $left_offset = isset($settings['tape_left_offset']['size']) ? $settings['tape_left_offset']['size'] . $settings['tape_left_offset']['unit'] : '-50px';
        $right_offset = isset($settings['tape_right_offset']['size']) ? $settings['tape_right_offset']['size'] . $settings['tape_right_offset']['unit'] : '-50px';
        $center_offset = isset($settings['tape_center_offset']['size']) ? $settings['tape_center_offset']['size'] . $settings['tape_center_offset']['unit'] : '0';

        // Get tape vertical position
        $tape_vertical_offset = isset($settings['tape_vertical_position']['size']) ? $settings['tape_vertical_position']['size'] . $settings['tape_vertical_position']['unit'] : '0';

        // Calculate top position based on tape height and vertical offset
        $tape_height_value = isset($settings['tape_height']['size']) ? $settings['tape_height']['size'] : 52;
        $base_top = '-' . ($tape_height_value / 2) . 'px';
        $tape_top = 'calc(' . $base_top . ' + ' . $tape_vertical_offset . ')';

        // Custom style calculation
        $custom_style = '';
        if ($tape_style === 'custom' && !empty($settings['tape_custom_color'])) {
            $custom_style = 'background-color: ' . esc_attr($settings['tape_custom_color']) . ';';
        } elseif ($tape_style === 'custom-image' && !empty($settings['tape_custom_image']['url'])) {
            $image_size = isset($settings['tape_image_size']['size']) ? $settings['tape_image_size']['size'] : 50;
            $custom_style = 'background-image: url(' . esc_url($settings['tape_custom_image']['url']) . ');';
            $custom_style .= 'background-repeat: repeat;';
            $custom_style .= 'background-size: ' . $image_size . 'px;';
        }

        // Shadow effect if enabled
        $shadow_style = '';
        if (isset($settings['tape_shadow']) && $settings['tape_shadow'] === 'yes') {
            $shadow_intensity = isset($settings['tape_shadow_intensity']['size']) ? $settings['tape_shadow_intensity']['size'] : 10;
            $shadow_color = !empty($settings['tape_shadow_color']) ? $settings['tape_shadow_color'] : 'rgba(0, 0, 0, 0.2)';
            $shadow_style = 'filter: drop-shadow(0 0 ' . $shadow_intensity . 'px ' . $shadow_color . ');';
        }

        // Container class
        $container_class = 'widget-washi-tape-container';

        // Container style for min-height (if set directly in render)
        $container_style = '';
        if (isset($settings['container_min_height']['size']) && $settings['container_min_height']['size'] > 0) {
            $container_style .= 'min-height: ' . $settings['container_min_height']['size'] . $settings['container_min_height']['unit'] . ';';
        }

        // Content style for top position (if not using selectors)
        $content_style = '';
        if (isset($settings['content_top_position']['size'])) {
            $top_value = $settings['content_top_position']['size'] . $settings['content_top_position']['unit'];
            $content_style .= 'position: relative; top: ' . $top_value . ';';
        } else {
            $content_style .= 'position: relative; top: -49px;'; // Updated default value
        }

        // If generator-based tape is enabled and selected, render using generator SVG
        $use_generator = isset($settings['gen_enable_washi_tape']) && $settings['gen_enable_washi_tape'] === 'yes' &&
            isset($settings['gen_washi_tape_mode']) && $settings['gen_washi_tape_mode'] === 'specific' &&
            !empty($settings['gen_washi_tape_id']) && $settings['gen_washi_tape_id'] !== '0';

        // For generator controls
        $gen_top_clearance = isset($settings['gen_top_clearance']['size']) ? intval($settings['gen_top_clearance']['size']) : 25;
        $gen_h_offset = isset($settings['gen_horizontal_offset']['size']) ? intval($settings['gen_horizontal_offset']['size']) : 0;
        $gen_v_offset = isset($settings['gen_vertical_offset']['size']) ? intval($settings['gen_vertical_offset']['size']) : 0;
        $gen_rotation = isset($settings['gen_tape_rotation']['size']) ? intval($settings['gen_tape_rotation']['size']) : 10;
        $gen_randomize = !empty($settings['gen_randomize_angles']) && $settings['gen_randomize_angles'] === 'yes';

        // Adjust content top padding if generator enabled
        if ($use_generator) {
            $content_style .= 'padding-top: ' . $gen_top_clearance . 'px;';
        }

        // When using the generator, avoid legacy background classes so the SVG is the only visual
        $tape_visual_class = $use_generator ? 'tape-from-generator' : 'tape-pattern-' . $tape_style;

        // Ensure we have valid settings for rendering
        if (empty($tape_position)) {
            $tape_position = 'both';
        }

        ?>
        <div class="widget-washi-tape-container" <?php if (!empty($container_style))
            echo 'style="' . esc_attr($container_style) . '"'; ?>>
            <?php
            // Left tape
            if ($tape_position === 'both' || $tape_position === 'left'):
                // Position with offset
                $left_pos = 'calc(0px + ' . $left_offset . ')';
                if ($use_generator) {
                    $left_pos = 'calc(' . $left_pos . ' + ' . $gen_h_offset . 'px)';
                }
                // Top value (use generator vertical offset when enabled)
                $left_top = $tape_top;
                if ($use_generator) {
                    $left_top = 'calc(' . $base_top . ' + ' . $gen_v_offset . 'px)';
                }
                ?>
                <div class="widget-tape widget-tape-left <?php echo esc_attr($tape_visual_class); ?>" style="width: <?php echo esc_attr($tape_width); ?>; 
                            height: <?php echo esc_attr($tape_height); ?>; 
                            top: <?php echo esc_attr($left_top); ?>;
                            left: <?php echo esc_attr($left_pos); ?>;
                            <?php
                            if ($use_generator) {
                                $left_deg = $gen_randomize ? max(0, $gen_rotation - 5 + (rand(0, 10))) : $gen_rotation;
                                echo ' transform: rotate(-' . esc_attr($left_deg) . 'deg);';
                            } else {
                                echo ' transform: rotate(-' . esc_attr($tape_rotation) . ');';
                            }
                            ?> 
                            transform-origin: 0 50%;
                            <?php echo $custom_style; ?>
                            <?php echo $shadow_style; ?>">
                    <?php if ($use_generator) {
                        $svg = $this->get_generator_washi_tape_svg($settings['gen_washi_tape_id']);
                        if (!empty($svg)) {
                            echo $this->sanitize_svg_content($svg);
                        }
                    } ?>
                </div>
            <?php endif; ?>

            <?php
            // Right tape
            if ($tape_position === 'both' || $tape_position === 'right'):
                // Position with offset
                $right_pos = 'calc(0px + ' . $right_offset . ')';
                if ($use_generator) {
                    $right_pos = 'calc(' . $right_pos . ' + ' . $gen_h_offset . 'px)';
                }
                $right_top = $tape_top;
                if ($use_generator) {
                    $right_top = 'calc(' . $base_top . ' + ' . $gen_v_offset . 'px)';
                }
                ?>
                <div class="widget-tape widget-tape-right <?php echo esc_attr($tape_visual_class); ?>" style="width: <?php echo esc_attr($tape_width); ?>; 
                            height: <?php echo esc_attr($tape_height); ?>; 
                            top: <?php echo esc_attr($right_top); ?>;
                            right: <?php echo esc_attr($right_pos); ?>;
                            <?php
                            if ($use_generator) {
                                $right_deg = $gen_randomize ? max(0, $gen_rotation - 5 + (rand(0, 10))) : $gen_rotation;
                                echo ' transform: rotate(' . esc_attr($right_deg) . 'deg);';
                            } else {
                                echo ' transform: rotate(' . esc_attr($tape_rotation) . ');';
                            }
                            ?> 
                            transform-origin: 100% 50%;
                            <?php echo $custom_style; ?>
                            <?php echo $shadow_style; ?>">
                    <?php if ($use_generator) {
                        $svg = $this->get_generator_washi_tape_svg($settings['gen_washi_tape_id']);
                        if (!empty($svg)) {
                            echo $this->sanitize_svg_content($svg);
                        }
                    } ?>
                </div>
            <?php endif; ?>

            <?php
            // Center tape
            if ($tape_position === 'center'):
                // Position with offset
                $center_pos = 'calc(50% + ' . $center_offset . ')';
                if ($use_generator) {
                    $center_pos = 'calc(50% + ' . $center_offset . ' + ' . $gen_h_offset . 'px)';
                }
                $center_top = $tape_top;
                if ($use_generator) {
                    $center_top = 'calc(' . $base_top . ' + ' . $gen_v_offset . 'px)';
                }
                ?>
                <div class="widget-tape widget-tape-center <?php echo esc_attr($tape_visual_class); ?>" style="width: <?php echo esc_attr($tape_width); ?>; 
                            height: <?php echo esc_attr($tape_height); ?>; 
                            top: <?php echo esc_attr($center_top); ?>;
                            left: <?php echo esc_attr($center_pos); ?>;
                            <?php
                            if ($use_generator) {
                                echo ' transform: translateX(-50%) rotate(' . esc_attr($gen_rotation) . 'deg);';
                            } else {
                                echo ' transform: translateX(-50%);';
                            }
                            ?>
                            <?php echo $custom_style; ?>
                            <?php echo $shadow_style; ?>">
                    <?php if ($use_generator) {
                        $svg = $this->get_generator_washi_tape_svg($settings['gen_washi_tape_id']);
                        if (!empty($svg)) {
                            echo $this->sanitize_svg_content($svg);
                        }
                    } ?>
                </div>
            <?php endif; ?>

            <div class="widget-washi-tape-content" <?php if (!empty($content_style))
                echo 'style="' . esc_attr($content_style) . '"'; ?>>
                <?php if (!empty($settings['title'])): ?>
                    <h3 class="widget-washi-tape-title"><?php echo esc_html($settings['title']); ?></h3>
                <?php endif; ?>
                <div class="widget-washi-tape-content-text">
                    <?php echo wp_kses_post($settings['content']); ?>
                </div>
            </div>
        </div>
        <?php
    }
}

================
File: little-journal-club/little-journal-club.php
================
<?php

/**
 * Plugin Name: Little Journal Club
 * Description: A custom plugin to create Elementor components.
 * Version: 1.0.5
 * Author: Richard McLain
 * Text Domain: little-journal-club
 */

if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly.
}
/**
 * Register a custom Elementor widget category: Little Journal Club.
 *
 * @param \Elementor\Elements_Manager $elements_manager Elementor elements manager.
 */
function ljc_register_elementor_category($elements_manager)
{
    $elements_manager->add_category(
        'little-journal-club', // Unique slug for your category
        [
            'title' => __('Little Journal Club', 'little-journal-club'), // Display name
            'icon' => 'fa fa-book', // Optional icon
        ]
    );
}
add_action('elementor/elements/categories_registered', 'ljc_register_elementor_category');


/**
 * Register the Cool Image Box widget.
 *
 * @param \Elementor\Widgets_Manager $widgets_manager Elementor widgets manager.
 */
function ljc_register_cool_image_box_widget($widgets_manager)
{
    require_once plugin_dir_path(__FILE__) . 'widgets/inset-image-box.php';

    if (class_exists('Inset_Image_Box_Widget')) {
        // Use the new registration method.
        $widgets_manager->register(new \Inset_Image_Box_Widget());
    } else {
        add_action('admin_notices', function () {
            ?>
            <div class="notice notice-error">
                <p><?php esc_html_e('Inset Image Box Widget class not found. Please ensure the widget file exists and is correct.', 'little-journal-club'); ?>
                </p>
            </div>
            <?php
        });
    }
}

if (ljc_check_elementor_active()) {
    // Use the new registration hook.
    add_action('elementor/widgets/register', 'ljc_register_cool_image_box_widget');
}

if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly.
}

/**
 * Check if Elementor is active.
 */
function ljc_check_elementor_active()
{
    if (!did_action('elementor/loaded')) {
        add_action('admin_notices', 'ljc_elementor_missing_notice');
        return false;
    }
    return true;
}

/**
 * Display notice if Elementor is missing.
 */
function ljc_elementor_missing_notice()
{
    ?>
    <div class="notice notice-error">
        <p><?php esc_html_e('Elementor must be installed and activated for the Little Journal Club plugin to work.', 'little-journal-club'); ?>
        </p>
    </div>
    <?php
}

/**
 * Load plugin textdomain.
 */
function ljc_load_textdomain()
{
    load_plugin_textdomain('little-journal-club', false, dirname(plugin_basename(__FILE__)) . '/languages');
}
add_action('plugins_loaded', 'ljc_load_textdomain');

/**
 * Enqueue scripts and styles for the Shop New Carousel widget.
 */
function ljc_enqueue_shop_new_carousel_scripts()
{
    // Register Swiper using CDN.
    wp_register_style(
        'swiper',
        'https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css',
        [],
        '11.0.0'
    );
    wp_register_script(
        'swiper',
        'https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js',
        [],
        '11.0.0',
        true
    );

    // Register your custom carousel script & style.
    wp_register_style(
        'ljc-shop-new-carousel-style',
        plugin_dir_url(__FILE__) . 'assets/css/shop-new-carousel.css',
        ['swiper'],
        '1.0.0'
    );
    wp_register_script(
        'ljc-shop-new-carousel-script',
        plugin_dir_url(__FILE__) . 'assets/js/shop-new-carousel.js',
        ['swiper', 'jquery'],
        '1.0.0',
        true
    );
}
add_action('wp_enqueue_scripts', 'ljc_enqueue_shop_new_carousel_scripts');

/**
 * Register the Shop New Carousel widget with Elementor.
 */
function ljc_register_shop_new_carousel_widget($widgets_manager)
{
    require_once plugin_dir_path(__FILE__) . 'widgets/shop-new-carousel.php';

    if (class_exists('Shop_New_Carousel_Widget')) {
        $widgets_manager->register(new \Shop_New_Carousel_Widget());
    } else {
        add_action('admin_notices', function () {
            ?>
            <div class="notice notice-error">
                <p><?php esc_html_e('Shop_New_Carousel_Widget class not found. Please ensure the file exists and is correct.', 'little-journal-club'); ?>
                </p>
            </div>
            <?php
        });
    }
}

if (ljc_check_elementor_active()) {
    add_action('elementor/widgets/register', 'ljc_register_shop_new_carousel_widget');
}

// Register Washi Tape Div Widget
function ljc_register_washi_tape_div_widget($widgets_manager)
{
    require_once(plugin_dir_path(__FILE__) . 'widgets/washi-tape-div.php');
    $widgets_manager->register(new \Washi_Tape_Div_Widget());
}
add_action('elementor/widgets/register', 'ljc_register_washi_tape_div_widget');

// Register and enqueue Washi Tape CSS
function ljc_register_washi_tape_styles()
{
    wp_register_style(
        'ljc-washi-tape-style',
        plugin_dir_url(__FILE__) . 'assets/css/washi.css',
        [],
        '1.0.0'
    );
    
    // Also register the dedicated widget CSS file
    wp_register_style(
        'ljc-widget-washi-tape-style',
        plugin_dir_url(__FILE__) . 'assets/css/widget-washi-tape.css',
        [],
        '1.0.0'
    );
}
add_action('wp_enqueue_scripts', 'ljc_register_washi_tape_styles');
add_action('elementor/frontend/after_enqueue_styles', 'ljc_register_washi_tape_styles');

// Add this near your other includes
require_once plugin_dir_path(__FILE__) . 'includes/elementor/washi-tape-controls.php';

// Make sure this is added after the plugin constants
function ljc_initialize_elementor_washi_tape() {
    // Check if Elementor is installed and activated
    if (!did_action('elementor/loaded')) {
        return;
    }

    // Initialize Washi Tape Controls
    new \LJC\Elementor\Washi_Tape_Controls();
}
add_action('elementor/init', 'ljc_initialize_elementor_washi_tape');

// Plugin Constants
define('LJC_VERSION', '1.0.0'); // Update this with your plugin version
define('LJC_PLUGIN_URL', plugin_dir_url(__FILE__));
define('LJC_PLUGIN_PATH', plugin_dir_path(__FILE__));

// Add this near your other includes
function ljc_register_elementor_assets() {
    // Register main washi tape styles
    wp_register_style(
        'ljc-washi-tape',
        plugin_dir_url(__FILE__) . 'assets/css/washi.css',
        [],
        LJC_VERSION
    );

    // Register editor-specific styles
    wp_register_style(
        'ljc-washi-tape-editor',
        plugin_dir_url(__FILE__) . 'assets/css/washi-editor.css',
        [],
        LJC_VERSION
    );

    // Register preview-specific styles
    wp_register_style(
        'ljc-washi-tape-preview',
        plugin_dir_url(__FILE__) . 'assets/css/washi-preview.css',
        [],
        LJC_VERSION
    );

    // Register preview script
    wp_register_script(
        'ljc-washi-tape-preview',
        plugin_dir_url(__FILE__) . 'assets/js/washi-preview.js',
        ['jquery', 'elementor-frontend'],
        LJC_VERSION,
        true
    );
}
add_action('init', 'ljc_register_elementor_assets');

================
File: ljc-add-to-cart/ljc-add-to-cart.php
================
<?php

/**
 * Plugin Name: LJC Add to Cart (Elementor)
 * Description: Cute, configurable Add to Cart widget for Elementor, designed for The Little Journal Club. Supports WooCommerce simple & variable products, quantity, a cute variations dropdown, button size control, label toggle, and more.
 * Version: 2.0.0
 * Author: The Little Journal Club
 * Text Domain: ljc-add-to-cart
 */

if (! defined('ABSPATH')) {
	exit;
}

add_action('plugins_loaded', function () {
	if (! did_action('elementor/loaded') || ! class_exists('WooCommerce')) {
		add_action('admin_notices', function () {
			if (! did_action('elementor/loaded')) {
				echo '<div class="notice notice-error"><p><strong>LJC Add to Cart</strong> requires Elementor to be installed and active.</p></div>';
			}
			if (! class_exists('WooCommerce')) {
				echo '<div class="notice notice-error"><p><strong>LJC Add to Cart</strong> requires WooCommerce to be installed and active.</p></div>';
			}
		});
		return;
	}

	add_action('elementor/elements/categories_registered', function ($elements_manager) {
		$elements_manager->add_category('the-little-journal-club', ['title' => __('The Little Journal Club', 'ljc-add-to-cart'), 'icon'  => 'fa fa-heart']);
	});

	add_action('elementor/widgets/register', function ($widgets_manager) {
		class LJC_Add_To_Cart_Widget extends \Elementor\Widget_Base
		{
			public function get_name()
			{
				return 'ljc-add-to-cart';
			}
			public function get_title()
			{
				return __('LJC – Add to Cart', 'ljc-add-to-cart');
			}
			public function get_icon()
			{
				return 'eicon-cart';
			}
			public function get_categories()
			{
				return ['the-little-journal-club'];
			}

			protected function register_controls()
			{
				// CONTENT SECTION
				$this->start_controls_section('section_content', ['label' => __('Content', 'ljc-add-to-cart')]);
				$this->add_control('product_source', ['label' => __('Product Source', 'ljc-add-to-cart'), 'type' => \Elementor\Controls_Manager::SELECT, 'options' => ['current' => __('Current Product', 'ljc-add-to-cart'), 'by_id' => __('Choose Product by ID', 'ljc-add-to-cart')], 'default' => 'current']);
				$this->add_control('product_id', ['label' => __('Product ID', 'ljc-add-to-cart'), 'type' => \Elementor\Controls_Manager::NUMBER, 'condition' => ['product_source' => 'by_id']]);
				$this->add_control('show_price', ['label' => __('Show Price', 'ljc-add-to-cart'), 'type' => \Elementor\Controls_Manager::SWITCHER, 'default' => 'yes']);
				$this->add_control('show_quantity', ['label' => __('Quantity Selector', 'ljc-add-to-cart'), 'type' => \Elementor\Controls_Manager::SWITCHER, 'default' => 'yes']);
				$this->add_control('button_text', ['label' => __('Button Text', 'ljc-add-to-cart'), 'type' => \Elementor\Controls_Manager::TEXT, 'default' => __('Add to Cart', 'ljc-add-to-cart')]);
				$this->add_control('cute_emojis', ['label' => __('Cute Accents', 'ljc-add-to-cart'), 'type' => \Elementor\Controls_Manager::TEXT, 'default' => '😊 ✨ 📒']);
				$this->add_control('hide_variation_labels', ['label' => __('Hide Variation Labels', 'ljc-add-to-cart'), 'type' => \Elementor\Controls_Manager::SWITCHER, 'default' => '']);
				$this->add_control('center_content', ['label' => __('Center All Items', 'ljc-add-to-cart'), 'type' => \Elementor\Controls_Manager::SWITCHER, 'default' => '']);
				$this->add_control('align_items', [
					'label' => __('Align Items', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::CHOOSE,
					'options' => [
						'left' => ['title' => __('Left', 'ljc-add-to-cart'), 'icon' => 'eicon-text-align-left'],
						'center' => ['title' => __('Center', 'ljc-add-to-cart'), 'icon' => 'eicon-text-align-center'],
						'right' => ['title' => __('Right', 'ljc-add-to-cart'), 'icon' => 'eicon-text-align-right'],
					],
					'toggle' => true,
					'default' => 'left',
					'prefix_class' => 'ljc-align-'
				]);
				$this->add_responsive_control('stack_gap', [
					'label' => __('Stack Spacing', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::SLIDER,
					'range' => ['px' => ['min' => 0, 'max' => 60]],
					'size_units' => ['px'],
					'selectors' => [
						'{{WRAPPER}} .ljc-atc' => 'gap: {{SIZE}}{{UNIT}};',
						'{{WRAPPER}} .ljc-atc form.cart' => 'gap: {{SIZE}}{{UNIT}};'
					]
				]);
				$this->end_controls_section();

				// PRODUCT INFO SECTION
				$this->start_controls_section('section_product_info', ['label' => __('Product Information', 'ljc-add-to-cart')]);
				$this->add_control('show_sku', ['label' => __('Show SKU', 'ljc-add-to-cart'), 'type' => \Elementor\Controls_Manager::SWITCHER, 'default' => '']);
				$this->add_control('show_stock', ['label' => __('Show Stock Status', 'ljc-add-to-cart'), 'type' => \Elementor\Controls_Manager::SWITCHER, 'default' => '']);
				$this->add_control('show_categories', ['label' => __('Show Categories', 'ljc-add-to-cart'), 'type' => \Elementor\Controls_Manager::SWITCHER, 'default' => '']);
				$this->add_control('show_tags', ['label' => __('Show Tags', 'ljc-add-to-cart'), 'type' => \Elementor\Controls_Manager::SWITCHER, 'default' => '']);
				$this->add_control('show_short_desc', ['label' => __('Show Short Description', 'ljc-add-to-cart'), 'type' => \Elementor\Controls_Manager::SWITCHER, 'default' => '']);
				$this->add_control('show_product_image', ['label' => __('Show Product Image', 'ljc-add-to-cart'), 'type' => \Elementor\Controls_Manager::SWITCHER, 'default' => '']);
				$this->add_control('image_size', [
					'label' => __('Image Size', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::SELECT,
					'options' => [
						'thumbnail' => __('Thumbnail', 'ljc-add-to-cart'),
						'medium' => __('Medium', 'ljc-add-to-cart'),
						'large' => __('Large', 'ljc-add-to-cart'),
						'woocommerce_thumbnail' => __('WooCommerce Thumbnail', 'ljc-add-to-cart'),
					],
					'default' => 'woocommerce_thumbnail',
					'condition' => ['show_product_image' => 'yes']
				]);
				$this->add_control('show_sale_badge', ['label' => __('Show Sale Badge', 'ljc-add-to-cart'), 'type' => \Elementor\Controls_Manager::SWITCHER, 'default' => '']);
				$this->add_control('sale_badge_text', [
					'label' => __('Sale Badge Text', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::TEXT,
					'default' => __('SALE!', 'ljc-add-to-cart'),
					'condition' => ['show_sale_badge' => 'yes']
				]);
				$this->end_controls_section();

				// CART BEHAVIOR SECTION
				$this->start_controls_section('section_cart_behavior', ['label' => __('Cart Behavior', 'ljc-add-to-cart')]);
				$this->add_control('ajax_cart', ['label' => __('Enable AJAX Add to Cart', 'ljc-add-to-cart'), 'type' => \Elementor\Controls_Manager::SWITCHER, 'default' => 'yes']);
				$this->add_control('redirect_after_add', [
					'label' => __('Redirect After Add', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::SELECT,
					'options' => [
						'no' => __('Stay on Page', 'ljc-add-to-cart'),
						'cart' => __('Go to Cart', 'ljc-add-to-cart'),
						'checkout' => __('Go to Checkout', 'ljc-add-to-cart'),
						'custom' => __('Custom URL', 'ljc-add-to-cart'),
					],
					'default' => 'no'
				]);
				$this->add_control('redirect_custom_url', [
					'label' => __('Custom Redirect URL', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::URL,
					'condition' => ['redirect_after_add' => 'custom']
				]);
				$this->add_control('success_message', [
					'label' => __('Success Message', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::TEXT,
					'default' => __('Product added to cart!', 'ljc-add-to-cart')
				]);
				$this->add_control('show_success_icon', ['label' => __('Show Success Icon', 'ljc-add-to-cart'), 'type' => \Elementor\Controls_Manager::SWITCHER, 'default' => 'yes']);
				$this->add_control('default_quantity', [
					'label' => __('Default Quantity', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::NUMBER,
					'default' => 1,
					'min' => 1
				]);
				$this->add_control('min_quantity', [
					'label' => __('Minimum Quantity', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::NUMBER,
					'default' => 1,
					'min' => 1
				]);
				$this->add_control('max_quantity', [
					'label' => __('Maximum Quantity (0 = unlimited)', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::NUMBER,
					'default' => 0,
					'min' => 0
				]);
				$this->add_control('quantity_step', [
					'label' => __('Quantity Step', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::NUMBER,
					'default' => 1,
					'min' => 1
				]);
				$this->end_controls_section();

				// VARIATIONS SECTION
				$this->start_controls_section('section_variations', ['label' => __('Variations Options', 'ljc-add-to-cart')]);
				$this->add_control('variation_display', [
					'label' => __('Variation Display Type', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::SELECT,
					'options' => [
						'dropdown' => __('Dropdown', 'ljc-add-to-cart'),
						'radio' => __('Radio Buttons', 'ljc-add-to-cart'),
						'buttons' => __('Button Swatches', 'ljc-add-to-cart'),
					],
					'default' => 'dropdown'
				]);
				$this->add_control('show_clear_link', ['label' => __('Show Clear Selection Link', 'ljc-add-to-cart'), 'type' => \Elementor\Controls_Manager::SWITCHER, 'default' => 'yes']);
				$this->add_control('clear_text', [
					'label' => __('Clear Selection Text', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::TEXT,
					'default' => __('Clear', 'ljc-add-to-cart'),
					'condition' => ['show_clear_link' => 'yes']
				]);
				$this->add_control('show_variation_price', ['label' => __('Show Variation Price', 'ljc-add-to-cart'), 'type' => \Elementor\Controls_Manager::SWITCHER, 'default' => 'yes']);
				$this->add_control('show_variation_description', ['label' => __('Show Variation Description', 'ljc-add-to-cart'), 'type' => \Elementor\Controls_Manager::SWITCHER, 'default' => '']);
				$this->add_control('show_variation_image', ['label' => __('Update Product Image on Selection', 'ljc-add-to-cart'), 'type' => \Elementor\Controls_Manager::SWITCHER, 'default' => 'yes']);
				$this->end_controls_section();

				// BUTTON EXTRAS SECTION
				$this->start_controls_section('section_button_extras', ['label' => __('Button Extras', 'ljc-add-to-cart')]);
				$this->add_control('button_icon', [
					'label' => __('Button Icon', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::ICONS,
					'default' => []
				]);
				$this->add_control('icon_position', [
					'label' => __('Icon Position', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::SELECT,
					'options' => [
						'before' => __('Before Text', 'ljc-add-to-cart'),
						'after' => __('After Text', 'ljc-add-to-cart'),
					],
					'default' => 'before'
				]);
				$this->add_control('loading_text', [
					'label' => __('Loading Text', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::TEXT,
					'default' => __('Adding...', 'ljc-add-to-cart')
				]);
				$this->add_control('show_loading_spinner', ['label' => __('Show Loading Spinner', 'ljc-add-to-cart'), 'type' => \Elementor\Controls_Manager::SWITCHER, 'default' => 'yes']);
				$this->add_control('button_style_preset', [
					'label' => __('Button Style Preset', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::SELECT,
					'options' => [
						'default' => __('Default', 'ljc-add-to-cart'),
						'gradient' => __('Gradient', 'ljc-add-to-cart'),
						'outline' => __('Outline', 'ljc-add-to-cart'),
						'3d' => __('3D Effect', 'ljc-add-to-cart'),
						'glow' => __('Glow Effect', 'ljc-add-to-cart'),
					],
					'default' => 'default',
					'prefix_class' => 'ljc-btn-style-'
				]);
				$this->end_controls_section();

				// ANIMATIONS SECTION
				$this->start_controls_section('section_animations', ['label' => __('Animations', 'ljc-add-to-cart')]);
				$this->add_control('entrance_animation', [
					'label' => __('Entrance Animation', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::SELECT,
					'options' => [
						'none' => __('None', 'ljc-add-to-cart'),
						'fadeIn' => __('Fade In', 'ljc-add-to-cart'),
						'slideInUp' => __('Slide Up', 'ljc-add-to-cart'),
						'slideInDown' => __('Slide Down', 'ljc-add-to-cart'),
						'bounceIn' => __('Bounce In', 'ljc-add-to-cart'),
						'zoomIn' => __('Zoom In', 'ljc-add-to-cart'),
					],
					'default' => 'none'
				]);
				$this->add_control('hover_animation', [
					'label' => __('Button Hover Animation', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::SELECT,
					'options' => [
						'none' => __('None', 'ljc-add-to-cart'),
						'pulse' => __('Pulse', 'ljc-add-to-cart'),
						'bounce' => __('Bounce', 'ljc-add-to-cart'),
						'shake' => __('Shake', 'ljc-add-to-cart'),
						'grow' => __('Grow', 'ljc-add-to-cart'),
					],
					'default' => 'none',
					'prefix_class' => 'ljc-hover-'
				]);
				$this->add_control('success_animation', [
					'label' => __('Success Animation', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::SELECT,
					'options' => [
						'none' => __('None', 'ljc-add-to-cart'),
						'checkmark' => __('Checkmark', 'ljc-add-to-cart'),
						'confetti' => __('Confetti', 'ljc-add-to-cart'),
						'tada' => __('Tada', 'ljc-add-to-cart'),
					],
					'default' => 'checkmark'
				]);
				$this->end_controls_section();

				// ADVANCED SECTION
				$this->start_controls_section('section_advanced', ['label' => __('Advanced', 'ljc-add-to-cart'), 'tab' => \Elementor\Controls_Manager::TAB_ADVANCED]);
				$this->add_control('custom_attributes', [
					'label' => __('Custom Button Attributes', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::TEXTAREA,
					'placeholder' => 'data-attribute="value"',
					'description' => __('Add custom attributes to the button. One per line.', 'ljc-add-to-cart')
				]);
				$this->add_control('enable_ga_tracking', ['label' => __('Enable GA/GTM Tracking', 'ljc-add-to-cart'), 'type' => \Elementor\Controls_Manager::SWITCHER, 'default' => '']);
				$this->add_control('ga_event_name', [
					'label' => __('GA Event Name', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::TEXT,
					'default' => 'add_to_cart',
					'condition' => ['enable_ga_tracking' => 'yes']
				]);
				$this->add_control('custom_css', [
					'label' => __('Custom CSS', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::CODE,
					'language' => 'css',
					'description' => __('Add custom CSS here. Use {{WRAPPER}} to target this widget.', 'ljc-add-to-cart')
				]);
				$this->end_controls_section();

				// STYLE: Price typography & color (KEEP EXISTING)
				$this->start_controls_section('section_style_price', ['label' => __('Price', 'ljc-add-to-cart'), 'tab' => \Elementor\Controls_Manager::TAB_STYLE]);
				$this->add_control('price_color', [
					'label' => __('Text Color', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::COLOR,
					'selectors' => ['{{WRAPPER}} .ljc-atc .ljc-price' => 'color: {{VALUE}};']
				]);
				$this->add_group_control(\Elementor\Group_Control_Typography::get_type(), [
					'name' => 'price_typography',
					'selector' => '{{WRAPPER}} .ljc-atc .ljc-price'
				]);
				$this->end_controls_section();

				// STYLE: Variation labels typography & color (KEEP EXISTING)
				$this->start_controls_section('section_style_labels', ['label' => __('Variation Labels', 'ljc-add-to-cart'), 'tab' => \Elementor\Controls_Manager::TAB_STYLE]);
				$this->add_control('labels_color', [
					'label' => __('Text Color', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::COLOR,
					'selectors' => ['{{WRAPPER}} .ljc-atc table.variations .label, {{WRAPPER}} .ljc-atc table.variations .label label' => 'color: {{VALUE}};']
				]);
				$this->add_group_control(\Elementor\Group_Control_Typography::get_type(), [
					'name' => 'labels_typography',
					'selector' => '{{WRAPPER}} .ljc-atc table.variations .label, {{WRAPPER}} .ljc-atc table.variations .label label'
				]);
				$this->end_controls_section();

				// STYLE: Cart Box styles (KEEP EXISTING)
				$this->start_controls_section('section_style_box', ['label' => __('Cart Box', 'ljc-add-to-cart'), 'tab' => \Elementor\Controls_Manager::TAB_STYLE]);
				$this->add_control('box_bg', [
					'label' => __('Background Color', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::COLOR,
					'default' => '#FFFFFF',
					'selectors' => ['{{WRAPPER}} .ljc-atc' => 'background-color: {{VALUE}};']
				]);
				$this->add_control('grid_paper', [
					'label' => __('Grid-paper Background', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::SWITCHER,
					'label_on' => __('On', 'ljc-add-to-cart'),
					'label_off' => __('Off', 'ljc-add-to-cart'),
					'return_value' => 'yes',
					'default' => 'yes',
					'prefix_class' => 'ljc-grid-'
				]);
				$this->add_control('box_border_color', [
					'label' => __('Border Color', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::COLOR,
					'selectors' => ['{{WRAPPER}} .ljc-atc' => 'border-color: {{VALUE}}; border-style: solid;']
				]);
				$this->add_responsive_control('box_border_width', [
					'label' => __('Border Width', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::SLIDER,
					'range' => ['px' => ['min' => 0, 'max' => 10]],
					'selectors' => ['{{WRAPPER}} .ljc-atc' => 'border-width: {{SIZE}}{{UNIT}}; border-style: solid;']
				]);
				$this->add_responsive_control('box_radius', [
					'label' => __('Border Radius', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::SLIDER,
					'range' => ['px' => ['min' => 0, 'max' => 60]],
					'selectors' => ['{{WRAPPER}} .ljc-atc' => 'border-radius: {{SIZE}}{{UNIT}};']
				]);
				$this->add_responsive_control('box_padding', [
					'label' => __('Padding', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::DIMENSIONS,
					'size_units' => ['px', 'em', '%'],
					'selectors' => ['{{WRAPPER}} .ljc-atc' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};']
				]);
				$this->end_controls_section();

				// STYLE: Button (KEEP ALL EXISTING)
				$this->start_controls_section('section_style_button', ['label' => __('Button', 'ljc-add-to-cart'), 'tab' => \Elementor\Controls_Manager::TAB_STYLE]);
				$this->add_responsive_control('btn_size', [
					'label' => __('Button Size', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::SLIDER,
					'range' => ['px' => ['min' => 10, 'max' => 60]],
					'size_units' => ['px', 'em', 'rem'],
					'selectors' => [
						'{{WRAPPER}} .ljc-atc .single_add_to_cart_button' => 'font-size: {{SIZE}}{{UNIT}} !important;',
					]
				]);
				$this->add_control('btn_bg', ['label' => __('Background', 'ljc-add-to-cart'), 'type' => \Elementor\Controls_Manager::COLOR, 'default' => '#F2B6A0', 'selectors' => ['{{WRAPPER}} .ljc-atc .single_add_to_cart_button.button.alt' => 'background-color: {{VALUE}};']]);
				$this->add_control('btn_text_color', [
					'label' => __('Text Color', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::COLOR,
					'selectors' => ['{{WRAPPER}} .ljc-atc .single_add_to_cart_button.button.alt' => 'color: {{VALUE}} !important;']
				]);
				$this->add_group_control(\Elementor\Group_Control_Typography::get_type(), [
					'name' => 'btn_typography',
					'selector' => '{{WRAPPER}} .ljc-atc .single_add_to_cart_button.button.alt'
				]);
				$this->add_control('btn_fullwidth', [
					'label' => __('Full-width Button', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::SWITCHER,
					'return_value' => 'yes',
					'default' => '',
					'prefix_class' => 'ljc-btn-full-'
				]);
				$this->add_group_control(\Elementor\Group_Control_Border::get_type(), [
					'name' => 'btn_border',
					'selector' => '{{WRAPPER}} .ljc-atc .single_add_to_cart_button.button.alt'
				]);
				$this->add_control('btn_border_style_force', [
					'label' => __('Border Type (force)', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::SELECT,
					'options' => [
						'' => __('Default', 'ljc-add-to-cart'),
						'solid' => __('Solid', 'ljc-add-to-cart'),
						'dashed' => __('Dashed', 'ljc-add-to-cart'),
						'dotted' => __('Dotted', 'ljc-add-to-cart'),
						'none' => __('None', 'ljc-add-to-cart'),
					],
					'selectors' => [
						'{{WRAPPER}} .ljc-atc .single_add_to_cart_button.button.alt' => 'border-style: {{VALUE}} !important;'
					]
				]);
				$this->add_responsive_control('btn_border_width_force', [
					'label' => __('Border Width (force)', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::SLIDER,
					'size_units' => ['px'],
					'range' => ['px' => ['min' => 0, 'max' => 8]],
					'selectors' => [
						'{{WRAPPER}} .ljc-atc .single_add_to_cart_button.button.alt' => 'border-width: {{SIZE}}{{UNIT}} !important;'
					]
				]);
				$this->add_control('btn_border_color_force', [
					'label' => __('Border Color (force)', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::COLOR,
					'selectors' => [
						'{{WRAPPER}} .ljc-atc .single_add_to_cart_button.button.alt' => 'border-color: {{VALUE}} !important;'
					]
				]);
				$this->add_responsive_control('btn_radius', [
					'label' => __('Border Radius', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::SLIDER,
					'range' => ['px' => ['min' => 0, 'max' => 60]],
					'selectors' => [
						'{{WRAPPER}} .ljc-atc .single_add_to_cart_button.button.alt' => 'border-radius: {{SIZE}}{{UNIT}} !important;'
					]
				]);
				$this->add_responsive_control('btn_padding', [
					'label' => __('Padding', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::DIMENSIONS,
					'size_units' => ['px', 'em', 'rem'],
					'selectors' => [
						'{{WRAPPER}} .ljc-atc .single_add_to_cart_button.button.alt' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;'
					]
				]);
				$this->add_group_control(\Elementor\Group_Control_Box_Shadow::get_type(), [
					'name' => 'btn_shadow',
					'selector' => '{{WRAPPER}} .ljc-atc .single_add_to_cart_button.button.alt'
				]);
				$this->add_control('btn_bg_hover', [
					'label' => __('Background (Hover)', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::COLOR,
					'selectors' => [
						'{{WRAPPER}} .ljc-atc .single_add_to_cart_button.button.alt:hover' => 'background-color: {{VALUE}} !important;'
					]
				]);
				$this->add_control('btn_text_hover', [
					'label' => __('Text Color (Hover)', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::COLOR,
					'selectors' => [
						'{{WRAPPER}} .ljc-atc .single_add_to_cart_button.button.alt:hover' => 'color: {{VALUE}} !important;'
					]
				]);
				$this->add_control('btn_border_hover', [
					'label' => __('Border Color (Hover)', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::COLOR,
					'selectors' => [
						'{{WRAPPER}} .ljc-atc .single_add_to_cart_button.button.alt:hover' => 'border-color: {{VALUE}} !important;'
					]
				]);
				$this->end_controls_section();

				// STYLE: Select Fields (KEEP EXISTING)
				$this->start_controls_section('section_style_fields', ['label' => __('Select Fields', 'ljc-add-to-cart'), 'tab' => \Elementor\Controls_Manager::TAB_STYLE]);
				$this->add_control('field_bg', ['label' => __('Field Background', 'ljc-add-to-cart'), 'type' => \Elementor\Controls_Manager::COLOR, 'default' => '#FFF8F4', 'selectors' => ['{{WRAPPER}} .ljc-atc select, {{WRAPPER}} .ljc-atc input[type=number]' => 'background-color: {{VALUE}} !important;']]);
				$this->add_control('select_text_color', [
					'label' => __('Text Color', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::COLOR,
					'selectors' => ['{{WRAPPER}} .ljc-atc select' => 'color: {{VALUE}} !important;']
				]);
				$this->add_group_control(\Elementor\Group_Control_Typography::get_type(), [
					'name' => 'select_typography',
					'selector' => '{{WRAPPER}} .ljc-atc select'
				]);
				$this->add_control('field_border_color', [
					'label' => __('Field Border Color', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::COLOR,
					'selectors' => ['{{WRAPPER}} .ljc-atc select, {{WRAPPER}} .ljc-atc .quantity .qty' => 'border-color: {{VALUE}} !important;']
				]);
				$this->add_responsive_control('field_radius', [
					'label' => __('Field Border Radius', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::SLIDER,
					'range' => ['px' => ['min' => 0, 'max' => 30]],
					'selectors' => ['{{WRAPPER}} .ljc-atc select, {{WRAPPER}} .ljc-atc .quantity .qty' => 'border-radius: {{SIZE}}{{UNIT}};']
				]);
				$this->add_control('full_width_dropdowns', [
					'label' => __('Full-width Dropdowns', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::SWITCHER,
					'return_value' => 'yes',
					'default' => '',
					'prefix_class' => 'ljc-ffd-'
				]);
				$this->end_controls_section();

				// STYLE: Quantity (KEEP EXISTING)
				$this->start_controls_section('section_style_quantity', ['label' => __('Quantity', 'ljc-add-to-cart'), 'tab' => \Elementor\Controls_Manager::TAB_STYLE]);
				$this->add_control('qty_text_color', [
					'label' => __('Text Color', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::COLOR,
					'selectors' => ['{{WRAPPER}} .ljc-atc .quantity .qty' => 'color: {{VALUE}} !important;']
				]);
				$this->add_group_control(\Elementor\Group_Control_Typography::get_type(), [
					'name' => 'qty_typography',
					'selector' => '{{WRAPPER}} .ljc-atc .quantity .qty'
				]);
				$this->end_controls_section();

				// STYLE: Accents (KEEP EXISTING)
				$this->start_controls_section('section_style_accents', ['label' => __('Accents', 'ljc-add-to-cart'), 'tab' => \Elementor\Controls_Manager::TAB_STYLE]);
				$this->add_control('accents_color', [
					'label' => __('Text Color', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::COLOR,
					'selectors' => ['{{WRAPPER}} .ljc-atc .ljc-accents' => 'color: {{VALUE}};']
				]);
				$this->add_group_control(\Elementor\Group_Control_Typography::get_type(), [
					'name' => 'accents_typography',
					'selector' => '{{WRAPPER}} .ljc-atc .ljc-accents'
				]);
				$this->end_controls_section();

				// NEW STYLE SECTIONS
				// STYLE: Product Info
				$this->start_controls_section('section_style_info', ['label' => __('Product Info', 'ljc-add-to-cart'), 'tab' => \Elementor\Controls_Manager::TAB_STYLE]);
				$this->add_control('info_color', [
					'label' => __('Text Color', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::COLOR,
					'selectors' => ['{{WRAPPER}} .ljc-atc .ljc-product-info' => 'color: {{VALUE}};']
				]);
				$this->add_group_control(\Elementor\Group_Control_Typography::get_type(), [
					'name' => 'info_typography',
					'selector' => '{{WRAPPER}} .ljc-atc .ljc-product-info'
				]);
				$this->add_responsive_control('info_spacing', [
					'label' => __('Spacing', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::SLIDER,
					'range' => ['px' => ['min' => 0, 'max' => 30]],
					'selectors' => ['{{WRAPPER}} .ljc-atc .ljc-product-info' => 'margin-bottom: {{SIZE}}{{UNIT}};']
				]);
				$this->end_controls_section();

				// STYLE: Sale Badge
				$this->start_controls_section('section_style_badge', ['label' => __('Sale Badge', 'ljc-add-to-cart'), 'tab' => \Elementor\Controls_Manager::TAB_STYLE]);
				$this->add_control('badge_bg', [
					'label' => __('Background', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::COLOR,
					'default' => '#FF6B6B',
					'selectors' => ['{{WRAPPER}} .ljc-atc .ljc-sale-badge' => 'background-color: {{VALUE}};']
				]);
				$this->add_control('badge_color', [
					'label' => __('Text Color', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::COLOR,
					'default' => '#FFFFFF',
					'selectors' => ['{{WRAPPER}} .ljc-atc .ljc-sale-badge' => 'color: {{VALUE}};']
				]);
				$this->add_group_control(\Elementor\Group_Control_Typography::get_type(), [
					'name' => 'badge_typography',
					'selector' => '{{WRAPPER}} .ljc-atc .ljc-sale-badge'
				]);
				$this->add_responsive_control('badge_padding', [
					'label' => __('Padding', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::DIMENSIONS,
					'size_units' => ['px'],
					'selectors' => ['{{WRAPPER}} .ljc-atc .ljc-sale-badge' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};']
				]);
				$this->add_responsive_control('badge_radius', [
					'label' => __('Border Radius', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::SLIDER,
					'range' => ['px' => ['min' => 0, 'max' => 30]],
					'selectors' => ['{{WRAPPER}} .ljc-atc .ljc-sale-badge' => 'border-radius: {{SIZE}}{{UNIT}};']
				]);
				$this->end_controls_section();

				// STYLE: Variation Swatches
				$this->start_controls_section('section_style_swatches', ['label' => __('Variation Swatches', 'ljc-add-to-cart'), 'tab' => \Elementor\Controls_Manager::TAB_STYLE]);
				$this->add_control('swatch_bg', [
					'label' => __('Background', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::COLOR,
					'selectors' => ['{{WRAPPER}} .ljc-atc .ljc-swatch' => 'background-color: {{VALUE}};']
				]);
				$this->add_control('swatch_border', [
					'label' => __('Border Color', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::COLOR,
					'selectors' => ['{{WRAPPER}} .ljc-atc .ljc-swatch' => 'border-color: {{VALUE}};']
				]);
				$this->add_control('swatch_active_border', [
					'label' => __('Active Border Color', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::COLOR,
					'selectors' => ['{{WRAPPER}} .ljc-atc .ljc-swatch.active' => 'border-color: {{VALUE}};']
				]);
				$this->add_responsive_control('swatch_size', [
					'label' => __('Size', 'ljc-add-to-cart'),
					'type' => \Elementor\Controls_Manager::SLIDER,
					'range' => ['px' => ['min' => 20, 'max' => 80]],
					'selectors' => [
						'{{WRAPPER}} .ljc-atc .ljc-swatch' => 'width: {{SIZE}}{{UNIT}}; height: {{SIZE}}{{UNIT}};'
					]
				]);
				$this->end_controls_section();
			}

			private function get_product_from_settings()
			{
				$settings = $this->get_settings_for_display();
				if ('by_id' === $settings['product_source']) {
					return wc_get_product(absint($settings['product_id']));
				}
				global $product;
				return $product ?: null;
			}

			public function render()
			{
				wp_enqueue_script('wc-add-to-cart-variation');
				$settings = $this->get_settings_for_display();
				$product  = $this->get_product_from_settings();
				
				if (! $product) {
					echo '<div class="ljc-atc">' . __('No product found.', 'ljc-add-to-cart') . '</div>';
					return;
				}
				
				// Custom CSS
				if (!empty($settings['custom_css'])) {
					echo '<style>' . str_replace('{{WRAPPER}}', '.elementor-element-' . $this->get_id(), $settings['custom_css']) . '</style>';
				}
				
				// Entrance animation
				$wrapper_attrs = '';
				if (!empty($settings['entrance_animation']) && $settings['entrance_animation'] !== 'none') {
					$wrapper_attrs = ' data-animation="' . esc_attr($settings['entrance_animation']) . '"';
				}
				
				// Cute emojis
				if ($settings['cute_emojis']) echo '<div class="ljc-accents">' . esc_html($settings['cute_emojis']) . '</div>';
				
				echo '<div class="ljc-atc' . (! empty($settings['center_content']) ? ' ljc-legacy-center' : '') . '"' . $wrapper_attrs . '>';
				
				// Product image
				if ('yes' === $settings['show_product_image'] && has_post_thumbnail($product->get_id())) {
					echo '<div class="ljc-product-image">';
					if ($product->is_on_sale() && 'yes' === $settings['show_sale_badge']) {
						echo '<span class="ljc-sale-badge">' . esc_html($settings['sale_badge_text']) . '</span>';
					}
					echo get_the_post_thumbnail($product->get_id(), $settings['image_size']);
					echo '</div>';
				}
				
				// Product info
				$show_info = ('yes' === $settings['show_sku'] || 'yes' === $settings['show_stock'] || 
							 'yes' === $settings['show_categories'] || 'yes' === $settings['show_tags'] || 
							 'yes' === $settings['show_short_desc']);
				
				if ($show_info) {
					echo '<div class="ljc-product-info">';
					
					if ('yes' === $settings['show_sku'] && $product->get_sku()) {
						echo '<div class="ljc-sku">' . __('SKU: ', 'ljc-add-to-cart') . esc_html($product->get_sku()) . '</div>';
					}
					
					if ('yes' === $settings['show_stock']) {
						$availability = $product->get_availability();
						echo '<div class="ljc-stock ' . esc_attr($availability['class']) . '">' . esc_html($availability['availability']) . '</div>';
					}
					
					if ('yes' === $settings['show_categories']) {
						$categories = wc_get_product_category_list($product->get_id());
						if ($categories) {
							echo '<div class="ljc-categories">' . $categories . '</div>';
						}
					}
					
					if ('yes' === $settings['show_tags']) {
						$tags = wc_get_product_tag_list($product->get_id());
						if ($tags) {
							echo '<div class="ljc-tags">' . $tags . '</div>';
						}
					}
					
					if ('yes' === $settings['show_short_desc'] && $product->get_short_description()) {
						echo '<div class="ljc-short-desc">' . wp_kses_post($product->get_short_description()) . '</div>';
					}
					
					echo '</div>';
				}
				
				// Price
				if ('yes' === $settings['show_price']) {
					echo '<div class="ljc-price">' . $product->get_price_html() . '</div>';
				}
				
				// Build custom attributes
				$custom_attrs = '';
				if (!empty($settings['custom_attributes'])) {
					$attrs = explode("\n", $settings['custom_attributes']);
					foreach ($attrs as $attr) {
						$custom_attrs .= ' ' . esc_attr(trim($attr));
					}
				}
				
				// GA tracking
				if ('yes' === $settings['enable_ga_tracking']) {
					$custom_attrs .= ' data-ga-event="' . esc_attr($settings['ga_event_name']) . '"';
					$custom_attrs .= ' data-product-id="' . esc_attr($product->get_id()) . '"';
					$custom_attrs .= ' data-product-name="' . esc_attr($product->get_name()) . '"';
					$custom_attrs .= ' data-product-price="' . esc_attr($product->get_price()) . '"';
				}
				
				// Render form based on product type
				if ($product->is_type('simple')) {
					$this->render_simple_form($product, $settings, $custom_attrs);
				} elseif ($product->is_type('variable')) {
					$this->render_variable_form($product, $settings, $custom_attrs);
				}
				
				// Success message container
				echo '<div class="ljc-success-message" style="display:none;">';
				if ('yes' === $settings['show_success_icon']) {
					echo '<span class="ljc-success-icon">✓</span>';
				}
				echo '<span class="ljc-success-text">' . esc_html($settings['success_message']) . '</span>';
				echo '</div>';
				
				echo '</div>';
				
				// Add JavaScript for enhanced functionality
				$this->render_scripts($settings);
			}
			
			private function render_simple_form($product, $settings, $custom_attrs) {
				$ajax_class = ('yes' === $settings['ajax_cart']) ? ' ajax_add_to_cart' : '';
				
				echo '<form class="cart" method="post">';
				echo '<div class="ljc-actions">';
				
				if ('yes' === $settings['show_quantity']) {
					echo '<div class="ljc-qty-wrap">';
					woocommerce_quantity_input([
						'min_value' => $settings['min_quantity'],
						'max_value' => $settings['max_quantity'] > 0 ? $settings['max_quantity'] : '',
						'input_value' => $settings['default_quantity'],
						'step' => $settings['quantity_step']
					]);
					echo '</div>';
				}
				
				$button_text = $settings['button_text'];
				
				// Add icon to button
				if (!empty($settings['button_icon']['value'])) {
					$icon_html = \Elementor\Icons_Manager::render_icon($settings['button_icon'], ['aria-hidden' => 'true']);
					if ($settings['icon_position'] === 'before') {
						$button_text = $icon_html . ' ' . $button_text;
					} else {
						$button_text = $button_text . ' ' . $icon_html;
					}
				}
				
				echo '<button type="submit" name="add-to-cart" value="' . esc_attr($product->get_id()) . '" 
					  class="single_add_to_cart_button button alt' . $ajax_class . '" 
					  data-loading-text="' . esc_attr($settings['loading_text']) . '"' . $custom_attrs . '>' . 
					  $button_text . '</button>';
				
				echo '</div>';
				echo '</form>';
			}
			
			private function render_variable_form($product, $settings, $custom_attrs) {
				$attributes = $product->get_variation_attributes();
				$available_variations = $product->get_available_variations();
				$ajax_class = ('yes' === $settings['ajax_cart']) ? ' ajax_add_to_cart' : '';
				
				echo '<form class="variations_form cart" method="post" 
					  data-product_variations="' . esc_attr(wp_json_encode($available_variations)) . '"
					  data-product_id="' . esc_attr($product->get_id()) . '">';
				
				if ($settings['variation_display'] === 'dropdown') {
					// Original dropdown display
					echo '<table class="variations"><tbody>';
					foreach ($attributes as $attribute_name => $options) {
						echo '<tr><td class="label">' . 
							 ($settings['hide_variation_labels'] ? '' : '<label>' . wc_attribute_label($attribute_name) . '</label>') . 
							 '</td><td class="value">';
						wc_dropdown_variation_attribute_options(['options' => $options, 'product' => $product, 'attribute' => $attribute_name]);
						echo '</td></tr>';
					}
					echo '</tbody></table>';
				} else {
					// Radio or button swatches
					echo '<div class="ljc-variations-wrapper">';
					foreach ($attributes as $attribute_name => $options) {
						echo '<div class="ljc-variation-group">';
						if (!$settings['hide_variation_labels']) {
							echo '<label class="ljc-variation-label">' . wc_attribute_label($attribute_name) . '</label>';
						}
						
						if ($settings['variation_display'] === 'radio') {
							$this->render_radio_options($attribute_name, $options, $product);
						} else {
							$this->render_button_swatches($attribute_name, $options, $product);
						}
						echo '</div>';
					}
					echo '</div>';
				}
				
				// Clear selection link
				if ('yes' === $settings['show_clear_link']) {
					echo '<a class="reset_variations" href="#">' . esc_html($settings['clear_text']) . '</a>';
				}
				
				// Single variation wrap for price/description
				echo '<div class="single_variation_wrap">';
				if ('yes' === $settings['show_variation_price']) {
					echo '<div class="woocommerce-variation single_variation"></div>';
				}
				if ('yes' === $settings['show_variation_description']) {
					echo '<div class="woocommerce-variation-description"></div>';
				}
				echo '</div>';
				
				echo '<div class="ljc-actions">';
				
				if ('yes' === $settings['show_quantity']) {
					echo '<div class="ljc-qty-wrap">';
					woocommerce_quantity_input([
						'min_value' => $settings['min_quantity'],
						'max_value' => $settings['max_quantity'] > 0 ? $settings['max_quantity'] : '',
						'input_value' => $settings['default_quantity'],
						'step' => $settings['quantity_step']
					]);
					echo '</div>';
				}
				
				$button_text = $settings['button_text'];
				
				// Add icon to button
				if (!empty($settings['button_icon']['value'])) {
					$icon_html = \Elementor\Icons_Manager::render_icon($settings['button_icon'], ['aria-hidden' => 'true']);
					if ($settings['icon_position'] === 'before') {
						$button_text = $icon_html . ' ' . $button_text;
					} else {
						$button_text = $button_text . ' ' . $icon_html;
					}
				}
				
				echo '<button type="submit" class="single_add_to_cart_button button alt' . $ajax_class . '" 
					  data-loading-text="' . esc_attr($settings['loading_text']) . '"' . $custom_attrs . '>' . 
					  $button_text . '</button>';
				
				echo '</div>';
				echo '<input type="hidden" name="add-to-cart" value="' . esc_attr($product->get_id()) . '" />';
				echo '<input type="hidden" name="product_id" value="' . esc_attr($product->get_id()) . '" />';
				echo '<input type="hidden" name="variation_id" class="variation_id" value="0" />';
				
				echo '</form>';
			}
			
			private function render_radio_options($attribute_name, $options, $product) {
				$selected = isset($_REQUEST['attribute_' . sanitize_title($attribute_name)]) 
						   ? wc_clean(stripslashes(urldecode($_REQUEST['attribute_' . sanitize_title($attribute_name)]))) 
						   : $product->get_variation_default_attribute($attribute_name);
				
				echo '<div class="ljc-radio-options">';
				foreach ($options as $option) {
					$id = 'ljc-' . sanitize_title($attribute_name) . '-' . sanitize_title($option);
					echo '<label for="' . esc_attr($id) . '" class="ljc-radio-label">';
					echo '<input type="radio" id="' . esc_attr($id) . '" 
						  name="attribute_' . esc_attr(sanitize_title($attribute_name)) . '" 
						  value="' . esc_attr($option) . '"' . 
						  checked(sanitize_title($selected), sanitize_title($option), false) . '>';
					echo '<span>' . esc_html(apply_filters('woocommerce_variation_option_name', $option)) . '</span>';
					echo '</label>';
				}
				echo '</div>';
			}
			
			private function render_button_swatches($attribute_name, $options, $product) {
				$selected = isset($_REQUEST['attribute_' . sanitize_title($attribute_name)]) 
						   ? wc_clean(stripslashes(urldecode($_REQUEST['attribute_' . sanitize_title($attribute_name)]))) 
						   : $product->get_variation_default_attribute($attribute_name);
				
				echo '<div class="ljc-button-swatches">';
				foreach ($options as $option) {
					$active = (sanitize_title($selected) === sanitize_title($option)) ? ' active' : '';
					echo '<button type="button" class="ljc-swatch' . $active . '" 
						  data-attribute="attribute_' . esc_attr(sanitize_title($attribute_name)) . '" 
						  data-value="' . esc_attr($option) . '">' . 
						  esc_html(apply_filters('woocommerce_variation_option_name', $option)) . 
						  '</button>';
				}
				echo '<input type="hidden" name="attribute_' . esc_attr(sanitize_title($attribute_name)) . '" 
					  value="' . esc_attr($selected) . '" />';
				echo '</div>';
			}
			
			private function render_scripts($settings) {
				?>
				<script>
				jQuery(function($) {
					var widget = $('.elementor-element-<?php echo $this->get_id(); ?>');
					
					// Button swatches functionality
					widget.find('.ljc-swatch').on('click', function() {
						var $this = $(this);
						var attribute = $this.data('attribute');
						var value = $this.data('value');
						
						$this.siblings().removeClass('active');
						$this.addClass('active');
						
						widget.find('input[name="' + attribute + '"]').val(value).trigger('change');
						widget.find('.variations_form').trigger('woocommerce_variation_select_change');
						widget.find('.variations_form').trigger('check_variations');
					});
					
					// Radio functionality
					widget.find('.ljc-radio-options input[type="radio"]').on('change', function() {
						widget.find('.variations_form').trigger('woocommerce_variation_select_change');
						widget.find('.variations_form').trigger('check_variations');
					});
					
					// Success animation
					<?php if ($settings['success_animation'] !== 'none'): ?>
					widget.on('added_to_cart', function(e, fragments, cart_hash, $button) {
						var successMsg = widget.find('.ljc-success-message');
						successMsg.fadeIn(300).delay(2000).fadeOut(300);
						
						<?php if ($settings['success_animation'] === 'confetti'): ?>
						// Add confetti effect
						var confettiCount = 30;
						for (var i = 0; i < confettiCount; i++) {
							var confetti = $('<div class="ljc-confetti"></div>');
							confetti.css({
								left: Math.random() * 100 + '%',
								animationDelay: Math.random() * 3 + 's',
								backgroundColor: ['#FF6B6B', '#4ECDC4', '#45B7D1', '#FFA07A', '#98D8C8'][Math.floor(Math.random() * 5)]
							});
							widget.append(confetti);
							setTimeout(function() { confetti.remove(); }, 3000);
						}
						<?php endif; ?>
					});
					<?php endif; ?>
					
					// Redirect after add to cart
					<?php if ($settings['redirect_after_add'] !== 'no'): ?>
					widget.on('added_to_cart', function(e, fragments, cart_hash, $button) {
						setTimeout(function() {
							<?php if ($settings['redirect_after_add'] === 'cart'): ?>
							window.location.href = '<?php echo wc_get_cart_url(); ?>';
							<?php elseif ($settings['redirect_after_add'] === 'checkout'): ?>
							window.location.href = '<?php echo wc_get_checkout_url(); ?>';
							<?php elseif ($settings['redirect_after_add'] === 'custom' && !empty($settings['redirect_custom_url']['url'])): ?>
							window.location.href = '<?php echo esc_url($settings['redirect_custom_url']['url']); ?>';
							<?php endif; ?>
						}, 500);
					});
					<?php endif; ?>
					
					// Loading state
					<?php if ($settings['show_loading_spinner'] === 'yes'): ?>
					widget.find('.single_add_to_cart_button').on('click', function() {
						var $btn = $(this);
						if (!$btn.hasClass('disabled')) {
							var originalText = $btn.html();
							$btn.data('original-text', originalText);
							$btn.html('<span class="ljc-spinner"></span> ' + $btn.data('loading-text'));
						}
					});
					
					widget.on('added_to_cart', function(e, fragments, cart_hash, $button) {
						if ($button && $button.data('original-text')) {
							$button.html($button.data('original-text'));
						}
					});
					<?php endif; ?>
					
					// Entrance animation
					<?php if (!empty($settings['entrance_animation']) && $settings['entrance_animation'] !== 'none'): ?>
					widget.find('.ljc-atc').addClass('animated <?php echo esc_attr($settings['entrance_animation']); ?>');
					<?php endif; ?>
				});
				</script>
				<?php
			}
		}
		$widgets_manager->register(new LJC_Add_To_Cart_Widget());
	});

	add_action('wp_head', function () {
?>
		<style id="ljc-atc-styles">
			/* KEEP ALL EXISTING STYLES */
			.ljc-accents {
				text-align: center;
				margin-bottom: 8px
			}

			.ljc-atc {
				display: flex;
				flex-direction: column;
				gap: 10px;
				padding: 18px;
				border-radius: 20px;
				background-image: none;
			}

			/* Grid-paper background toggle via widget prefix class */
			.ljc-grid-yes .ljc-atc {
				background-image: repeating-linear-gradient(0deg, #f7eae2 0, #f7eae2 1px, transparent 1px, transparent 22px);
			}

			/* Forms stack vertically; spacing is controllable */
			.ljc-atc form.cart {
				display: flex;
				flex-direction: column;
				gap: 10px;
				align-items: flex-start;
			}

			.ljc-atc .ljc-actions {
				display: flex;
				align-items: center;
				gap: 10px;
			}

			.ljc-align-center .ljc-atc .ljc-actions,
			.ljc-atc.ljc-legacy-center .ljc-actions {
				justify-content: center;
			}

			.ljc-align-right .ljc-atc .ljc-actions {
				justify-content: flex-end;
			}

			/* Alignment helpers via widget prefix class */
			.ljc-align-center .ljc-atc,
			.ljc-atc.ljc-legacy-center {
				text-align: center;
			}

			.ljc-align-center .ljc-atc form.cart,
			.ljc-atc.ljc-legacy-center form.cart {
				align-items: center;
			}

			.ljc-align-right .ljc-atc {
				text-align: right;
			}

			.ljc-align-right .ljc-atc form.cart {
				align-items: flex-end;
			}

			/* Quantity wrapper follows alignment */
			.ljc-atc .ljc-qty-wrap {
				display: flex;
				width: 100%;
				justify-content: flex-start;
			}

			.ljc-align-center .ljc-atc .ljc-qty-wrap,
			.ljc-atc.ljc-legacy-center .ljc-qty-wrap {
				justify-content: center;
			}

			.ljc-align-right .ljc-atc .ljc-qty-wrap {
				justify-content: flex-end;
			}

			/* Field base styles */
			.ljc-atc select,
			.ljc-atc .quantity .qty {
				border: 1px solid #f0d9cf;
				padding: 10px 12px;
				outline: none;
				border-radius: 8px;
			}

			/* Neutralize theme table hover background leaking into selects */
			.ljc-atc select,
			.ljc-atc .quantity .qty,
			.ljc-atc table td,
			.ljc-atc table th {
				background-color: transparent !important;
			}

			/* Kill native select appearance and draw a chevron */
			.ljc-atc select {
				appearance: none;
				-webkit-appearance: none;
				-moz-appearance: none;
				background-clip: padding-box;
				background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 20 20'%3E%3Cpath fill='%23888888' d='M5.516 7.548a1 1 0 0 1 1.414 0L10 10.618l3.07-3.07a1 1 0 1 1 1.414 1.414l-3.777 3.777a1.5 1.5 0 0 1-2.121 0L5.516 8.962a1 1 0 0 1 0-1.414z'/%3E%3C/svg%3E");
				background-repeat: no-repeat;
				background-position: right 12px center;
				background-size: 14px 14px;
				padding-right: 40px;
			}

			.ljc-atc select::-ms-expand {
				display: none;
			}

			/* Full-width dropdowns toggle via widget prefix class */
			.ljc-ffd-yes .ljc-atc table.variations {
				width: 100%;
			}

			.ljc-ffd-yes .ljc-atc table.variations tbody,
			.ljc-ffd-yes .ljc-atc table.variations tr,
			.ljc-ffd-yes .ljc-atc table.variations td {
				display: block;
				width: 100%;
			}

			.ljc-ffd-yes .ljc-atc table.variations .label {
				margin-bottom: 6px;
			}

			.ljc-ffd-yes .ljc-atc table.variations .value {
				width: 100%;
			}

			.ljc-ffd-yes .ljc-atc table.variations select {
				width: 100%;
			}

			/* Full-width button toggle via widget prefix class */
			.ljc-btn-full-yes .ljc-atc .single_add_to_cart_button {
				width: 100%;
			}
			
			/* NEW STYLES */
			
			/* Product Info */
			.ljc-atc .ljc-product-info {
				display: flex;
				flex-direction: column;
				gap: 8px;
			}
			
			.ljc-atc .ljc-product-image {
				position: relative;
				margin-bottom: 15px;
			}
			
			.ljc-atc .ljc-product-image img {
				width: 100%;
				height: auto;
				border-radius: 12px;
			}
			
			/* Sale Badge */
			.ljc-atc .ljc-sale-badge {
				position: absolute;
				top: 10px;
				right: 10px;
				padding: 5px 10px;
				background: #FF6B6B;
				color: white;
				border-radius: 20px;
				font-weight: bold;
				font-size: 12px;
				z-index: 1;
			}
			
			/* Stock Status */
			.ljc-atc .ljc-stock {
				font-size: 14px;
			}
			
			.ljc-atc .ljc-stock.in-stock {
				color: #4CAF50;
			}
			
			.ljc-atc .ljc-stock.out-of-stock {
				color: #F44336;
			}
			
			/* Success Message */
			.ljc-atc .ljc-success-message {
				display: flex;
				align-items: center;
				gap: 10px;
				padding: 12px 20px;
				background: #4CAF50;
				color: white;
				border-radius: 8px;
				margin-top: 10px;
			}
			
			.ljc-atc .ljc-success-icon {
				width: 24px;
				height: 24px;
				background: white;
				color: #4CAF50;
				border-radius: 50%;
				display: flex;
				align-items: center;
				justify-content: center;
				font-weight: bold;
			}
			
			/* Variation Radio Options */
			.ljc-atc .ljc-variations-wrapper {
				display: flex;
				flex-direction: column;
				gap: 15px;
			}
			
			.ljc-atc .ljc-variation-group {
				display: flex;
				flex-direction: column;
				gap: 10px;
			}
			
			.ljc-atc .ljc-variation-label {
				font-weight: 600;
				margin-bottom: 5px;
			}
			
			.ljc-atc .ljc-radio-options {
				display: flex;
				flex-wrap: wrap;
				gap: 10px;
			}
			
			.ljc-atc .ljc-radio-label {
				display: flex;
				align-items: center;
				gap: 8px;
				padding: 8px 15px;
				background: #f5f5f5;
				border: 2px solid transparent;
				border-radius: 8px;
				cursor: pointer;
				transition: all 0.3s ease;
			}
			
			.ljc-atc .ljc-radio-label:hover {
				border-color: #f0d9cf;
			}
			
			.ljc-atc .ljc-radio-label input[type="radio"]:checked + span {
				font-weight: 600;
			}
			
			.ljc-atc .ljc-radio-label input[type="radio"]:checked ~ * {
				color: #333;
			}
			
			/* Button Swatches */
			.ljc-atc .ljc-button-swatches {
				display: flex;
				flex-wrap: wrap;
				gap: 10px;
			}
			
			.ljc-atc .ljc-swatch {
				padding: 10px 20px;
				background: #f5f5f5;
				border: 2px solid transparent;
				border-radius: 8px;
				cursor: pointer;
				transition: all 0.3s ease;
				font-weight: 500;
			}
			
			.ljc-atc .ljc-swatch:hover {
				border-color: #f0d9cf;
				transform: translateY(-2px);
			}
			
			.ljc-atc .ljc-swatch.active {
				background: #FFF8F4;
				border-color: #F2B6A0;
				font-weight: 600;
			}
			
			/* Clear variations link */
			.ljc-atc .reset_variations {
				color: #999;
				font-size: 14px;
				text-decoration: underline;
				margin-top: 5px;
			}
			
			/* Loading Spinner */
			.ljc-spinner {
				display: inline-block;
				width: 16px;
				height: 16px;
				border: 2px solid rgba(255,255,255,.3);
				border-radius: 50%;
				border-top-color: #fff;
				animation: ljc-spin 0.6s linear infinite;
			}
			
			@keyframes ljc-spin {
				to { transform: rotate(360deg); }
			}
			
			/* Button Style Presets */
			.ljc-btn-style-gradient .ljc-atc .single_add_to_cart_button {
				background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
			}
			
			.ljc-btn-style-outline .ljc-atc .single_add_to_cart_button {
				background: transparent !important;
				border: 2px solid currentColor !important;
			}
			
			.ljc-btn-style-3d .ljc-atc .single_add_to_cart_button {
				box-shadow: 0 4px 0 rgba(0,0,0,0.2);
				transform: translateY(-2px);
			}
			
			.ljc-btn-style-3d .ljc-atc .single_add_to_cart_button:active {
				transform: translateY(0);
				box-shadow: 0 2px 0 rgba(0,0,0,0.2);
			}
			
			.ljc-btn-style-glow .ljc-atc .single_add_to_cart_button {
				box-shadow: 0 0 20px rgba(242, 182, 160, 0.5);
			}
			
			/* Hover Animations */
			.ljc-hover-pulse .ljc-atc .single_add_to_cart_button:hover {
				animation: ljc-pulse 1s infinite;
			}
			
			.ljc-hover-bounce .ljc-atc .single_add_to_cart_button:hover {
				animation: ljc-bounce 0.5s;
			}
			
			.ljc-hover-shake .ljc-atc .single_add_to_cart_button:hover {
				animation: ljc-shake 0.5s;
			}
			
			.ljc-hover-grow .ljc-atc .single_add_to_cart_button:hover {
				transform: scale(1.05);
			}
			
			@keyframes ljc-pulse {
				0% { transform: scale(1); }
				50% { transform: scale(1.05); }
				100% { transform: scale(1); }
			}
			
			@keyframes ljc-bounce {
				0%, 100% { transform: translateY(0); }
				50% { transform: translateY(-10px); }
			}
			
			@keyframes ljc-shake {
				0%, 100% { transform: translateX(0); }
				25% { transform: translateX(-5px); }
				75% { transform: translateX(5px); }
			}
			
			/* Confetti Animation */
			.ljc-confetti {
				position: absolute;
				width: 10px;
				height: 10px;
				animation: ljc-confetti-fall 3s ease-out forwards;
			}
			
			@keyframes ljc-confetti-fall {
				to {
					transform: translateY(100vh) rotate(720deg);
					opacity: 0;
				}
			}
			
			/* Entrance Animations */
			.animated {
				animation-duration: 0.8s;
				animation-fill-mode: both;
			}
			
			@keyframes fadeIn {
				from { opacity: 0; }
				to { opacity: 1; }
			}
			
			@keyframes slideInUp {
				from {
					transform: translateY(30px);
					opacity: 0;
				}
				to {
					transform: translateY(0);
					opacity: 1;
				}
			}
			
			@keyframes slideInDown {
				from {
					transform: translateY(-30px);
					opacity: 0;
				}
				to {
					transform: translateY(0);
					opacity: 1;
				}
			}
			
			@keyframes bounceIn {
				0% {
					opacity: 0;
					transform: scale(0.3);
				}
				50% {
					opacity: 1;
					transform: scale(1.05);
				}
				70% {
					transform: scale(0.9);
				}
				100% {
					transform: scale(1);
				}
			}
			
			@keyframes zoomIn {
				from {
					opacity: 0;
					transform: scale(0.5);
				}
				to {
					opacity: 1;
					transform: scale(1);
				}
			}
			
			.animated.fadeIn { animation-name: fadeIn; }
			.animated.slideInUp { animation-name: slideInUp; }
			.animated.slideInDown { animation-name: slideInDown; }
			.animated.bounceIn { animation-name: bounceIn; }
			.animated.zoomIn { animation-name: zoomIn; }
		</style>
<?php
	});
});

================
File: mu-plugins/elementor-thankyou.php
================
<?php
/**
 * Plugin Name: Elementor Thank You Redirect (MU)
 * Description: Redirect WooCommerce "order received" to a custom Elementor page, render order details via shortcode, and empty cart after verified successful checkout. Also forces wp_mail() (incl. Woo) to use SMTP while leaving credentials to your SMTP plugin.
 */

/**
 * --- Force SMTP transport globally (let your SMTP plugin supply credentials) ---
 *
 * Why here? MU-plugins load before normal plugins, so we set only the transport
 * (Mailer = 'smtp'). Your SMTP plugin will then configure Host/Port/Auth/User/Pass.
 */
add_action('phpmailer_init', function ($phpmailer) {
    // Always force the transport to SMTP; do NOT hardcode creds here.
    $phpmailer->Mailer = 'smtp';
}, 5);

/**
 * Optional: make sure From headers are consistent. If your SMTP provider requires
 * a specific From, you can set it here, or let your SMTP plugin manage it.
 */
// add_filter('wp_mail_from', function ($from) {
//     return 'no-reply@yourdomain.com';
// }, 20);
// add_filter('wp_mail_from_name', function ($name) {
//     return 'Your Site';
// }, 20);

// -----------------------------------------------------------------------------
// WooCommerce thank-you redirection + receipt rendering + safe cart emptying
// -----------------------------------------------------------------------------

// Only run Woo-specific pieces if WooCommerce is active.
add_action('plugins_loaded', function () {
    if (!class_exists('WooCommerce')) {
        return;
    }

    /**
     * Helper: get the Elementor Thank You page ID.
     * Keep this in one place so it’s easy to change later.
     */
    function ljc_thankyou_page_id()
    {
        return 477; // <-- your Elementor Thank You page ID
    }

    /**
     * STEP A (optional but recommended):
     * Disable caching for the custom Thank You page to avoid stale carts / stale notices.
     */
    add_action('template_redirect', function () {
        if (is_page(ljc_thankyou_page_id())) {
            nocache_headers();
        }
    });

    /**
     * STEP B: Redirect the native thank-you URL to your Elementor page.
     */
    add_filter('woocommerce_get_checkout_order_received_url', function ($url, $order) {
        if (!$order instanceof WC_Order) {
            return $url;
        }

        $page_id = ljc_thankyou_page_id();
        $page_url = get_permalink($page_id);
        if (!$page_url) {
            // If the page is missing, fall back to the default URL.
            return $url;
        }

        // Pass order id + order key so we can securely render details on the custom page.
        return add_query_arg(
            array(
                'order' => $order->get_id(),
                'key' => $order->get_order_key(),
            ),
            $page_url
        );
    }, 10, 2);

    /**
     * STEP C: Shortcode to print WooCommerce order details inside your Elementor page,
     * and (once verified) empty the cart.
     */
    add_shortcode('my_order_summary', function () {

        $order_id = isset($_GET['order']) ? absint($_GET['order']) : 0;
        $key = isset($_GET['key']) ? sanitize_text_field($_GET['key']) : '';

        if (!$order_id || !$key) {
            return '<div class="wc-order-msg">We couldn’t find your order details. If you completed checkout, please check your email.</div>';
        }

        $order = wc_get_order($order_id);
        if (!$order || $order->get_order_key() !== $key) {
            return '<div class="wc-order-msg">Order not found or key mismatch.</div>';
        }

        /**
         * EMPTY THE CART SAFELY
         *
         * Conditions:
         * - The order should be paid / in a “successful” state (processing or completed).
         * - Only empty if the current session still has items (idempotent).
         * - This happens client-side when the customer lands on the thank-you page,
         *   ensuring we affect the right session/cart.
         */
        $is_success_state = $order->is_paid() || $order->has_status(array('processing', 'completed'));

        if ($is_success_state && function_exists('WC') && WC()->cart) {
            if (!WC()->cart->is_empty()) {
                WC()->cart->empty_cart(true);
                // Optional: Add a one-time success notice visible above the receipt.
                wc_add_notice(__('Thanks! Your cart has been cleared after successful checkout.', 'your-textdomain'), 'success');
            }
        }

        ob_start(); ?>
        <div id="ljc-ty">
            <script>
                // Update cart count to 0 on successful checkout
                document.addEventListener('DOMContentLoaded', function() {
                    // Find all cart count elements and set them to 0
                    const cartCountElements = document.querySelectorAll('.crafty-nav-cart-count');
                    cartCountElements.forEach(function(element) {
                        element.textContent = '0';
                    });
                    
                    // Also update any other common cart count selectors
                    const alternativeCartCounts = document.querySelectorAll('.cart-count, .cart-count-number, .header-cart-count');
                    alternativeCartCounts.forEach(function(element) {
                        element.textContent = '0';
                    });
                });
            </script>
            <style>
                /* ---------- LJC Thank You / Receipt Styles ---------- */
                #ljc-ty {
                    --ljc-bg: #ffffff;
                    --ljc-ink: #0f172a;
                    /* slate-900 */
                    --ljc-ink-2: #334155;
                    /* slate-700 */
                    --ljc-ink-3: #64748b;
                    /* slate-500 */
                    --ljc-line: #e5e7eb;
                    /* gray-200 */
                    --ljc-soft: #f8fafc;
                    /* slate-50 */
                    --ljc-accent: #111827;
                    /* gray-900 for headers */
                    --ljc-muted: #9ca3af;
                    /* gray-400 */
                    --ljc-pill: #eef2ff;
                    /* indigo-50 */
                    --ljc-pill-text: #3730a3;
                    /* indigo-800 */
                    color: var(--ljc-ink) !important;
                }

                #ljc-ty,
                #ljc-ty * {
                    color: var(--ljc-ink);
                }

                #ljc-ty a {
                    color: var(--ljc-ink-2);
                    text-decoration: underline;
                }

                #ljc-ty strong {
                    color: var(--ljc-ink);
                }

                .ljc-card {
                    background: var(--ljc-bg);
                    border: 1px solid var(--ljc-line);
                    border-radius: 14px;
                    box-shadow: 0 1px 1px rgba(0, 0, 0, .04), 0 8px 24px rgba(0, 0, 0, .06);
                    padding: clamp(16px, 2.2vw, 28px);
                    margin: 8px 0 28px;
                }

                #ljc-ty h1,
                #ljc-ty h2,
                #ljc-ty h3 {
                    margin: .2em 0 .6em;
                    line-height: 1.2;
                    color: var(--ljc-accent);
                }

                #ljc-ty h2 {
                    font-size: clamp(18px, 2.2vw, 22px);
                }

                #ljc-ty h3 {
                    font-size: clamp(16px, 2vw, 18px);
                }

                #ljc-ty ul.woocommerce-order-overview {
                    list-style: none;
                    margin: 0 0 16px;
                    padding: 0;
                    display: grid;
                    gap: 6px 14px;
                    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
                }

                #ljc-ty ul.woocommerce-order-overview li {
                    background: var(--ljc-soft);
                    border: 1px solid var(--ljc-line);
                    border-radius: 10px;
                    padding: 10px 12px;
                    color: var(--ljc-ink-2);
                }

                #ljc-ty table,
                #ljc-ty .shop_table {
                    width: 100%;
                    border: 1px solid var(--ljc-line) !important;
                    border-collapse: separate !important;
                    border-spacing: 0;
                    background: var(--ljc-bg) !important;
                    border-radius: 12px;
                    overflow: hidden;
                }

                #ljc-ty .shop_table th,
                #ljc-ty .shop_table td {
                    padding: 14px 16px !important;
                    border-top: 1px solid var(--ljc-line) !important;
                    vertical-align: middle;
                    color: var(--ljc-ink);
                }

                #ljc-ty .shop_table thead th {
                    border-top: 0 !important;
                    background: var(--ljc-soft) !important;
                    font-weight: 600;
                    color: var(--ljc-ink-2);
                }

                #ljc-ty .shop_table tr:nth-child(even) td,
                #ljc-ty .shop_table tr:nth-child(odd) td {
                    background: #fff;
                }

                #ljc-ty .shop_table td.product-name a {
                    color: var(--ljc-ink-2);
                }

                #ljc-ty .shop_table tfoot th {
                    color: var(--ljc-ink-2);
                    font-weight: 600;
                }

                #ljc-ty .shop_table tfoot tr.order-total th,
                #ljc-ty .shop_table tfoot tr.order-total td {
                    border-top: 2px solid var(--ljc-line) !important;
                    font-weight: 700;
                    font-size: 1.05em;
                }

                #ljc-ty .woocommerce-customer-details {
                    display: grid;
                    gap: 16px;
                    grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
                }

                #ljc-ty .woocommerce-customer-details address {
                    background: var(--ljc-bg);
                    border: 1px solid var(--ljc-line);
                    border-radius: 10px;
                    padding: 12px 14px;
                    color: var(--ljc-ink-2);
                    font-style: normal;
                    line-height: 1.55;
                }

                #ljc-ty .woocommerce-notice,
                #ljc-ty .woocommerce-thankyou-order-received {
                    background: #ecfdf5;
                    border: 1px solid #a7f3d0;
                    color: #065f46 !important;
                    border-radius: 10px;
                    padding: 12px 14px;
                    margin-bottom: 16px;
                    font-weight: 600;
                }

                @media print {

                    #wpadminbar,
                    .elementor-location-header,
                    .elementor-location-footer {
                        display: none !important;
                    }

                    #ljc-ty .ljc-card {
                        box-shadow: none;
                        border-color: #cbd5e1;
                    }

                    #ljc-ty a {
                        text-decoration: none;
                        color: #000;
                    }
                }
            </style>
            <?php
            // Render full native thank-you content so items/totals/addresses all show.
            wc_get_template('checkout/thankyou.php', ['order' => $order], '', WC()->plugin_path() . '/templates/');
            ?>
        </div>
        <?php
        return ob_get_clean();
    });
});

/**
 * Network / cURL hardening (unchanged).
 */
add_action('http_api_curl', function ($handle) {
    if (defined('CURLOPT_IPRESOLVE')) {
        @curl_setopt($handle, CURLOPT_IPRESOLVE, CURL_IPRESOLVE_V4);
    }
    if (defined('CURLOPT_TIMEOUT')) {
        @curl_setopt($handle, CURLOPT_TIMEOUT, 5);
    }
}, 10);

add_filter('http_request_timeout', function ($t) {
    return min($t, 5);
});

================
File: mu-plugins/smtp-test.php
================
<?php
/**
 * Plugin Name: SMTP Test (MU)
 */
add_action('admin_init', function () {
    if (!current_user_can('manage_options'))
        return;

    if (!isset($_GET['smtp_test']))
        return;

    $to = 'mclainr@gmail.com';
    $sent = wp_mail($to, 'SMTP Test', 'If you received this, SMTP is working.');
    $notice = $sent ? '✅ Test email queued successfully.' : '❌ Failed to queue test email.';

    add_action('admin_notices', function () use ($notice) {
        echo '<div class="notice notice-info"><p>' . esc_html($notice) . '</p></div>';
    });
});

================
File: scrapbook-shop/assets/css/scrapbook-shop.css
================
/**
 * Scrapbook Shop for Elementor - Main Styles
 * Replicates the polaroid/scrapbook aesthetic from the original theme
 */

/* ========================================
   CSS Custom Properties (Variables)
   ======================================== */
:root {
  /* Colors - matching original theme */
  --scrapbook-primary: #2C2C2C;
  --scrapbook-secondary: #B58C67;
  --scrapbook-accent: #91A4BA;
  --scrapbook-text: #484848;
  --scrapbook-text-light: #7D7D7D;
  --scrapbook-text-lighter: #5D5D5D;
  
  /* Background Colors */
  --scrapbook-bg-card: #FAF2F1;
  --scrapbook-bg-card-hover: #F5EDE8;
  --scrapbook-bg-white: #ffffff;
  
  /* Border Colors */
  --scrapbook-border-primary: #EFE5DA;
  --scrapbook-border-secondary: #DDCABE;
  
  /* Shadows */
  --scrapbook-shadow-sm: 0 2px 4px rgba(0, 0, 0, 0.05);
  --scrapbook-shadow-md: 0 4px 8px rgba(0, 0, 0, 0.07);
  --scrapbook-shadow-lg: 0 10px 20px rgba(0, 0, 0, 0.12);
  --scrapbook-shadow-focus: 0 0 0 3px rgba(181, 140, 103, 0.1);
  
  /* Spacing */
  --scrapbook-space-xs: clamp(0.25rem, 1vw, 0.5rem);
  --scrapbook-space-sm: clamp(0.5rem, 2vw, 1rem);
  --scrapbook-space-md: clamp(1rem, 3vw, 2rem);
  --scrapbook-space-lg: clamp(2rem, 5vw, 3rem);
  --scrapbook-space-xl: clamp(3rem, 8vw, 5rem);
}

/* ========================================
   ARCHIVE HEADER
   ======================================== */
.scrapbook-archive-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: var(--scrapbook-space-md);
  margin-bottom: var(--scrapbook-space-lg);
  padding: var(--scrapbook-space-md) 0;
  border-bottom: none;
}

.scrapbook-archive-title {
  font-family: 'Meloso', sans-serif;
  font-size: clamp(2rem, 6vw, 3.5rem);
  color: var(--scrapbook-primary);
  font-weight: 400;
  margin: 0;
  padding: 0;
  line-height: 1.2;
  letter-spacing: -0.02em;
  flex: 1;
}

.scrapbook-sorting {
  flex-shrink: 0;
}

/* Mobile header layout */
@media (max-width: 767px) {
  .scrapbook-archive-header {
    flex-direction: column;
    align-items: flex-start;
    gap: var(--scrapbook-space-sm);
  }
  
  .scrapbook-sorting {
    align-self: flex-end;
  }
}

/* ========================================
   PRODUCTS GRID
   ======================================== */
.scrapbook-products-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 75px 25px;
  padding: 0;
  margin: 25px 0 30px 0;
  width: 100%;
  box-sizing: border-box;
}

/* Responsive grid */
@media (max-width: 480px) {
  .scrapbook-products-grid {
    grid-template-columns: 1fr;
    gap: 35px 10px;
    margin: 15px 0 20px 0;
  }
}

@media (min-width: 481px) and (max-width: 767px) {
  .scrapbook-products-grid {
    grid-template-columns: 1fr;
    gap: 45px 15px;
  }
}

@media (min-width: 768px) and (max-width: 991px) {
  .scrapbook-products-grid {
    grid-template-columns: repeat(2, 1fr);
    gap: 60px 20px;
  }
}

@media (min-width: 1400px) {
  .scrapbook-products-grid {
    max-width: 1200px;
    margin-left: auto;
    margin-right: auto;
  }
}

/* ========================================
   PRODUCT CARD
   ======================================== */
.scrapbook-product-card {
  background-color: var(--scrapbook-bg-card);
  border: 1px solid var(--scrapbook-border-primary);
  border-radius: 4px;
  padding: 0 15px 15px 15px;
  text-align: center;
  box-shadow: var(--scrapbook-shadow-md);
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1), 
              box-shadow 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  overflow: visible;
  height: 100%;
  min-height: 400px;
}

.scrapbook-product-card-inner,
.product-card-inner {
  display: flex;
  flex-direction: column;
  height: 100%;
  width: 100%;
}

/* Hover effects */
@media (hover: hover) and (pointer: fine) {
  .scrapbook-product-card:hover {
    transform: translateY(-5px) rotate(-1.5deg);
    box-shadow: var(--scrapbook-shadow-lg);
  }
}

/* Touch feedback for mobile */
@media (hover: none) and (pointer: coarse) {
  .scrapbook-product-card:active {
    transform: scale(0.98);
    transition: transform 0.1s ease;
  }
}

/* ========================================
   PRODUCT IMAGE & WASHI TAPE
   ======================================== */
.product-image-wrapper {
  position: relative;
  margin-bottom: 20px;
  /* Padding-top is dynamically controlled via Elementor 'Top Clearance' control */
}

/* Polaroid Frame */
.polaroid-frame {
  position: relative;
  background-color: var(--scrapbook-bg-white);
  padding: 10px;
  padding-bottom: 25px;
  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
  border-radius: 3px;
  margin-left: auto;
  margin-right: auto;
  max-width: calc(100% - 20px);
  z-index: 1;
}

/* Washi Tape Decoration */
.washi-tape-decoration {
  position: absolute;
  top: -20px;
  left: 50%;
  transform: translateX(-50%) rotate(0deg);
  width: auto;
  height: auto;
  z-index: 2;
  filter: drop-shadow(0 2px 3px rgba(0, 0, 0, 0.15));
  pointer-events: none;
}

.washi-tape-decoration svg {
  width: 100%;
  height: 100%;
  overflow: visible;
}

/* Enhanced mobile washi tape sizing */
@media (max-width: 480px) {
  .washi-tape-decoration {
    width: 110px;
    height: 44px;
    top: -32px;
  }
}

/* Product image inside polaroid */
.polaroid-frame img {
  max-width: 100%;
  height: auto;
  display: block;
  border-radius: 2px;
  object-fit: cover;
  width: 100%;
}

/* ========================================
   SALE BADGE
   ======================================== */
.scrapbook-product-card .onsale {
  position: absolute;
  top: 5px;
  right: 5px;
  background-color: #F8C885;
  color: var(--scrapbook-bg-white);
  width: 20%;
  max-width: 60px;
  min-width: 40px;
  aspect-ratio: 1 / 1;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 11px;
  z-index: 3;
  line-height: 1;
  font-weight: bold;
  text-transform: uppercase;
}

/* ========================================
   PRODUCT DETAILS
   ======================================== */
.product-details {
  margin-bottom: 15px;
  flex-grow: 1;
  padding: 0 5px;
}

.product-title {
  font-size: clamp(0.9rem, 3vw, 1rem);
  color: var(--scrapbook-text);
  margin-bottom: 8px;
  font-weight: 600;
  line-height: 1.3;
  word-wrap: break-word;
  hyphens: auto;
}

.product-title a {
  color: var(--scrapbook-text);
  text-decoration: none;
  display: block;
  padding: 4px;
  transition: color 0.2s ease;
}

.product-title a:hover,
.product-title a:focus {
  color: var(--scrapbook-secondary);
  outline: none;
}

.product-title a:focus-visible {
  outline: 2px solid var(--scrapbook-secondary);
  outline-offset: 2px;
}

/* Price styling */
.product-details .price {
  font-size: 0.95rem;
  color: #000000;
  font-weight: bold;
  display: block;
  margin-bottom: 8px;
}

/* Struck-through original prices */
.product-details .price del {
  color: #666666;
  font-weight: normal;
}

/* Star rating */
.product-details .star-rating {
  margin: 0 auto 10px auto;
}

/* ========================================
   PRODUCT ACTIONS
   ======================================== */
.product-actions {
  margin-top: auto;
  padding: 0 10px;
}

.product-actions .button,
.product-actions .add_to_cart_button {
  background-color: var(--scrapbook-accent);
  color: var(--scrapbook-bg-white);
  text-transform: capitalize;
  padding: 10px 18px;
  text-decoration: none;
  border-radius: 4px;
  display: inline-block;
  font-size: 0.9rem;
  border: 1px solid var(--scrapbook-border-secondary);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  font-weight: 500;
  box-shadow: var(--scrapbook-shadow-sm);
  line-height: normal;
  margin-bottom: 0;
  min-height: 44px;
  width: 100%;
  max-width: 250px;
  cursor: pointer;
}

/* Hover effects */
@media (hover: hover) and (pointer: fine) {
  .product-actions .button:hover,
  .product-actions .add_to_cart_button:hover {
    background-color: #DDB0A7;
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    color: var(--scrapbook-bg-white);
  }
}

/* Focus styles */
.product-actions .button:focus,
.product-actions .add_to_cart_button:focus {
  outline: none;
  box-shadow: var(--scrapbook-shadow-focus), var(--scrapbook-shadow-sm);
}

.product-actions .button:focus-visible,
.product-actions .add_to_cart_button:focus-visible {
  outline: 2px solid var(--scrapbook-secondary);
  outline-offset: 2px;
}

/* Touch feedback */
@media (hover: none) and (pointer: coarse) {
  .product-actions .button:active,
  .product-actions .add_to_cart_button:active {
    background-color: #DDB0A7;
    transform: scale(0.98);
  }
}

.product-actions .added_to_cart {
  display: flex;
  align-items: center;
  justify-content: center;
  margin-top: 5px;
  font-size: 0.85rem;
  color: var(--scrapbook-secondary);
  text-decoration: none;
  min-height: 44px;
  transition: color 0.2s ease;
}

.product-actions .added_to_cart:hover,
.product-actions .added_to_cart:focus {
  color: var(--scrapbook-text);
}

/* ========================================
   SORTING DROPDOWN
   ======================================== */
.scrapbook-ordering {
  margin: 0;
  padding: 0;
  position: relative;
  z-index: 5;
}

.scrapbook-ordering::before {
  content: "Sort by:";
  font-family: 'Meloso', sans-serif;
  font-size: 1.1rem;
  color: var(--scrapbook-text-light);
  margin-right: 12px;
  font-weight: 400;
}

.scrapbook-ordering select {
  background-color: var(--scrapbook-bg-card);
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%23B58C67' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
  background-position: right 12px center;
  background-repeat: no-repeat;
  background-size: 16px;
  border: 2px solid var(--scrapbook-border-primary);
  border-radius: 12px;
  padding: 12px 45px 12px 16px;
  color: var(--scrapbook-text-lighter);
  font-size: 1rem;
  font-family: inherit;
  font-weight: 500;
  box-shadow: 0 3px 8px rgba(181, 140, 103, 0.15), inset 0 1px 0 rgba(255, 255, 255, 0.7);
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  appearance: none;
  min-height: 48px;
  min-width: 180px;
  transform: rotate(-0.5deg);
}

.scrapbook-ordering select:hover {
  border-color: var(--scrapbook-border-secondary);
  background-color: var(--scrapbook-bg-card-hover);
  box-shadow: 0 4px 12px rgba(181, 140, 103, 0.2), inset 0 1px 0 rgba(255, 255, 255, 0.9);
  transform: rotate(0deg) translateY(-1px);
}

.scrapbook-ordering select:focus {
  outline: none;
  border-color: var(--scrapbook-secondary);
  box-shadow: var(--scrapbook-shadow-focus), 0 4px 12px rgba(181, 140, 103, 0.25);
  transform: rotate(0deg);
}

.scrapbook-ordering select:focus-visible {
  outline: 2px solid var(--scrapbook-secondary);
  outline-offset: 2px;
}

/* ========================================
   PAGINATION
   ======================================== */
.scrapbook-pagination {
  margin-top: var(--scrapbook-space-lg);
  text-align: center;
}

.scrapbook-pagination .page-numbers {
  display: inline-block;
  padding: 8px 12px;
  margin: 0 4px;
  background-color: var(--scrapbook-bg-card);
  border: 1px solid var(--scrapbook-border-primary);
  border-radius: 4px;
  color: var(--scrapbook-text);
  text-decoration: none;
  transition: all 0.2s ease;
}

.scrapbook-pagination .page-numbers:hover {
  background-color: var(--scrapbook-secondary);
  color: var(--scrapbook-bg-white);
  border-color: var(--scrapbook-secondary);
}

.scrapbook-pagination .page-numbers.current {
  background-color: var(--scrapbook-accent);
  color: var(--scrapbook-bg-white);
  border-color: var(--scrapbook-accent);
}

/* ========================================
   NO PRODUCTS MESSAGE
   ======================================== */
.scrapbook-no-products {
  text-align: center;
  padding: var(--scrapbook-space-xl);
  color: var(--scrapbook-text-light);
  font-size: 1.1rem;
}

/* ========================================
   RESULT COUNT
   ======================================== */
.scrapbook-result-count {
  color: var(--scrapbook-text-light);
  font-size: 0.9rem;
  margin-bottom: var(--scrapbook-space-md);
}

/* ========================================
   LOADING STATE
   ======================================== */
.scrapbook-loading {
  text-align: center;
  padding: var(--scrapbook-space-lg);
}

.scrapbook-loading::after {
  content: '';
  display: inline-block;
  width: 30px;
  height: 30px;
  border: 3px solid var(--scrapbook-border-primary);
  border-top-color: var(--scrapbook-secondary);
  border-radius: 50%;
  animation: scrapbook-spin 1s linear infinite;
}

@keyframes scrapbook-spin {
  to {
    transform: rotate(360deg);
  }
}

/* ========================================
   REDUCED MOTION PREFERENCES
   ======================================== */
@media (prefers-reduced-motion: reduce) {
  .scrapbook-product-card,
  .product-actions .button,
  .scrapbook-ordering select {
    transition: none;
  }
  
  .scrapbook-product-card:hover {
    transform: none;
  }
  
  .scrapbook-loading::after {
    animation: none;
  }
}

================
File: scrapbook-shop/languages/README.md
================
Scrapbook Shop Translations

- Text domain: `scrapbook-shop`
- Domain path: `/languages`

Files:
- `scrapbook-shop.pot`: Starter template. Regenerate with WP-CLI:

```sh
wp i18n make-pot . languages/scrapbook-shop.pot --slug=scrapbook-shop
```

To add a language:
1) Copy `scrapbook-shop.pot` to `scrapbook-shop-LOCALE.po` (e.g. `scrapbook-shop-de_DE.po`).
2) Translate strings in the `.po` file with a tool like Poedit.
3) Compile to `.mo` (Poedit does this automatically) and ensure the file is named `scrapbook-shop-LOCALE.mo` in this directory.
4) WordPress will load the `.mo` automatically when the site language matches.

================
File: scrapbook-shop/languages/scrapbook-shop.pot
================
msgid ""
msgstr ""
"Project-Id-Version: Scrapbook Shop for Elementor 1.0.0\n"
"Report-Msgid-Bugs-To: https://wordpress.org/support/plugin/scrapbook-shop\n"
"POT-Creation-Date: 2025-08-10 00:00+0000\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Initial template (run wp i18n make-pot to update)\n"
"X-Domain: scrapbook-shop\n"

#. translators: %s: comma-separated list of missing plugin names
#: scrapbook-shop.php
msgid "Scrapbook Shop requires the following plugins to be installed and activated: %s"
msgstr ""

#: scrapbook-shop.php
msgid "Scrapbook Shop"
msgstr ""

#: widgets/scrapbook-product-card.php
msgid "Scrapbook Product Card"
msgstr ""

#: widgets/scrapbook-products-grid.php
msgid "Scrapbook Products Grid"
msgstr ""

#: widgets/scrapbook-product-card.php
msgid "Content"
msgstr ""

#: widgets/scrapbook-product-card.php
msgid "Product"
msgstr ""

#: widgets/scrapbook-product-card.php
msgid "None (Use in Loop)"
msgstr ""

#: widgets/scrapbook-product-card.php
msgid "Washi Tape"
msgstr ""

#: widgets/scrapbook-product-card.php
msgid "Use Washi Tape"
msgstr ""

#: widgets/scrapbook-product-card.php
msgid "Washi Tape Source"
msgstr ""

#: widgets/scrapbook-product-card.php
msgid "Washi Tape Plugin"
msgstr ""

#: widgets/scrapbook-product-card.php
msgid "Custom Image"
msgstr ""

#: widgets/scrapbook-product-card.php
msgid "Random from Plugin"
msgstr ""

#: widgets/scrapbook-product-card.php
msgid "Tape Rotation"
msgstr ""

#: widgets/scrapbook-products-grid.php
msgid "Query"
msgstr ""

#: widgets/scrapbook-products-grid.php
msgid "All Products"
msgstr ""

#: widgets/scrapbook-products-grid.php
msgid "Featured Products"
msgstr ""

#: widgets/scrapbook-products-grid.php
msgid "On Sale"
msgstr ""

#: widgets/scrapbook-products-grid.php
msgid "Best Selling"
msgstr ""

#: widgets/scrapbook-products-grid.php
msgid "Top Rated"
msgstr ""

#: widgets/scrapbook-products-grid.php
msgid "By Category"
msgstr ""

#: widgets/scrapbook-products-grid.php
msgid "Manual Selection"
msgstr ""

#: widgets/scrapbook-products-grid.php
msgid "Layout"
msgstr ""

#: widgets/scrapbook-products-grid.php
msgid "Show Page Title"
msgstr ""

#: widgets/scrapbook-products-grid.php
msgid "Shop"
msgstr ""

#: widgets/scrapbook-products-grid.php
msgid "Show Sorting Dropdown"
msgstr ""

#: widgets/scrapbook-products-grid.php
msgid "Show Result Count"
msgstr ""

#
# This is a starter POT. To regenerate with all strings:
# 1) Install WP-CLI and from the plugin root run:
#    wp i18n make-pot . languages/scrapbook-shop.pot --slug=scrapbook-shop
#

================
File: scrapbook-shop/widgets/scrapbook-product-card.php
================
<?php

/**
 * Scrapbook Product Card Widget
 * 
 * Custom Elementor widget that creates a scrapbook-style product card
 * with integrated washi tape support
 */

namespace Scrapbook_Shop\Widgets;

if (!defined('ABSPATH')) {
    exit;
}

// Bail out if Elementor base class is not loaded yet
if (!class_exists('Elementor\\Widget_Base')) {
    return;
}

class Scrapbook_Product_Card extends \Elementor\Widget_Base
{

    public function get_name()
    {
        return 'scrapbook_product_card';
    }

    public function get_title()
    {
        return esc_html__('Scrapbook Product Card', 'scrapbook-shop');
    }

    public function get_icon()
    {
        return 'eicon-product-images';
    }

    public function get_categories()
    {
        return ['woocommerce-elements'];
    }

    public function get_keywords()
    {
        return ['product', 'woocommerce', 'scrapbook', 'polaroid', 'washi tape'];
    }

    protected function register_controls()
    {

        // Content Section
        $this->start_controls_section(
            'section_content',
            [
                'label' => esc_html__('Content', 'scrapbook-shop'),
            ]
        );

        $this->add_control(
            'product_id',
            [
                'label' => esc_html__('Product', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SELECT2,
                'options' => $this->get_products_list(),
                'label_block' => true,
                'description' => esc_html__('Leave empty to use in loop', 'scrapbook-shop'),
            ]
        );

        $this->add_control(
            'show_title',
            [
                'label' => esc_html__('Show Title', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'default' => 'yes',
            ]
        );

        $this->add_control(
            'show_price',
            [
                'label' => esc_html__('Show Price', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'default' => 'yes',
            ]
        );

        $this->add_control(
            'show_rating',
            [
                'label' => esc_html__('Show Rating', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'default' => 'yes',
            ]
        );

        $this->add_control(
            'show_add_to_cart',
            [
                'label' => esc_html__('Show Add to Cart', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'default' => 'yes',
            ]
        );

        $this->add_control(
            'show_sale_badge',
            [
                'label' => esc_html__('Show Sale Badge', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'default' => 'yes',
            ]
        );

        $this->end_controls_section();

        // Washi Tape Section
        $this->start_controls_section(
            'section_washi_tape',
            [
                'label' => esc_html__('Washi Tape', 'scrapbook-shop'),
            ]
        );

        $this->add_control(
            'use_washi_tape',
            [
                'label' => esc_html__('Use Washi Tape', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'default' => 'yes',
            ]
        );

        $this->add_control(
            'washi_tape_source',
            [
                'label' => esc_html__('Washi Tape Source', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SELECT,
                'default' => 'plugin',
                'options' => [
                    'plugin' => esc_html__('Washi Tape Plugin', 'scrapbook-shop'),
                    'image' => esc_html__('Custom Image', 'scrapbook-shop'),
                    'random' => esc_html__('Random from Plugin', 'scrapbook-shop'),
                ],
                'condition' => [
                    'use_washi_tape' => 'yes',
                ],
            ]
        );

        // If Washi Tape plugin is active, show tape selector
        if (class_exists('Washi_Tape_DB')) {
            $this->add_control(
                'washi_tape_id',
                [
                    'label' => esc_html__('Select Washi Tape', 'scrapbook-shop'),
                    'type' => \Elementor\Controls_Manager::SELECT,
                    'options' => $this->get_washi_tapes_list(),
                    'condition' => [
                        'use_washi_tape' => 'yes',
                        'washi_tape_source' => 'plugin',
                    ],
                ]
            );
        }

        $this->add_control(
            'washi_tape_image',
            [
                'label' => esc_html__('Washi Tape Image', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::MEDIA,
                'condition' => [
                    'use_washi_tape' => 'yes',
                    'washi_tape_source' => 'image',
                ],
            ]
        );

        $this->add_control(
            'washi_tape_rotation',
            [
                'label' => esc_html__('Tape Rotation', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['deg'],
                'range' => [
                    'deg' => [
                        'min' => -15,
                        'max' => 15,
                        'step' => 1,
                    ],
                ],
                'default' => [
                    'unit' => 'deg',
                    'size' => 0,
                ],
                'condition' => [
                    'use_washi_tape' => 'yes',
                ],
            ]
        );

        $this->end_controls_section();

        // Style Section - Card
        $this->start_controls_section(
            'section_style_card',
            [
                'label' => esc_html__('Card Style', 'scrapbook-shop'),
                'tab' => \Elementor\Controls_Manager::TAB_STYLE,
            ]
        );

        $this->add_control(
            'card_background',
            [
                'label' => esc_html__('Background Color', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'default' => '#FAF2F1',
                'selectors' => [
                    '{{WRAPPER}} .scrapbook-product-card' => 'background-color: {{VALUE}};',
                ],
            ]
        );

        $this->add_control(
            'card_border_color',
            [
                'label' => esc_html__('Border Color', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'default' => '#EFE5DA',
                'selectors' => [
                    '{{WRAPPER}} .scrapbook-product-card' => 'border-color: {{VALUE}};',
                ],
            ]
        );

        $this->add_control(
            'card_hover_rotate',
            [
                'label' => esc_html__('Hover Rotation', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['deg'],
                'range' => [
                    'deg' => [
                        'min' => -5,
                        'max' => 5,
                        'step' => 0.5,
                    ],
                ],
                'default' => [
                    'unit' => 'deg',
                    'size' => -1.5,
                ],
                'selectors' => [
                    '{{WRAPPER}} .scrapbook-product-card:hover' => 'transform: translateY(-5px) rotate({{SIZE}}{{UNIT}});',
                ],
            ]
        );

        $this->add_group_control(
            \Elementor\Group_Control_Box_Shadow::get_type(),
            [
                'name' => 'card_shadow',
                'selector' => '{{WRAPPER}} .scrapbook-product-card',
            ]
        );

        $this->end_controls_section();

        // Style Section - Polaroid Frame
        $this->start_controls_section(
            'section_style_polaroid',
            [
                'label' => esc_html__('Polaroid Frame', 'scrapbook-shop'),
                'tab' => \Elementor\Controls_Manager::TAB_STYLE,
            ]
        );

        $this->add_control(
            'polaroid_background',
            [
                'label' => esc_html__('Frame Color', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'default' => '#ffffff',
                'selectors' => [
                    '{{WRAPPER}} .polaroid-frame' => 'background-color: {{VALUE}};',
                ],
            ]
        );

        $this->add_responsive_control(
            'polaroid_padding',
            [
                'label' => esc_html__('Frame Padding', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::DIMENSIONS,
                'size_units' => ['px', '%', 'em'],
                'default' => [
                    'top' => 10,
                    'right' => 10,
                    'bottom' => 25,
                    'left' => 10,
                    'unit' => 'px',
                ],
                'selectors' => [
                    '{{WRAPPER}} .polaroid-frame' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
                ],
            ]
        );

        $this->end_controls_section();

        // Typography
        $this->start_controls_section(
            'section_typography',
            [
                'label' => esc_html__('Typography', 'scrapbook-shop'),
                'tab' => \Elementor\Controls_Manager::TAB_STYLE,
            ]
        );

        $this->add_group_control(
            \Elementor\Group_Control_Typography::get_type(),
            [
                'name' => 'title_typography',
                'label' => esc_html__('Title', 'scrapbook-shop'),
                'selector' => '{{WRAPPER}} .product-title',
            ]
        );

        $this->add_group_control(
            \Elementor\Group_Control_Typography::get_type(),
            [
                'name' => 'price_typography',
                'label' => esc_html__('Price', 'scrapbook-shop'),
                'selector' => '{{WRAPPER}} .price',
            ]
        );

        $this->end_controls_section();
    }

    protected function render()
    {
        $settings = $this->get_settings_for_display();

        // Get product
        $product = $this->get_product($settings);

        if (!$product) {
            if (\Elementor\Plugin::$instance->editor->is_edit_mode()) {
                echo '<div class="elementor-alert elementor-alert-info">' .
                    esc_html__('Please select a product or use this widget in a loop.', 'scrapbook-shop') .
                    '</div>';
            }
            return;
        }

        // Get washi tape
        $washi_tape_html = $this->get_washi_tape_html($settings);

?>
        <div class="scrapbook-product-card">
            <div class="product-card-inner">
                <div class="product-image-wrapper">
                    <?php if ($washi_tape_html): ?>
                        <div class="washi-tape-decoration" style="transform: rotate(<?php echo esc_attr($settings['washi_tape_rotation']['size']); ?>deg);">
                            <?php echo $washi_tape_html; ?>
                        </div>
                    <?php endif; ?>

                    <?php if ($product->is_on_sale() && $settings['show_sale_badge'] === 'yes'): ?>
                        <span class="onsale"><?php esc_html_e('Sale!', 'scrapbook-shop'); ?></span>
                    <?php endif; ?>

                    <div class="polaroid-frame">
                        <a href="<?php echo esc_url($product->get_permalink()); ?>">
                            <?php echo $product->get_image('woocommerce_thumbnail'); ?>
                        </a>
                    </div>
                </div>

                <div class="product-details">
                    <?php if ($settings['show_title'] === 'yes'): ?>
                        <h3 class="product-title">
                            <a href="<?php echo esc_url($product->get_permalink()); ?>">
                                <?php echo esc_html($product->get_name()); ?>
                            </a>
                        </h3>
                    <?php endif; ?>

                    <?php if ($settings['show_rating'] === 'yes'): ?>
                        <?php woocommerce_template_loop_rating(); ?>
                    <?php endif; ?>

                    <?php if ($settings['show_price'] === 'yes'): ?>
                        <div class="price"><?php echo $product->get_price_html(); ?></div>
                    <?php endif; ?>
                </div>

                <?php if ($settings['show_add_to_cart'] === 'yes'): ?>
                    <div class="product-actions">
                        <?php woocommerce_template_loop_add_to_cart(); ?>
                    </div>
                <?php endif; ?>
            </div>
        </div>
<?php
    }

    /**
     * Get product for the widget
     */
    private function get_product($settings)
    {
        global $product;

        // If specific product is selected
        if (!empty($settings['product_id'])) {
            return wc_get_product($settings['product_id']);
        }

        // If in loop, use current product
        if ($product instanceof \WC_Product) {
            return $product;
        }

        // Try to get from post
        $post_id = get_the_ID();
        if ($post_id && get_post_type($post_id) === 'product') {
            return wc_get_product($post_id);
        }

        return false;
    }

    /**
     * Get washi tape HTML
     */
    private function get_washi_tape_html($settings)
    {
        if ($settings['use_washi_tape'] !== 'yes') {
            return '';
        }

        $html = '';

        switch ($settings['washi_tape_source']) {
            case 'plugin':
                if (class_exists('Washi_Tape_DB') && !empty($settings['washi_tape_id'])) {
                    $db = new \Washi_Tape_DB();
                    $tape = $db->get_washi_tape($settings['washi_tape_id']);
                    if ($tape && !empty($tape->svg)) {
                        $html = $tape->svg;
                    }
                }
                break;

            case 'random':
                if (class_exists('Washi_Tape_DB')) {
                    $db = new \Washi_Tape_DB();
                    $tapes = $db->get_all_washi_tapes();
                    if (!empty($tapes)) {
                        $random_tape = $tapes[array_rand($tapes)];
                        $html = $random_tape->svg;
                    }
                }
                break;

            case 'image':
                if (!empty($settings['washi_tape_image']['url'])) {
                    $html = '<img src="' . esc_url($settings['washi_tape_image']['url']) . '" alt="Washi Tape">';
                }
                break;
        }

        return $html;
    }

    /**
     * Get list of products for selector
     */
    private function get_products_list()
    {
        $products = wc_get_products([
            'limit' => -1,
            'orderby' => 'name',
            'order' => 'ASC',
            'return' => 'ids',
        ]);

        $options = ['' => esc_html__('None (Use in Loop)', 'scrapbook-shop')];

        foreach ($products as $product_id) {
            $product = wc_get_product($product_id);
            if ($product) {
                $options[$product_id] = $product->get_name();
            }
        }

        return $options;
    }

    /**
     * Get list of washi tapes from plugin
     */
    private function get_washi_tapes_list()
    {
        $options = ['' => esc_html__('Select Tape', 'scrapbook-shop')];

        if (class_exists('Washi_Tape_DB')) {
            $db = new \Washi_Tape_DB();
            $tapes = $db->get_all_washi_tapes();

            if (!empty($tapes)) {
                foreach ($tapes as $tape) {
                    $id = null;
                    $title = null;

                    if (is_array($tape)) {
                        $id = $tape['id'] ?? ($tape['ID'] ?? ($tape['tape_id'] ?? ($tape['term_id'] ?? null)));
                        $title = $tape['title'] ?? ($tape['name'] ?? ($tape['post_title'] ?? ($tape['label'] ?? null)));
                    } elseif (is_object($tape)) {
                        $id = $tape->id ?? ($tape->ID ?? ($tape->tape_id ?? ($tape->term_id ?? null)));
                        $title = $tape->title ?? ($tape->name ?? ($tape->post_title ?? ($tape->label ?? null)));
                    }

                    if ($id !== null && $title) {
                        $options[$id] = $title;
                    }
                }
            }
        }

        return $options;
    }
}

================
File: scrapbook-shop/widgets/scrapbook-products-grid.php
================
<?php

/**
 * Scrapbook Products Archive Grid Widget
 * 
 * Creates the full archive layout with sorting and grid
 */

namespace Scrapbook_Shop\Widgets;

if (!defined('ABSPATH')) {
    exit;
}

// Bail out if Elementor base class is not loaded yet
if (!class_exists('Elementor\\Widget_Base')) {
    return;
}

class Scrapbook_Products_Grid extends \Elementor\Widget_Base
{

    public function get_name()
    {
        return 'scrapbook_products_grid';
    }

    public function get_title()
    {
        return esc_html__('Scrapbook Products Grid', 'scrapbook-shop');
    }

    public function get_icon()
    {
        return 'eicon-posts-grid';
    }

    public function get_categories()
    {
        return ['woocommerce-elements'];
    }

    protected function register_controls()
    {

        // Query Section
        $this->start_controls_section(
            'section_query',
            [
                'label' => esc_html__('Query', 'scrapbook-shop'),
            ]
        );

        $this->add_control(
            'query_type',
            [
                'label' => esc_html__('Query Type', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SELECT,
                'default' => 'all',
                'options' => [
                    'all' => esc_html__('All Products', 'scrapbook-shop'),
                    'featured' => esc_html__('Featured Products', 'scrapbook-shop'),
                    'sale' => esc_html__('On Sale', 'scrapbook-shop'),
                    'best_selling' => esc_html__('Best Selling', 'scrapbook-shop'),
                    'top_rated' => esc_html__('Top Rated', 'scrapbook-shop'),
                    'category' => esc_html__('By Category', 'scrapbook-shop'),
                    'manual' => esc_html__('Manual Selection', 'scrapbook-shop'),
                ],
            ]
        );

        $this->add_control(
            'product_categories',
            [
                'label' => esc_html__('Categories', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SELECT2,
                'multiple' => true,
                'options' => $this->get_product_categories(),
                'condition' => [
                    'query_type' => 'category',
                ],
            ]
        );

        $this->add_control(
            'products_per_page',
            [
                'label' => esc_html__('Products Per Page', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::NUMBER,
                'default' => 12,
                'min' => 1,
                'max' => 100,
            ]
        );

        $this->add_control(
            'orderby',
            [
                'label' => esc_html__('Order By', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SELECT,
                'default' => 'date',
                'options' => [
                    'date' => esc_html__('Date', 'scrapbook-shop'),
                    'title' => esc_html__('Title', 'scrapbook-shop'),
                    'price' => esc_html__('Price', 'scrapbook-shop'),
                    'popularity' => esc_html__('Popularity', 'scrapbook-shop'),
                    'rating' => esc_html__('Rating', 'scrapbook-shop'),
                    'rand' => esc_html__('Random', 'scrapbook-shop'),
                    'menu_order' => esc_html__('Menu Order', 'scrapbook-shop'),
                ],
            ]
        );

        $this->add_control(
            'order',
            [
                'label' => esc_html__('Order', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SELECT,
                'default' => 'DESC',
                'options' => [
                    'ASC' => esc_html__('Ascending', 'scrapbook-shop'),
                    'DESC' => esc_html__('Descending', 'scrapbook-shop'),
                ],
            ]
        );

        $this->end_controls_section();

        // Layout Section
        $this->start_controls_section(
            'section_layout',
            [
                'label' => esc_html__('Layout', 'scrapbook-shop'),
            ]
        );

        $this->add_control(
            'show_page_title',
            [
                'label' => esc_html__('Show Page Title', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'default' => 'yes',
            ]
        );

        $this->add_control(
            'page_title_text',
            [
                'label' => esc_html__('Custom Title', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::TEXT,
                'default' => esc_html__('Shop', 'scrapbook-shop'),
                'condition' => [
                    'show_page_title' => 'yes',
                ],
            ]
        );

        $this->add_control(
            'show_sorting',
            [
                'label' => esc_html__('Show Sorting Dropdown', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'default' => 'yes',
            ]
        );

        $this->add_control(
            'show_result_count',
            [
                'label' => esc_html__('Show Result Count', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'default' => 'no',
            ]
        );

        $this->add_responsive_control(
            'columns',
            [
                'label' => esc_html__('Columns', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SELECT,
                'default' => '3',
                'tablet_default' => '2',
                'mobile_default' => '1',
                'options' => [
                    '1' => '1',
                    '2' => '2',
                    '3' => '3',
                    '4' => '4',
                    '5' => '5',
                    '6' => '6',
                ],
                'selectors' => [
                    '{{WRAPPER}} .scrapbook-products-grid' => 'grid-template-columns: repeat({{VALUE}}, 1fr);',
                ],
            ]
        );

        $this->add_responsive_control(
            'grid_gap',
            [
                'label' => esc_html__('Grid Gap', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px', 'em', '%'],
                'range' => [
                    'px' => [
                        'min' => 0,
                        'max' => 100,
                    ],
                ],
                'default' => [
                    'size' => 25,
                    'unit' => 'px',
                ],
                'selectors' => [
                    '{{WRAPPER}} .scrapbook-products-grid' => 'gap: {{SIZE}}{{UNIT}};',
                ],
            ]
        );

        $this->add_responsive_control(
            'row_gap',
            [
                'label' => esc_html__('Row Gap', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px', 'em', '%'],
                'range' => [
                    'px' => [
                        'min' => 0,
                        'max' => 160,
                    ],
                ],
                'selectors' => [
                    '{{WRAPPER}} .scrapbook-products-grid' => 'row-gap: {{SIZE}}{{UNIT}};',
                ],
            ]
        );

        $this->add_control(
            'show_pagination',
            [
                'label' => esc_html__('Show Pagination', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'default' => 'yes',
            ]
        );

        $this->end_controls_section();

        // Washi Tape Settings
        $this->start_controls_section(
            'section_washi_tape_settings',
            [
                'label' => esc_html__('Washi Tape Settings', 'scrapbook-shop'),
            ]
        );

        $this->add_control(
            'enable_washi_tape',
            [
                'label' => esc_html__('Enable Washi Tape', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'default' => 'yes',
            ]
        );

        $this->add_control(
            'washi_tape_mode',
            [
                'label' => esc_html__('Washi Tape Mode', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SELECT,
                'default' => 'random',
                'options' => [
                    'random' => esc_html__('Random from Plugin', 'scrapbook-shop'),
                    'specific' => esc_html__('Specific Tape', 'scrapbook-shop'),
                    'rotating' => esc_html__('Rotating Selection', 'scrapbook-shop'),
                ],
                'condition' => [
                    'enable_washi_tape' => 'yes',
                ],
            ]
        );

        if (class_exists('Washi_Tape_DB')) {
            $this->add_control(
                'specific_washi_tape',
                [
                    'label' => esc_html__('Select Washi Tape', 'scrapbook-shop'),
                    'type' => \Elementor\Controls_Manager::SELECT,
                    'options' => $this->get_washi_tapes_list(),
                    'condition' => [
                        'enable_washi_tape' => 'yes',
                        'washi_tape_mode' => 'specific',
                    ],
                ]
            );

            $this->add_control(
                'rotating_washi_tapes',
                [
                    'label' => esc_html__('Select Tapes to Rotate', 'scrapbook-shop'),
                    'type' => \Elementor\Controls_Manager::SELECT2,
                    'multiple' => true,
                    'options' => $this->get_washi_tapes_list(),
                    'condition' => [
                        'enable_washi_tape' => 'yes',
                        'washi_tape_mode' => 'rotating',
                    ],
                ]
            );
        }

        // Tape size & position controls
        $this->add_control(
            'tape_width',
            [
                'label' => esc_html__('Tape Width', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px'],
                'range' => [
                    'px' => [
                        'min' => 60,
                        'max' => 240,
                        'step' => 1,
                    ],
                ],
                'default' => [
                    'unit' => 'px',
                    'size' => 120,
                ],
                'condition' => [
                    'enable_washi_tape' => 'yes',
                ],
            ]
        );

        $this->add_control(
            'tape_height',
            [
                'label' => esc_html__('Tape Height', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px'],
                'range' => [
                    'px' => [
                        'min' => 20,
                        'max' => 100,
                        'step' => 1,
                    ],
                ],
                'default' => [
                    'unit' => 'px',
                    'size' => 45,
                ],
                'condition' => [
                    'enable_washi_tape' => 'yes',
                ],
            ]
        );

        $this->add_control(
            'tape_vertical_offset',
            [
                'label' => esc_html__('Tape Y Position (relative to card)', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px'],
                'range' => [
                    'px' => [
                        'min' => -80,
                        'max' => 10,
                        'step' => 1,
                    ],
                ],
                'default' => [
                    'unit' => 'px',
                    'size' => -20,
                ],
                'condition' => [
                    'enable_washi_tape' => 'yes',
                ],
            ]
        );

        $this->add_control(
            'tape_clearance',
            [
                'label' => esc_html__('Top Clearance (padding at top of card)', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px'],
                'range' => [
                    'px' => [
                        'min' => 0,
                        'max' => 120,
                        'step' => 1,
                    ],
                ],
                'default' => [
                    'unit' => 'px',
                    'size' => 20,
                ],
                'selectors' => [
                    '{{WRAPPER}} .scrapbook-product-card' => 'padding-top: {{SIZE}}{{UNIT}};',
                ],
                'condition' => [
                    'enable_washi_tape' => 'yes',
                ],
            ]
        );

        $this->add_control(
            'tape_horizontal_offset',
            [
                'label' => esc_html__('Horizontal Offset', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px'],
                'range' => [
                    'px' => [
                        'min' => -120,
                        'max' => 120,
                        'step' => 1,
                    ],
                ],
                'default' => [
                    'unit' => 'px',
                    'size' => 0,
                ],
                'condition' => [
                    'enable_washi_tape' => 'yes',
                ],
            ]
        );

        // Add vertical slider immediately after horizontal
        $this->add_control(
            'tape_vertical_offset_ui',
            [
                'label' => esc_html__('Vertical Offset (Y)', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px'],
                'range' => [
                    'px' => [
                        'min' => -120,
                        'max' => 80,
                        'step' => 1,
                    ],
                ],
                'default' => [
                    'unit' => 'px',
                    'size' => -20,
                ],
                'condition' => [
                    'enable_washi_tape' => 'yes',
                ],
            ]
        );

        $this->add_control(
            'randomize_tape_rotation',
            [
                'label' => esc_html__('Randomize Tape Angles', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'default' => 'yes',
                'condition' => [
                    'enable_washi_tape' => 'yes',
                ],
            ]
        );

        $this->add_control(
            'tape_rotation_fixed',
            [
                'label' => esc_html__('Tape Rotation', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['deg'],
                'range' => [
                    'deg' => [
                        'min' => -45,
                        'max' => 45,
                        'step' => 1,
                    ],
                ],
                'default' => [
                    'unit' => 'deg',
                    'size' => -10,
                ],
                'condition' => [
                    'enable_washi_tape' => 'yes',
                    'randomize_tape_rotation!' => 'yes',
                ],
            ]
        );

        $this->add_control(
            'tape_rotation_range',
            [
                'label' => esc_html__('Rotation Range', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['deg'],
                'range' => [
                    'deg' => [
                        'min' => 0,
                        'max' => 30,
                        'step' => 1,
                    ],
                ],
                'default' => [
                    'unit' => 'deg',
                    'size' => 10,
                ],
                'condition' => [
                    'enable_washi_tape' => 'yes',
                    'randomize_tape_rotation' => 'yes',
                ],
            ]
        );

        $this->end_controls_section();

        // Style Section - Archive Header
        $this->start_controls_section(
            'section_style',
            [
                'label' => esc_html__('Style', 'scrapbook-shop'),
                'tab' => \Elementor\Controls_Manager::TAB_STYLE,
            ]
        );

        $this->add_group_control(
            \Elementor\Group_Control_Typography::get_type(),
            [
                'name' => 'page_title_typography',
                'label' => esc_html__('Page Title Typography', 'scrapbook-shop'),
                'selector' => '{{WRAPPER}} .scrapbook-archive-title',
                'condition' => [
                    'show_page_title' => 'yes',
                ],
            ]
        );

        $this->add_control(
            'page_title_color',
            [
                'label' => esc_html__('Page Title Color', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'default' => '#2C2C2C',
                'selectors' => [
                    '{{WRAPPER}} .scrapbook-archive-title' => 'color: {{VALUE}};',
                ],
                'condition' => [
                    'show_page_title' => 'yes',
                ],
            ]
        );

        $this->end_controls_section();

        // Style Section - Product Card
        $this->start_controls_section(
            'section_style_card',
            [
                'label' => esc_html__('Product Card', 'scrapbook-shop'),
                'tab' => \Elementor\Controls_Manager::TAB_STYLE,
            ]
        );

        $this->add_control(
            'card_background_color',
            [
                'label' => esc_html__('Card Background', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'default' => '#FAF2F1',
                'selectors' => [
                    '{{WRAPPER}} .scrapbook-product-card' => 'background-color: {{VALUE}};',
                ],
            ]
        );

        $this->add_control(
            'card_border_color',
            [
                'label' => esc_html__('Card Border Color', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'default' => '#EFE5DA',
                'selectors' => [
                    '{{WRAPPER}} .scrapbook-product-card' => 'border-color: {{VALUE}};',
                ],
            ]
        );

        $this->add_control(
            'card_border_radius',
            [
                'label' => esc_html__('Card Border Radius', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px'],
                'range' => [
                    'px' => [
                        'min' => 0,
                        'max' => 30,
                        'step' => 1,
                    ],
                ],
                'default' => [
                    'unit' => 'px',
                    'size' => 4,
                ],
                'selectors' => [
                    '{{WRAPPER}} .scrapbook-product-card' => 'border-radius: {{SIZE}}{{UNIT}};',
                ],
            ]
        );

        $this->add_group_control(
            \Elementor\Group_Control_Box_Shadow::get_type(),
            [
                'name' => 'card_box_shadow',
                'selector' => '{{WRAPPER}} .scrapbook-product-card',
            ]
        );

        $this->add_group_control(
            \Elementor\Group_Control_Typography::get_type(),
            [
                'name' => 'card_title_typography',
                'label' => esc_html__('Title Typography', 'scrapbook-shop'),
                'selector' => '{{WRAPPER}} .scrapbook-product-card .product-title',
            ]
        );

        $this->add_control(
            'card_title_color',
            [
                'label' => esc_html__('Title Color', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'selectors' => [
                    '{{WRAPPER}} .scrapbook-product-card .product-title, {{WRAPPER}} .scrapbook-product-card .product-title a' => 'color: {{VALUE}};',
                ],
            ]
        );

        $this->add_group_control(
            \Elementor\Group_Control_Typography::get_type(),
            [
                'name' => 'card_price_typography',
                'label' => esc_html__('Price Typography', 'scrapbook-shop'),
                'selector' => '{{WRAPPER}} .scrapbook-product-card .price',
            ]
        );

        $this->add_control(
            'card_price_color',
            [
                'label' => esc_html__('Price Color', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'selectors' => [
                    '{{WRAPPER}} .scrapbook-product-card .price' => 'color: {{VALUE}};',
                ],
            ]
        );

        $this->end_controls_section();

        // Style Section - Add to Cart Button
        $this->start_controls_section(
            'section_style_button',
            [
                'label' => esc_html__('Add To Cart Button', 'scrapbook-shop'),
                'tab' => \Elementor\Controls_Manager::TAB_STYLE,
            ]
        );

        $this->add_group_control(
            \Elementor\Group_Control_Typography::get_type(),
            [
                'name' => 'button_typography',
                'selector' => '{{WRAPPER}} .scrapbook-product-card .product-actions .button, {{WRAPPER}} .scrapbook-product-card .product-actions .add_to_cart_button',
            ]
        );

        $this->add_control(
            'button_text_color',
            [
                'label' => esc_html__('Text Color', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'selectors' => [
                    '{{WRAPPER}} .scrapbook-product-card .product-actions .button, {{WRAPPER}} .scrapbook-product-card .product-actions .add_to_cart_button' => 'color: {{VALUE}};',
                ],
            ]
        );

        $this->add_control(
            'button_bg_color',
            [
                'label' => esc_html__('Background Color', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'selectors' => [
                    '{{WRAPPER}} .scrapbook-product-card .product-actions .button, {{WRAPPER}} .scrapbook-product-card .product-actions .add_to_cart_button' => 'background-color: {{VALUE}}; border-color: {{VALUE}};',
                ],
            ]
        );

        $this->add_control(
            'button_bg_color_hover',
            [
                'label' => esc_html__('Background Hover', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'selectors' => [
                    '{{WRAPPER}} .scrapbook-product-card .product-actions .button:hover, {{WRAPPER}} .scrapbook-product-card .product-actions .add_to_cart_button:hover' => 'background-color: {{VALUE}}; border-color: {{VALUE}};',
                ],
            ]
        );

        $this->add_control(
            'button_text_color_hover',
            [
                'label' => esc_html__('Text Hover', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'selectors' => [
                    '{{WRAPPER}} .scrapbook-product-card .product-actions .button:hover, {{WRAPPER}} .scrapbook-product-card .product-actions .add_to_cart_button:hover' => 'color: {{VALUE}};',
                ],
            ]
        );

        $this->add_control(
            'button_border_radius',
            [
                'label' => esc_html__('Border Radius', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px'],
                'range' => [
                    'px' => [
                        'min' => 0,
                        'max' => 50,
                        'step' => 1,
                    ],
                ],
                'default' => [
                    'unit' => 'px',
                    'size' => 4,
                ],
                'selectors' => [
                    '{{WRAPPER}} .scrapbook-product-card .product-actions .button, {{WRAPPER}} .scrapbook-product-card .product-actions .add_to_cart_button' => 'border-radius: {{SIZE}}{{UNIT}};',
                ],
            ]
        );

        $this->add_responsive_control(
            'button_padding',
            [
                'label' => esc_html__('Padding', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::DIMENSIONS,
                'size_units' => ['px', 'em', '%'],
                'selectors' => [
                    '{{WRAPPER}} .scrapbook-product-card .product-actions .button, {{WRAPPER}} .scrapbook-product-card .product-actions .add_to_cart_button' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
                ],
            ]
        );

        $this->end_controls_section();
    }

    protected function render()
    {
        $settings = $this->get_settings_for_display();

        // Determine dynamic title on archive pages when default title is used
        $page_title_text = isset($settings['page_title_text']) ? $settings['page_title_text'] : '';
        $is_cat_archive = (is_tax('product_cat') || (function_exists('is_product_category') && is_product_category()));
        if ($settings['show_page_title'] === 'yes' && $is_cat_archive) {
            // Only override when user hasn't customized the title (i.e., it is still the default "Shop")
            $default_title = esc_html__('Shop', 'scrapbook-shop');
            if ($page_title_text === 'Shop' || $page_title_text === $default_title || $page_title_text === '') {
                $page_title_text = single_term_title('', false);
            }
        }

        // Setup query
        $query_args = $this->get_query_args($settings);
        $products = new \WP_Query($query_args);

?>
        <div class="scrapbook-products-archive">
            <?php if ($settings['show_page_title'] === 'yes' || $settings['show_sorting'] === 'yes'): ?>
                <div class="scrapbook-archive-header">
                    <?php if ($settings['show_page_title'] === 'yes'): ?>
                        <h1 class="scrapbook-archive-title">
                            <?php echo esc_html($page_title_text); ?>
                        </h1>
                    <?php endif; ?>

                    <?php if ($settings['show_sorting'] === 'yes'): ?>
                        <div class="scrapbook-sorting">
                            <?php $this->render_sorting_dropdown(); ?>
                        </div>
                    <?php endif; ?>
                </div>
            <?php endif; ?>

            <?php if ($settings['show_result_count'] === 'yes'): ?>
                <div class="scrapbook-result-count">
                    <?php
                    $total = $products->found_posts;
                    $per_page = $settings['products_per_page'];
                    $current = max(1, get_query_var('paged'));
                    $showing_start = ($current - 1) * $per_page + 1;
                    $showing_end = min($current * $per_page, $total);

                    printf(
                        esc_html__('Showing %1$d–%2$d of %3$d results', 'scrapbook-shop'),
                        $showing_start,
                        $showing_end,
                        $total
                    );
                    ?>
                </div>
            <?php endif; ?>

            <?php if ($products->have_posts()): ?>
                <div class="scrapbook-products-grid">
                    <?php
                    $index = 0;
                    while ($products->have_posts()):
                        $products->the_post();
                        global $product;

                        // Get washi tape for this product
                        $washi_tape_html = $this->get_washi_tape_for_product($settings, $index);
                        if (!empty($washi_tape_html)) {
                            $washi_tape_html = $this->sanitize_washi_svg($washi_tape_html);
                        }
                        $rotation = $this->get_rotation_for_product($settings, $index);
                        if (empty($settings['randomize_tape_rotation']) || $settings['randomize_tape_rotation'] !== 'yes') {
                            $rotation = isset($settings['tape_rotation_fixed']['size']) ? (int) $settings['tape_rotation_fixed']['size'] : 0;
                        }

                        list($svg_w, $svg_h) = $this->get_svg_dimensions($washi_tape_html);
                        $tape_width = isset($settings['tape_width']['size']) ? (int) $settings['tape_width']['size'] : ($svg_w ?: 120);
                        $tape_height = isset($settings['tape_height']['size']) ? (int) $settings['tape_height']['size'] : ($svg_h ?: 45);
                        $tape_top = isset($settings['tape_vertical_offset_ui']['size']) ? (int) $settings['tape_vertical_offset_ui']['size'] : (isset($settings['tape_vertical_offset']['size']) ? (int) $settings['tape_vertical_offset']['size'] : -20);
                        $tape_left_offset = isset($settings['tape_horizontal_offset']['size']) ? (int) $settings['tape_horizontal_offset']['size'] : 0;

                    ?>
                        <div class="scrapbook-grid-item">
                            <?php
                            // Always use our inline product card to ensure washi tape renders consistently
                            $this->render_product_card($product, $washi_tape_html, $rotation, $tape_width, $tape_height, $tape_top, $tape_left_offset);
                            ?>
                        </div>
                    <?php
                        $index++;
                    endwhile;
                    ?>
                </div>

                <?php if ($settings['show_pagination'] === 'yes'): ?>
                    <div class="scrapbook-pagination">
                        <?php
                        echo paginate_links([
                            'total' => $products->max_num_pages,
                            'current' => max(1, get_query_var('paged')),
                            'prev_text' => '&laquo;',
                            'next_text' => '&raquo;',
                        ]);
                        ?>
                    </div>
                <?php endif; ?>

            <?php else: ?>
                <div class="scrapbook-no-products">
                    <?php esc_html_e('No products found.', 'scrapbook-shop'); ?>
                </div>
            <?php endif; ?>

            <?php wp_reset_postdata(); ?>
        </div>
    <?php
    }

    /**
     * Render individual product card
     */
    private function render_product_card($product, $washi_tape_html, $rotation, $tape_width, $tape_height, $tape_top, $tape_left_offset)
    {
    ?>
        <div class="scrapbook-product-card">
            <?php if (!empty($washi_tape_html)): ?>
                <div class="washi-tape-decoration" style="left: calc(50% + <?php echo esc_attr($tape_left_offset); ?>px); transform: translateX(-50%) rotate(<?php echo esc_attr($rotation); ?>deg); width: <?php echo esc_attr($tape_width); ?>px; height: <?php echo esc_attr($tape_height); ?>px; top: <?php echo esc_attr($tape_top); ?>px;">
                    <?php echo $washi_tape_html; ?>
                </div>
            <?php endif; ?>
            <div class="product-card-inner">
                <div class="product-image-wrapper">

                    <?php if ($product->is_on_sale()): ?>
                        <span class="onsale"><?php esc_html_e('Sale!', 'scrapbook-shop'); ?></span>
                    <?php endif; ?>

                    <div class="polaroid-frame">
                        <a href="<?php echo esc_url($product->get_permalink()); ?>">
                            <?php echo $product->get_image('woocommerce_thumbnail'); ?>
                        </a>
                    </div>
                </div>

                <div class="product-details">
                    <h3 class="product-title">
                        <a href="<?php echo esc_url($product->get_permalink()); ?>">
                            <?php echo esc_html($product->get_name()); ?>
                        </a>
                    </h3>

                    <?php woocommerce_template_loop_rating(); ?>

                    <div class="price"><?php echo $product->get_price_html(); ?></div>
                </div>

                <div class="product-actions">
                    <?php woocommerce_template_loop_add_to_cart(); ?>
                </div>
            </div>
        </div>
    <?php
    }

    /**
     * Get query arguments
     */
    private function get_query_args($settings)
    {
        $args = [
            'post_type' => 'product',
            'posts_per_page' => $settings['products_per_page'],
            'orderby' => $settings['orderby'],
            'order' => $settings['order'],
            'paged' => max(1, get_query_var('paged')),
        ];

        // Auto-scope to current product category archive when applicable
        // Works on URLs like /product-category/{slug}/ and Elementor archive templates
        $is_category_archive = (is_tax('product_cat') || (function_exists('is_product_category') && is_product_category()));
        if ($is_category_archive) {
            $explicit_category_filter = (
                isset($settings['query_type']) && $settings['query_type'] === 'category' &&
                !empty($settings['product_categories'])
            );
            // If user didn't explicitly pick categories, scope to the current archive term
            if (!$explicit_category_filter) {
                $queried = get_queried_object();
                $current_term_id = $queried && isset($queried->term_id) ? (int) $queried->term_id : 0;
                if ($current_term_id > 0) {
                    $args['tax_query'][] = [
                        'taxonomy' => 'product_cat',
                        'field' => 'term_id',
                        'terms' => [$current_term_id],
                        'include_children' => true,
                    ];
                }
            }
        }

        // Handle different query types
        switch ($settings['query_type']) {
            case 'featured':
                $args['tax_query'][] = [
                    'taxonomy' => 'product_visibility',
                    'field' => 'name',
                    'terms' => 'featured',
                ];
                break;

            case 'sale':
                $args['post__in'] = wc_get_product_ids_on_sale();
                break;

            case 'best_selling':
                $args['meta_key'] = 'total_sales';
                $args['orderby'] = 'meta_value_num';
                break;

            case 'top_rated':
                $args['meta_key'] = '_wc_average_rating';
                $args['orderby'] = 'meta_value_num';
                break;

            case 'category':
                if (!empty($settings['product_categories'])) {
                    $args['tax_query'][] = [
                        'taxonomy' => 'product_cat',
                        'field' => 'term_id',
                        'terms' => $settings['product_categories'],
                    ];
                }
                break;
        }

        return $args;
    }

    /**
     * Get washi tape HTML for a product
     */
    private function get_washi_tape_for_product($settings, $index)
    {
        if ($settings['enable_washi_tape'] !== 'yes' || !class_exists('Washi_Tape_DB')) {
            return '';
        }

        $db = new \Washi_Tape_DB();
        $tape = null;

        switch ($settings['washi_tape_mode']) {
            case 'specific':
                if (!empty($settings['specific_washi_tape'])) {
                    $tape = $db->get_washi_tape($settings['specific_washi_tape']);
                }
                break;

            case 'rotating':
                if (!empty($settings['rotating_washi_tapes'])) {
                    $tape_ids = $settings['rotating_washi_tapes'];
                    $tape_id = $tape_ids[$index % count($tape_ids)];
                    $tape = $db->get_washi_tape($tape_id);
                }
                break;

            case 'random':
            default:
                $tapes = $db->get_all_washi_tapes();
                if (!empty($tapes)) {
                    $tape = $tapes[array_rand($tapes)];
                }
                break;
        }

        return ($tape && !empty($tape->svg)) ? $tape->svg : '';
    }

    /**
     * Get rotation for a product
     */
    private function get_rotation_for_product($settings, $index)
    {
        if ($settings['randomize_tape_rotation'] !== 'yes') {
            return 0;
        }

        $range = $settings['tape_rotation_range']['size'];
        return rand(-$range, $range);
    }

    /**
     * Clean up SVG markup stored in DB to ensure it renders
     */
    private function sanitize_washi_svg($svg)
    {
        if (!is_string($svg) || $svg === '') {
            return '';
        }

        // Normalize quotes and whitespace and strip inline styles that can conflict
        $clean = str_replace(['\\&quot;', '&quot;', '\\"'], '"', $svg);
        $clean = preg_replace('/\s+/', ' ', $clean);
        $clean = str_replace(['" >', '"  >'], '" >', $clean);
        $clean = str_replace(['> <', '>  <'], '><', $clean);
        // Remove inline style attributes to avoid absolute positioning leaking from saved preview
        $clean = preg_replace('/\sstyle="[^"]*"/i', '', $clean);

        // Ensure SVG has xmlns attribute
        if (strpos($clean, '<svg') !== false && strpos($clean, 'xmlns="http://www.w3.org/2000/svg"') === false) {
            $clean = preg_replace('/<svg\b/', '<svg xmlns="http://www.w3.org/2000/svg"', $clean, 1);
        }

        return $clean;
    }

    /**
     * Extract width/height from SVG markup if present
     *
     * @return array [width:int|null, height:int|null]
     */
    private function get_svg_dimensions($svg)
    {
        $width = null;
        $height = null;
        if (!is_string($svg)) {
            return [null, null];
        }
        if (preg_match('/\bwidth="(\d+(?:\.\d+)?)"/i', $svg, $m)) {
            $width = (int) round((float) $m[1]);
        }
        if (preg_match('/\bheight="(\d+(?:\.\d+)?)"/i', $svg, $m)) {
            $height = (int) round((float) $m[1]);
        }
        return [$width, $height];
    }

    /**
     * Render sorting dropdown
     */
    private function render_sorting_dropdown()
    {
    ?>
        <form class="scrapbook-ordering" method="get">
            <select name="orderby" class="orderby">
                <option value="menu_order"><?php esc_html_e('Default sorting', 'scrapbook-shop'); ?></option>
                <option value="popularity"><?php esc_html_e('Sort by popularity', 'scrapbook-shop'); ?></option>
                <option value="rating"><?php esc_html_e('Sort by average rating', 'scrapbook-shop'); ?></option>
                <option value="date"><?php esc_html_e('Sort by latest', 'scrapbook-shop'); ?></option>
                <option value="price"><?php esc_html_e('Sort by price: low to high', 'scrapbook-shop'); ?></option>
                <option value="price-desc"><?php esc_html_e('Sort by price: high to low', 'scrapbook-shop'); ?></option>
            </select>
            <?php wc_query_string_form_fields(null, ['orderby', 'submit']); ?>
        </form>
<?php
    }

    /**
     * Get product categories for selector
     */
    private function get_product_categories()
    {
        $categories = get_terms([
            'taxonomy' => 'product_cat',
            'hide_empty' => false,
        ]);

        $options = [];
        foreach ($categories as $category) {
            $options[$category->term_id] = $category->name;
        }

        return $options;
    }

    /**
     * Get washi tapes list
     */
    private function get_washi_tapes_list()
    {
        $options = ['' => esc_html__('Select Tape', 'scrapbook-shop')];

        if (class_exists('Washi_Tape_DB')) {
            $db = new \Washi_Tape_DB();
            $tapes = $db->get_all_washi_tapes();

            if (!empty($tapes)) {
                foreach ($tapes as $tape) {
                    // Support both object and array shapes and different field names
                    $id = null;
                    $title = null;

                    if (is_array($tape)) {
                        $id = $tape['id'] ?? ($tape['ID'] ?? ($tape['tape_id'] ?? ($tape['term_id'] ?? null)));
                        $title = $tape['title'] ?? ($tape['name'] ?? ($tape['post_title'] ?? ($tape['label'] ?? null)));
                    } elseif (is_object($tape)) {
                        $id = $tape->id ?? ($tape->ID ?? ($tape->tape_id ?? ($tape->term_id ?? null)));
                        $title = $tape->title ?? ($tape->name ?? ($tape->post_title ?? ($tape->label ?? null)));
                    }

                    if ($id !== null && $title) {
                        $options[$id] = $title;
                    }
                }
            }
        }

        return $options;
    }
}

================
File: scrapbook-shop/repomix-output.md
================
This file is a merged representation of the entire codebase, combined into a single document by Repomix.

# File Summary

## Purpose
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

## File Format
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  a. A header with the file path (## File: path/to/file)
  b. The full contents of the file in a code block

## Usage Guidelines
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

## Notes
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)

# Directory Structure
```
assets/
  css/
    scrapbook-shop.css
widgets/
  scrapbook-product-card.php
  scrapbook-products-grid.php
scrapbook-shop.php
```

# Files

## File: assets/css/scrapbook-shop.css
```css
/**
 * Scrapbook Shop for Elementor - Main Styles
 * Replicates the polaroid/scrapbook aesthetic from the original theme
 */

/* ========================================
   CSS Custom Properties (Variables)
   ======================================== */
:root {
  /* Colors - matching original theme */
  --scrapbook-primary: #2C2C2C;
  --scrapbook-secondary: #B58C67;
  --scrapbook-accent: #91A4BA;
  --scrapbook-text: #484848;
  --scrapbook-text-light: #7D7D7D;
  --scrapbook-text-lighter: #5D5D5D;
  
  /* Background Colors */
  --scrapbook-bg-card: #FAF2F1;
  --scrapbook-bg-card-hover: #F5EDE8;
  --scrapbook-bg-white: #ffffff;
  
  /* Border Colors */
  --scrapbook-border-primary: #EFE5DA;
  --scrapbook-border-secondary: #DDCABE;
  
  /* Shadows */
  --scrapbook-shadow-sm: 0 2px 4px rgba(0, 0, 0, 0.05);
  --scrapbook-shadow-md: 0 4px 8px rgba(0, 0, 0, 0.07);
  --scrapbook-shadow-lg: 0 10px 20px rgba(0, 0, 0, 0.12);
  --scrapbook-shadow-focus: 0 0 0 3px rgba(181, 140, 103, 0.1);
  
  /* Spacing */
  --scrapbook-space-xs: clamp(0.25rem, 1vw, 0.5rem);
  --scrapbook-space-sm: clamp(0.5rem, 2vw, 1rem);
  --scrapbook-space-md: clamp(1rem, 3vw, 2rem);
  --scrapbook-space-lg: clamp(2rem, 5vw, 3rem);
  --scrapbook-space-xl: clamp(3rem, 8vw, 5rem);
}

/* ========================================
   ARCHIVE HEADER
   ======================================== */
.scrapbook-archive-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: var(--scrapbook-space-md);
  margin-bottom: var(--scrapbook-space-lg);
  padding: var(--scrapbook-space-md) 0;
  border-bottom: none;
}

.scrapbook-archive-title {
  font-family: 'Meloso', sans-serif;
  font-size: clamp(2rem, 6vw, 3.5rem);
  color: var(--scrapbook-primary);
  font-weight: 400;
  margin: 0;
  padding: 0;
  line-height: 1.2;
  letter-spacing: -0.02em;
  flex: 1;
}

.scrapbook-sorting {
  flex-shrink: 0;
}

/* Mobile header layout */
@media (max-width: 767px) {
  .scrapbook-archive-header {
    flex-direction: column;
    align-items: flex-start;
    gap: var(--scrapbook-space-sm);
  }
  
  .scrapbook-sorting {
    align-self: flex-end;
  }
}

/* ========================================
   PRODUCTS GRID
   ======================================== */
.scrapbook-products-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 75px 25px;
  padding: 0;
  margin: 25px 0 30px 0;
  width: 100%;
  box-sizing: border-box;
}

/* Responsive grid */
@media (max-width: 480px) {
  .scrapbook-products-grid {
    grid-template-columns: 1fr;
    gap: 35px 10px;
    margin: 15px 0 20px 0;
  }
}

@media (min-width: 481px) and (max-width: 767px) {
  .scrapbook-products-grid {
    grid-template-columns: 1fr;
    gap: 45px 15px;
  }
}

@media (min-width: 768px) and (max-width: 991px) {
  .scrapbook-products-grid {
    grid-template-columns: repeat(2, 1fr);
    gap: 60px 20px;
  }
}

@media (min-width: 1400px) {
  .scrapbook-products-grid {
    max-width: 1200px;
    margin-left: auto;
    margin-right: auto;
  }
}

/* ========================================
   PRODUCT CARD
   ======================================== */
.scrapbook-product-card {
  background-color: var(--scrapbook-bg-card);
  border: 1px solid var(--scrapbook-border-primary);
  border-radius: 4px;
  padding: 0 15px 15px 15px;
  text-align: center;
  box-shadow: var(--scrapbook-shadow-md);
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1), 
              box-shadow 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  overflow: visible;
  height: 100%;
  min-height: 400px;
}

.scrapbook-product-card-inner,
.product-card-inner {
  display: flex;
  flex-direction: column;
  height: 100%;
  width: 100%;
}

/* Hover effects */
@media (hover: hover) and (pointer: fine) {
  .scrapbook-product-card:hover {
    transform: translateY(-5px) rotate(-1.5deg);
    box-shadow: var(--scrapbook-shadow-lg);
  }
}

/* Touch feedback for mobile */
@media (hover: none) and (pointer: coarse) {
  .scrapbook-product-card:active {
    transform: scale(0.98);
    transition: transform 0.1s ease;
  }
}

/* ========================================
   PRODUCT IMAGE & WASHI TAPE
   ======================================== */
.product-image-wrapper {
  position: relative;
  margin-bottom: 20px;
  padding-top: 20px;
}

/* Polaroid Frame */
.polaroid-frame {
  position: relative;
  background-color: var(--scrapbook-bg-white);
  padding: 10px;
  padding-bottom: 25px;
  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
  border-radius: 3px;
  margin-left: auto;
  margin-right: auto;
  max-width: calc(100% - 20px);
  z-index: 1;
}

/* Washi Tape Decoration */
.washi-tape-decoration {
  position: absolute;
  top: -30px;
  left: 50%;
  transform: translateX(-50%) rotate(0deg);
  width: 120px;
  height: 45px;
  z-index: 2;
  filter: drop-shadow(0 2px 3px rgba(0, 0, 0, 0.15));
}

.washi-tape-decoration svg {
  width: 100%;
  height: 100%;
}

/* Enhanced mobile washi tape sizing */
@media (max-width: 480px) {
  .washi-tape-decoration {
    width: 110px;
    height: 44px;
    top: -32px;
  }
}

/* Product image inside polaroid */
.polaroid-frame img {
  max-width: 100%;
  height: auto;
  display: block;
  border-radius: 2px;
  object-fit: cover;
  width: 100%;
}

/* ========================================
   SALE BADGE
   ======================================== */
.scrapbook-product-card .onsale {
  position: absolute;
  top: 5px;
  right: 5px;
  background-color: #F8C885;
  color: var(--scrapbook-bg-white);
  width: 20%;
  max-width: 60px;
  min-width: 40px;
  aspect-ratio: 1 / 1;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 11px;
  z-index: 3;
  line-height: 1;
  font-weight: bold;
  text-transform: uppercase;
}

/* ========================================
   PRODUCT DETAILS
   ======================================== */
.product-details {
  margin-bottom: 15px;
  flex-grow: 1;
  padding: 0 5px;
}

.product-title {
  font-size: clamp(0.9rem, 3vw, 1rem);
  color: var(--scrapbook-text);
  margin-bottom: 8px;
  font-weight: 600;
  line-height: 1.3;
  word-wrap: break-word;
  hyphens: auto;
}

.product-title a {
  color: var(--scrapbook-text);
  text-decoration: none;
  display: block;
  padding: 4px;
  transition: color 0.2s ease;
}

.product-title a:hover,
.product-title a:focus {
  color: var(--scrapbook-secondary);
  outline: none;
}

.product-title a:focus-visible {
  outline: 2px solid var(--scrapbook-secondary);
  outline-offset: 2px;
}

/* Price styling */
.product-details .price {
  font-size: 0.95rem;
  color: #000000;
  font-weight: bold;
  display: block;
  margin-bottom: 8px;
}

/* Struck-through original prices */
.product-details .price del {
  color: #666666;
  font-weight: normal;
}

/* Star rating */
.product-details .star-rating {
  margin: 0 auto 10px auto;
}

/* ========================================
   PRODUCT ACTIONS
   ======================================== */
.product-actions {
  margin-top: auto;
  padding: 0 10px;
}

.product-actions .button,
.product-actions .add_to_cart_button {
  background-color: var(--scrapbook-accent);
  color: var(--scrapbook-bg-white);
  text-transform: capitalize;
  padding: 10px 18px;
  text-decoration: none;
  border-radius: 4px;
  display: inline-block;
  font-size: 0.9rem;
  border: 1px solid var(--scrapbook-border-secondary);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  font-weight: 500;
  box-shadow: var(--scrapbook-shadow-sm);
  line-height: normal;
  margin-bottom: 0;
  min-height: 44px;
  width: 100%;
  max-width: 250px;
  cursor: pointer;
}

/* Hover effects */
@media (hover: hover) and (pointer: fine) {
  .product-actions .button:hover,
  .product-actions .add_to_cart_button:hover {
    background-color: #DDB0A7;
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    color: var(--scrapbook-bg-white);
  }
}

/* Focus styles */
.product-actions .button:focus,
.product-actions .add_to_cart_button:focus {
  outline: none;
  box-shadow: var(--scrapbook-shadow-focus), var(--scrapbook-shadow-sm);
}

.product-actions .button:focus-visible,
.product-actions .add_to_cart_button:focus-visible {
  outline: 2px solid var(--scrapbook-secondary);
  outline-offset: 2px;
}

/* Touch feedback */
@media (hover: none) and (pointer: coarse) {
  .product-actions .button:active,
  .product-actions .add_to_cart_button:active {
    background-color: #DDB0A7;
    transform: scale(0.98);
  }
}

.product-actions .added_to_cart {
  display: flex;
  align-items: center;
  justify-content: center;
  margin-top: 5px;
  font-size: 0.85rem;
  color: var(--scrapbook-secondary);
  text-decoration: none;
  min-height: 44px;
  transition: color 0.2s ease;
}

.product-actions .added_to_cart:hover,
.product-actions .added_to_cart:focus {
  color: var(--scrapbook-text);
}

/* ========================================
   SORTING DROPDOWN
   ======================================== */
.scrapbook-ordering {
  margin: 0;
  padding: 0;
  position: relative;
  z-index: 5;
}

.scrapbook-ordering::before {
  content: "Sort by:";
  font-family: 'Meloso', sans-serif;
  font-size: 1.1rem;
  color: var(--scrapbook-text-light);
  margin-right: 12px;
  font-weight: 400;
}

.scrapbook-ordering select {
  background-color: var(--scrapbook-bg-card);
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%23B58C67' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
  background-position: right 12px center;
  background-repeat: no-repeat;
  background-size: 16px;
  border: 2px solid var(--scrapbook-border-primary);
  border-radius: 12px;
  padding: 12px 45px 12px 16px;
  color: var(--scrapbook-text-lighter);
  font-size: 1rem;
  font-family: inherit;
  font-weight: 500;
  box-shadow: 0 3px 8px rgba(181, 140, 103, 0.15), inset 0 1px 0 rgba(255, 255, 255, 0.7);
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  appearance: none;
  min-height: 48px;
  min-width: 180px;
  transform: rotate(-0.5deg);
}

.scrapbook-ordering select:hover {
  border-color: var(--scrapbook-border-secondary);
  background-color: var(--scrapbook-bg-card-hover);
  box-shadow: 0 4px 12px rgba(181, 140, 103, 0.2), inset 0 1px 0 rgba(255, 255, 255, 0.9);
  transform: rotate(0deg) translateY(-1px);
}

.scrapbook-ordering select:focus {
  outline: none;
  border-color: var(--scrapbook-secondary);
  box-shadow: var(--scrapbook-shadow-focus), 0 4px 12px rgba(181, 140, 103, 0.25);
  transform: rotate(0deg);
}

.scrapbook-ordering select:focus-visible {
  outline: 2px solid var(--scrapbook-secondary);
  outline-offset: 2px;
}

/* ========================================
   PAGINATION
   ======================================== */
.scrapbook-pagination {
  margin-top: var(--scrapbook-space-lg);
  text-align: center;
}

.scrapbook-pagination .page-numbers {
  display: inline-block;
  padding: 8px 12px;
  margin: 0 4px;
  background-color: var(--scrapbook-bg-card);
  border: 1px solid var(--scrapbook-border-primary);
  border-radius: 4px;
  color: var(--scrapbook-text);
  text-decoration: none;
  transition: all 0.2s ease;
}

.scrapbook-pagination .page-numbers:hover {
  background-color: var(--scrapbook-secondary);
  color: var(--scrapbook-bg-white);
  border-color: var(--scrapbook-secondary);
}

.scrapbook-pagination .page-numbers.current {
  background-color: var(--scrapbook-accent);
  color: var(--scrapbook-bg-white);
  border-color: var(--scrapbook-accent);
}

/* ========================================
   NO PRODUCTS MESSAGE
   ======================================== */
.scrapbook-no-products {
  text-align: center;
  padding: var(--scrapbook-space-xl);
  color: var(--scrapbook-text-light);
  font-size: 1.1rem;
}

/* ========================================
   RESULT COUNT
   ======================================== */
.scrapbook-result-count {
  color: var(--scrapbook-text-light);
  font-size: 0.9rem;
  margin-bottom: var(--scrapbook-space-md);
}

/* ========================================
   LOADING STATE
   ======================================== */
.scrapbook-loading {
  text-align: center;
  padding: var(--scrapbook-space-lg);
}

.scrapbook-loading::after {
  content: '';
  display: inline-block;
  width: 30px;
  height: 30px;
  border: 3px solid var(--scrapbook-border-primary);
  border-top-color: var(--scrapbook-secondary);
  border-radius: 50%;
  animation: scrapbook-spin 1s linear infinite;
}

@keyframes scrapbook-spin {
  to {
    transform: rotate(360deg);
  }
}

/* ========================================
   REDUCED MOTION PREFERENCES
   ======================================== */
@media (prefers-reduced-motion: reduce) {
  .scrapbook-product-card,
  .product-actions .button,
  .scrapbook-ordering select {
    transition: none;
  }
  
  .scrapbook-product-card:hover {
    transform: none;
  }
  
  .scrapbook-loading::after {
    animation: none;
  }
}
```

## File: widgets/scrapbook-product-card.php
```php
<?php

/**
 * Scrapbook Product Card Widget
 * 
 * Custom Elementor widget that creates a scrapbook-style product card
 * with integrated washi tape support
 */

namespace Scrapbook_Shop\Widgets;

if (!defined('ABSPATH')) {
    exit;
}

class Scrapbook_Product_Card extends \Elementor\Widget_Base
{

    public function get_name()
    {
        return 'scrapbook_product_card';
    }

    public function get_title()
    {
        return esc_html__('Scrapbook Product Card', 'scrapbook-shop');
    }

    public function get_icon()
    {
        return 'eicon-product-images';
    }

    public function get_categories()
    {
        return ['woocommerce-elements'];
    }

    public function get_keywords()
    {
        return ['product', 'woocommerce', 'scrapbook', 'polaroid', 'washi tape'];
    }

    protected function register_controls()
    {

        // Content Section
        $this->start_controls_section(
            'section_content',
            [
                'label' => esc_html__('Content', 'scrapbook-shop'),
            ]
        );

        $this->add_control(
            'product_id',
            [
                'label' => esc_html__('Product', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SELECT2,
                'options' => $this->get_products_list(),
                'label_block' => true,
                'description' => esc_html__('Leave empty to use in loop', 'scrapbook-shop'),
            ]
        );

        $this->add_control(
            'show_title',
            [
                'label' => esc_html__('Show Title', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'default' => 'yes',
            ]
        );

        $this->add_control(
            'show_price',
            [
                'label' => esc_html__('Show Price', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'default' => 'yes',
            ]
        );

        $this->add_control(
            'show_rating',
            [
                'label' => esc_html__('Show Rating', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'default' => 'yes',
            ]
        );

        $this->add_control(
            'show_add_to_cart',
            [
                'label' => esc_html__('Show Add to Cart', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'default' => 'yes',
            ]
        );

        $this->add_control(
            'show_sale_badge',
            [
                'label' => esc_html__('Show Sale Badge', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'default' => 'yes',
            ]
        );

        $this->end_controls_section();

        // Washi Tape Section
        $this->start_controls_section(
            'section_washi_tape',
            [
                'label' => esc_html__('Washi Tape', 'scrapbook-shop'),
            ]
        );

        $this->add_control(
            'use_washi_tape',
            [
                'label' => esc_html__('Use Washi Tape', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'default' => 'yes',
            ]
        );

        $this->add_control(
            'washi_tape_source',
            [
                'label' => esc_html__('Washi Tape Source', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SELECT,
                'default' => 'plugin',
                'options' => [
                    'plugin' => esc_html__('Washi Tape Plugin', 'scrapbook-shop'),
                    'image' => esc_html__('Custom Image', 'scrapbook-shop'),
                    'random' => esc_html__('Random from Plugin', 'scrapbook-shop'),
                ],
                'condition' => [
                    'use_washi_tape' => 'yes',
                ],
            ]
        );

        // If Washi Tape plugin is active, show tape selector
        if (class_exists('Washi_Tape_DB')) {
            $this->add_control(
                'washi_tape_id',
                [
                    'label' => esc_html__('Select Washi Tape', 'scrapbook-shop'),
                    'type' => \Elementor\Controls_Manager::SELECT,
                    'options' => $this->get_washi_tapes_list(),
                    'condition' => [
                        'use_washi_tape' => 'yes',
                        'washi_tape_source' => 'plugin',
                    ],
                ]
            );
        }

        $this->add_control(
            'washi_tape_image',
            [
                'label' => esc_html__('Washi Tape Image', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::MEDIA,
                'condition' => [
                    'use_washi_tape' => 'yes',
                    'washi_tape_source' => 'image',
                ],
            ]
        );

        $this->add_control(
            'washi_tape_rotation',
            [
                'label' => esc_html__('Tape Rotation', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['deg'],
                'range' => [
                    'deg' => [
                        'min' => -15,
                        'max' => 15,
                        'step' => 1,
                    ],
                ],
                'default' => [
                    'unit' => 'deg',
                    'size' => 0,
                ],
                'condition' => [
                    'use_washi_tape' => 'yes',
                ],
            ]
        );

        $this->end_controls_section();

        // Style Section - Card
        $this->start_controls_section(
            'section_style_card',
            [
                'label' => esc_html__('Card Style', 'scrapbook-shop'),
                'tab' => \Elementor\Controls_Manager::TAB_STYLE,
            ]
        );

        $this->add_control(
            'card_background',
            [
                'label' => esc_html__('Background Color', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'default' => '#FAF2F1',
                'selectors' => [
                    '{{WRAPPER}} .scrapbook-product-card' => 'background-color: {{VALUE}};',
                ],
            ]
        );

        $this->add_control(
            'card_border_color',
            [
                'label' => esc_html__('Border Color', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'default' => '#EFE5DA',
                'selectors' => [
                    '{{WRAPPER}} .scrapbook-product-card' => 'border-color: {{VALUE}};',
                ],
            ]
        );

        $this->add_control(
            'card_hover_rotate',
            [
                'label' => esc_html__('Hover Rotation', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['deg'],
                'range' => [
                    'deg' => [
                        'min' => -5,
                        'max' => 5,
                        'step' => 0.5,
                    ],
                ],
                'default' => [
                    'unit' => 'deg',
                    'size' => -1.5,
                ],
                'selectors' => [
                    '{{WRAPPER}} .scrapbook-product-card:hover' => 'transform: translateY(-5px) rotate({{SIZE}}{{UNIT}});',
                ],
            ]
        );

        $this->add_group_control(
            \Elementor\Group_Control_Box_Shadow::get_type(),
            [
                'name' => 'card_shadow',
                'selector' => '{{WRAPPER}} .scrapbook-product-card',
            ]
        );

        $this->end_controls_section();

        // Style Section - Polaroid Frame
        $this->start_controls_section(
            'section_style_polaroid',
            [
                'label' => esc_html__('Polaroid Frame', 'scrapbook-shop'),
                'tab' => \Elementor\Controls_Manager::TAB_STYLE,
            ]
        );

        $this->add_control(
            'polaroid_background',
            [
                'label' => esc_html__('Frame Color', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'default' => '#ffffff',
                'selectors' => [
                    '{{WRAPPER}} .polaroid-frame' => 'background-color: {{VALUE}};',
                ],
            ]
        );

        $this->add_responsive_control(
            'polaroid_padding',
            [
                'label' => esc_html__('Frame Padding', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::DIMENSIONS,
                'size_units' => ['px', '%', 'em'],
                'default' => [
                    'top' => 10,
                    'right' => 10,
                    'bottom' => 25,
                    'left' => 10,
                    'unit' => 'px',
                ],
                'selectors' => [
                    '{{WRAPPER}} .polaroid-frame' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
                ],
            ]
        );

        $this->end_controls_section();

        // Typography
        $this->start_controls_section(
            'section_typography',
            [
                'label' => esc_html__('Typography', 'scrapbook-shop'),
                'tab' => \Elementor\Controls_Manager::TAB_STYLE,
            ]
        );

        $this->add_group_control(
            \Elementor\Group_Control_Typography::get_type(),
            [
                'name' => 'title_typography',
                'label' => esc_html__('Title', 'scrapbook-shop'),
                'selector' => '{{WRAPPER}} .product-title',
            ]
        );

        $this->add_group_control(
            \Elementor\Group_Control_Typography::get_type(),
            [
                'name' => 'price_typography',
                'label' => esc_html__('Price', 'scrapbook-shop'),
                'selector' => '{{WRAPPER}} .price',
            ]
        );

        $this->end_controls_section();
    }

    protected function render()
    {
        $settings = $this->get_settings_for_display();

        // Get product
        $product = $this->get_product($settings);

        if (!$product) {
            if (\Elementor\Plugin::$instance->editor->is_edit_mode()) {
                echo '<div class="elementor-alert elementor-alert-info">' .
                    esc_html__('Please select a product or use this widget in a loop.', 'scrapbook-shop') .
                    '</div>';
            }
            return;
        }

        // Get washi tape
        $washi_tape_html = $this->get_washi_tape_html($settings);

?>
        <div class="scrapbook-product-card">
            <div class="product-card-inner">
                <div class="product-image-wrapper">
                    <?php if ($washi_tape_html): ?>
                        <div class="washi-tape-decoration" style="transform: rotate(<?php echo esc_attr($settings['washi_tape_rotation']['size']); ?>deg);">
                            <?php echo $washi_tape_html; ?>
                        </div>
                    <?php endif; ?>

                    <?php if ($product->is_on_sale() && $settings['show_sale_badge'] === 'yes'): ?>
                        <span class="onsale"><?php esc_html_e('Sale!', 'scrapbook-shop'); ?></span>
                    <?php endif; ?>

                    <div class="polaroid-frame">
                        <a href="<?php echo esc_url($product->get_permalink()); ?>">
                            <?php echo $product->get_image('woocommerce_thumbnail'); ?>
                        </a>
                    </div>
                </div>

                <div class="product-details">
                    <?php if ($settings['show_title'] === 'yes'): ?>
                        <h3 class="product-title">
                            <a href="<?php echo esc_url($product->get_permalink()); ?>">
                                <?php echo esc_html($product->get_name()); ?>
                            </a>
                        </h3>
                    <?php endif; ?>

                    <?php if ($settings['show_rating'] === 'yes'): ?>
                        <?php woocommerce_template_loop_rating(); ?>
                    <?php endif; ?>

                    <?php if ($settings['show_price'] === 'yes'): ?>
                        <div class="price"><?php echo $product->get_price_html(); ?></div>
                    <?php endif; ?>
                </div>

                <?php if ($settings['show_add_to_cart'] === 'yes'): ?>
                    <div class="product-actions">
                        <?php woocommerce_template_loop_add_to_cart(); ?>
                    </div>
                <?php endif; ?>
            </div>
        </div>
<?php
    }

    /**
     * Get product for the widget
     */
    private function get_product($settings)
    {
        global $product;

        // If specific product is selected
        if (!empty($settings['product_id'])) {
            return wc_get_product($settings['product_id']);
        }

        // If in loop, use current product
        if ($product instanceof \WC_Product) {
            return $product;
        }

        // Try to get from post
        $post_id = get_the_ID();
        if ($post_id && get_post_type($post_id) === 'product') {
            return wc_get_product($post_id);
        }

        return false;
    }

    /**
     * Get washi tape HTML
     */
    private function get_washi_tape_html($settings)
    {
        if ($settings['use_washi_tape'] !== 'yes') {
            return '';
        }

        $html = '';

        switch ($settings['washi_tape_source']) {
            case 'plugin':
                if (class_exists('Washi_Tape_DB') && !empty($settings['washi_tape_id'])) {
                    $db = new \Washi_Tape_DB();
                    $tape = $db->get_washi_tape($settings['washi_tape_id']);
                    if ($tape && !empty($tape->svg)) {
                        $html = $tape->svg;
                    }
                }
                break;

            case 'random':
                if (class_exists('Washi_Tape_DB')) {
                    $db = new \Washi_Tape_DB();
                    $tapes = $db->get_all_washi_tapes();
                    if (!empty($tapes)) {
                        $random_tape = $tapes[array_rand($tapes)];
                        $html = $random_tape->svg;
                    }
                }
                break;

            case 'image':
                if (!empty($settings['washi_tape_image']['url'])) {
                    $html = '<img src="' . esc_url($settings['washi_tape_image']['url']) . '" alt="Washi Tape">';
                }
                break;
        }

        return $html;
    }

    /**
     * Get list of products for selector
     */
    private function get_products_list()
    {
        $products = wc_get_products([
            'limit' => -1,
            'orderby' => 'name',
            'order' => 'ASC',
            'return' => 'ids',
        ]);

        $options = ['' => esc_html__('None (Use in Loop)', 'scrapbook-shop')];

        foreach ($products as $product_id) {
            $product = wc_get_product($product_id);
            if ($product) {
                $options[$product_id] = $product->get_name();
            }
        }

        return $options;
    }

    /**
     * Get list of washi tapes from plugin
     */
    private function get_washi_tapes_list()
    {
        $options = ['' => esc_html__('Select Tape', 'scrapbook-shop')];

        if (class_exists('Washi_Tape_DB')) {
            $db = new \Washi_Tape_DB();
            $tapes = $db->get_all_washi_tapes();

            if (!empty($tapes)) {
                foreach ($tapes as $tape) {
                    $options[$tape->id] = $tape->title;
                }
            }
        }

        return $options;
    }
}
```

## File: widgets/scrapbook-products-grid.php
```php
<?php

/**
 * Scrapbook Products Archive Grid Widget
 * 
 * Creates the full archive layout with sorting and grid
 */

namespace Scrapbook_Shop\Widgets;

if (!defined('ABSPATH')) {
    exit;
}

class Scrapbook_Products_Grid extends \Elementor\Widget_Base
{

    public function get_name()
    {
        return 'scrapbook_products_grid';
    }

    public function get_title()
    {
        return esc_html__('Scrapbook Products Grid', 'scrapbook-shop');
    }

    public function get_icon()
    {
        return 'eicon-posts-grid';
    }

    public function get_categories()
    {
        return ['woocommerce-elements'];
    }

    protected function register_controls()
    {

        // Query Section
        $this->start_controls_section(
            'section_query',
            [
                'label' => esc_html__('Query', 'scrapbook-shop'),
            ]
        );

        $this->add_control(
            'query_type',
            [
                'label' => esc_html__('Query Type', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SELECT,
                'default' => 'all',
                'options' => [
                    'all' => esc_html__('All Products', 'scrapbook-shop'),
                    'featured' => esc_html__('Featured Products', 'scrapbook-shop'),
                    'sale' => esc_html__('On Sale', 'scrapbook-shop'),
                    'best_selling' => esc_html__('Best Selling', 'scrapbook-shop'),
                    'top_rated' => esc_html__('Top Rated', 'scrapbook-shop'),
                    'category' => esc_html__('By Category', 'scrapbook-shop'),
                    'manual' => esc_html__('Manual Selection', 'scrapbook-shop'),
                ],
            ]
        );

        $this->add_control(
            'product_categories',
            [
                'label' => esc_html__('Categories', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SELECT2,
                'multiple' => true,
                'options' => $this->get_product_categories(),
                'condition' => [
                    'query_type' => 'category',
                ],
            ]
        );

        $this->add_control(
            'products_per_page',
            [
                'label' => esc_html__('Products Per Page', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::NUMBER,
                'default' => 12,
                'min' => 1,
                'max' => 100,
            ]
        );

        $this->add_control(
            'orderby',
            [
                'label' => esc_html__('Order By', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SELECT,
                'default' => 'date',
                'options' => [
                    'date' => esc_html__('Date', 'scrapbook-shop'),
                    'title' => esc_html__('Title', 'scrapbook-shop'),
                    'price' => esc_html__('Price', 'scrapbook-shop'),
                    'popularity' => esc_html__('Popularity', 'scrapbook-shop'),
                    'rating' => esc_html__('Rating', 'scrapbook-shop'),
                    'rand' => esc_html__('Random', 'scrapbook-shop'),
                    'menu_order' => esc_html__('Menu Order', 'scrapbook-shop'),
                ],
            ]
        );

        $this->add_control(
            'order',
            [
                'label' => esc_html__('Order', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SELECT,
                'default' => 'DESC',
                'options' => [
                    'ASC' => esc_html__('Ascending', 'scrapbook-shop'),
                    'DESC' => esc_html__('Descending', 'scrapbook-shop'),
                ],
            ]
        );

        $this->end_controls_section();

        // Layout Section
        $this->start_controls_section(
            'section_layout',
            [
                'label' => esc_html__('Layout', 'scrapbook-shop'),
            ]
        );

        $this->add_control(
            'show_page_title',
            [
                'label' => esc_html__('Show Page Title', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'default' => 'yes',
            ]
        );

        $this->add_control(
            'page_title_text',
            [
                'label' => esc_html__('Custom Title', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::TEXT,
                'default' => esc_html__('Shop', 'scrapbook-shop'),
                'condition' => [
                    'show_page_title' => 'yes',
                ],
            ]
        );

        $this->add_control(
            'show_sorting',
            [
                'label' => esc_html__('Show Sorting Dropdown', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'default' => 'yes',
            ]
        );

        $this->add_control(
            'show_result_count',
            [
                'label' => esc_html__('Show Result Count', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'default' => 'no',
            ]
        );

        $this->add_responsive_control(
            'columns',
            [
                'label' => esc_html__('Columns', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SELECT,
                'default' => '3',
                'tablet_default' => '2',
                'mobile_default' => '1',
                'options' => [
                    '1' => '1',
                    '2' => '2',
                    '3' => '3',
                    '4' => '4',
                    '5' => '5',
                    '6' => '6',
                ],
                'selectors' => [
                    '{{WRAPPER}} .scrapbook-products-grid' => 'grid-template-columns: repeat({{VALUE}}, 1fr);',
                ],
            ]
        );

        $this->add_responsive_control(
            'grid_gap',
            [
                'label' => esc_html__('Grid Gap', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px', 'em', '%'],
                'range' => [
                    'px' => [
                        'min' => 0,
                        'max' => 100,
                    ],
                ],
                'default' => [
                    'size' => 25,
                    'unit' => 'px',
                ],
                'selectors' => [
                    '{{WRAPPER}} .scrapbook-products-grid' => 'gap: {{SIZE}}{{UNIT}};',
                ],
            ]
        );

        $this->add_control(
            'show_pagination',
            [
                'label' => esc_html__('Show Pagination', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'default' => 'yes',
            ]
        );

        $this->end_controls_section();

        // Washi Tape Settings
        $this->start_controls_section(
            'section_washi_tape_settings',
            [
                'label' => esc_html__('Washi Tape Settings', 'scrapbook-shop'),
            ]
        );

        $this->add_control(
            'enable_washi_tape',
            [
                'label' => esc_html__('Enable Washi Tape', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'default' => 'yes',
            ]
        );

        $this->add_control(
            'washi_tape_mode',
            [
                'label' => esc_html__('Washi Tape Mode', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SELECT,
                'default' => 'random',
                'options' => [
                    'random' => esc_html__('Random from Plugin', 'scrapbook-shop'),
                    'specific' => esc_html__('Specific Tape', 'scrapbook-shop'),
                    'rotating' => esc_html__('Rotating Selection', 'scrapbook-shop'),
                ],
                'condition' => [
                    'enable_washi_tape' => 'yes',
                ],
            ]
        );

        if (class_exists('Washi_Tape_DB')) {
            $this->add_control(
                'specific_washi_tape',
                [
                    'label' => esc_html__('Select Washi Tape', 'scrapbook-shop'),
                    'type' => \Elementor\Controls_Manager::SELECT,
                    'options' => $this->get_washi_tapes_list(),
                    'condition' => [
                        'enable_washi_tape' => 'yes',
                        'washi_tape_mode' => 'specific',
                    ],
                ]
            );

            $this->add_control(
                'rotating_washi_tapes',
                [
                    'label' => esc_html__('Select Tapes to Rotate', 'scrapbook-shop'),
                    'type' => \Elementor\Controls_Manager::SELECT2,
                    'multiple' => true,
                    'options' => $this->get_washi_tapes_list(),
                    'condition' => [
                        'enable_washi_tape' => 'yes',
                        'washi_tape_mode' => 'rotating',
                    ],
                ]
            );
        }

        $this->add_control(
            'randomize_tape_rotation',
            [
                'label' => esc_html__('Randomize Tape Angles', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'default' => 'yes',
                'condition' => [
                    'enable_washi_tape' => 'yes',
                ],
            ]
        );

        $this->add_control(
            'tape_rotation_range',
            [
                'label' => esc_html__('Rotation Range', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['deg'],
                'range' => [
                    'deg' => [
                        'min' => 0,
                        'max' => 30,
                        'step' => 1,
                    ],
                ],
                'default' => [
                    'unit' => 'deg',
                    'size' => 10,
                ],
                'condition' => [
                    'enable_washi_tape' => 'yes',
                    'randomize_tape_rotation' => 'yes',
                ],
            ]
        );

        $this->end_controls_section();

        // Style Section
        $this->start_controls_section(
            'section_style',
            [
                'label' => esc_html__('Style', 'scrapbook-shop'),
                'tab' => \Elementor\Controls_Manager::TAB_STYLE,
            ]
        );

        $this->add_group_control(
            \Elementor\Group_Control_Typography::get_type(),
            [
                'name' => 'page_title_typography',
                'label' => esc_html__('Page Title Typography', 'scrapbook-shop'),
                'selector' => '{{WRAPPER}} .scrapbook-archive-title',
                'condition' => [
                    'show_page_title' => 'yes',
                ],
            ]
        );

        $this->add_control(
            'page_title_color',
            [
                'label' => esc_html__('Page Title Color', 'scrapbook-shop'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'default' => '#2C2C2C',
                'selectors' => [
                    '{{WRAPPER}} .scrapbook-archive-title' => 'color: {{VALUE}};',
                ],
                'condition' => [
                    'show_page_title' => 'yes',
                ],
            ]
        );

        $this->end_controls_section();
    }

    protected function render()
    {
        $settings = $this->get_settings_for_display();

        // Setup query
        $query_args = $this->get_query_args($settings);
        $products = new \WP_Query($query_args);

?>
        <div class="scrapbook-products-archive">
            <?php if ($settings['show_page_title'] === 'yes' || $settings['show_sorting'] === 'yes'): ?>
                <div class="scrapbook-archive-header">
                    <?php if ($settings['show_page_title'] === 'yes'): ?>
                        <h1 class="scrapbook-archive-title">
                            <?php echo esc_html($settings['page_title_text']); ?>
                        </h1>
                    <?php endif; ?>

                    <?php if ($settings['show_sorting'] === 'yes'): ?>
                        <div class="scrapbook-sorting">
                            <?php $this->render_sorting_dropdown(); ?>
                        </div>
                    <?php endif; ?>
                </div>
            <?php endif; ?>

            <?php if ($settings['show_result_count'] === 'yes'): ?>
                <div class="scrapbook-result-count">
                    <?php
                    $total = $products->found_posts;
                    $per_page = $settings['products_per_page'];
                    $current = max(1, get_query_var('paged'));
                    $showing_start = ($current - 1) * $per_page + 1;
                    $showing_end = min($current * $per_page, $total);

                    printf(
                        esc_html__('Showing %1$d–%2$d of %3$d results', 'scrapbook-shop'),
                        $showing_start,
                        $showing_end,
                        $total
                    );
                    ?>
                </div>
            <?php endif; ?>

            <?php if ($products->have_posts()): ?>
                <div class="scrapbook-products-grid">
                    <?php
                    $index = 0;
                    while ($products->have_posts()):
                        $products->the_post();
                        global $product;

                        // Get washi tape for this product
                        $washi_tape_html = $this->get_washi_tape_for_product($settings, $index);
                        $rotation = $this->get_rotation_for_product($settings, $index);

                    ?>
                        <div class="scrapbook-grid-item">
                            <?php
                            // Use template part if exists, otherwise use inline template
                            if (locate_template('woocommerce/content-product-scrapbook.php')) {
                                wc_get_template_part('content', 'product-scrapbook');
                            } else {
                                $this->render_product_card($product, $washi_tape_html, $rotation);
                            }
                            ?>
                        </div>
                    <?php
                        $index++;
                    endwhile;
                    ?>
                </div>

                <?php if ($settings['show_pagination'] === 'yes'): ?>
                    <div class="scrapbook-pagination">
                        <?php
                        echo paginate_links([
                            'total' => $products->max_num_pages,
                            'current' => max(1, get_query_var('paged')),
                            'prev_text' => '&laquo;',
                            'next_text' => '&raquo;',
                        ]);
                        ?>
                    </div>
                <?php endif; ?>

            <?php else: ?>
                <div class="scrapbook-no-products">
                    <?php esc_html_e('No products found.', 'scrapbook-shop'); ?>
                </div>
            <?php endif; ?>

            <?php wp_reset_postdata(); ?>
        </div>
    <?php
    }

    /**
     * Render individual product card
     */
    private function render_product_card($product, $washi_tape_html, $rotation)
    {
    ?>
        <div class="scrapbook-product-card">
            <div class="product-card-inner">
                <div class="product-image-wrapper">
                    <?php if ($washi_tape_html): ?>
                        <div class="washi-tape-decoration" style="transform: rotate(<?php echo esc_attr($rotation); ?>deg);">
                            <?php echo $washi_tape_html; ?>
                        </div>
                    <?php endif; ?>

                    <?php if ($product->is_on_sale()): ?>
                        <span class="onsale"><?php esc_html_e('Sale!', 'scrapbook-shop'); ?></span>
                    <?php endif; ?>

                    <div class="polaroid-frame">
                        <a href="<?php echo esc_url($product->get_permalink()); ?>">
                            <?php echo $product->get_image('woocommerce_thumbnail'); ?>
                        </a>
                    </div>
                </div>

                <div class="product-details">
                    <h3 class="product-title">
                        <a href="<?php echo esc_url($product->get_permalink()); ?>">
                            <?php echo esc_html($product->get_name()); ?>
                        </a>
                    </h3>

                    <?php woocommerce_template_loop_rating(); ?>

                    <div class="price"><?php echo $product->get_price_html(); ?></div>
                </div>

                <div class="product-actions">
                    <?php woocommerce_template_loop_add_to_cart(); ?>
                </div>
            </div>
        </div>
    <?php
    }

    /**
     * Get query arguments
     */
    private function get_query_args($settings)
    {
        $args = [
            'post_type' => 'product',
            'posts_per_page' => $settings['products_per_page'],
            'orderby' => $settings['orderby'],
            'order' => $settings['order'],
            'paged' => max(1, get_query_var('paged')),
        ];

        // Handle different query types
        switch ($settings['query_type']) {
            case 'featured':
                $args['tax_query'][] = [
                    'taxonomy' => 'product_visibility',
                    'field' => 'name',
                    'terms' => 'featured',
                ];
                break;

            case 'sale':
                $args['post__in'] = wc_get_product_ids_on_sale();
                break;

            case 'best_selling':
                $args['meta_key'] = 'total_sales';
                $args['orderby'] = 'meta_value_num';
                break;

            case 'top_rated':
                $args['meta_key'] = '_wc_average_rating';
                $args['orderby'] = 'meta_value_num';
                break;

            case 'category':
                if (!empty($settings['product_categories'])) {
                    $args['tax_query'][] = [
                        'taxonomy' => 'product_cat',
                        'field' => 'term_id',
                        'terms' => $settings['product_categories'],
                    ];
                }
                break;
        }

        return $args;
    }

    /**
     * Get washi tape HTML for a product
     */
    private function get_washi_tape_for_product($settings, $index)
    {
        if ($settings['enable_washi_tape'] !== 'yes' || !class_exists('Washi_Tape_DB')) {
            return '';
        }

        $db = new \Washi_Tape_DB();
        $tape = null;

        switch ($settings['washi_tape_mode']) {
            case 'specific':
                if (!empty($settings['specific_washi_tape'])) {
                    $tape = $db->get_washi_tape($settings['specific_washi_tape']);
                }
                break;

            case 'rotating':
                if (!empty($settings['rotating_washi_tapes'])) {
                    $tape_ids = $settings['rotating_washi_tapes'];
                    $tape_id = $tape_ids[$index % count($tape_ids)];
                    $tape = $db->get_washi_tape($tape_id);
                }
                break;

            case 'random':
            default:
                $tapes = $db->get_all_washi_tapes();
                if (!empty($tapes)) {
                    $tape = $tapes[array_rand($tapes)];
                }
                break;
        }

        return ($tape && !empty($tape->svg)) ? $tape->svg : '';
    }

    /**
     * Get rotation for a product
     */
    private function get_rotation_for_product($settings, $index)
    {
        if ($settings['randomize_tape_rotation'] !== 'yes') {
            return 0;
        }

        $range = $settings['tape_rotation_range']['size'];
        return rand(-$range, $range);
    }

    /**
     * Render sorting dropdown
     */
    private function render_sorting_dropdown()
    {
    ?>
        <form class="scrapbook-ordering" method="get">
            <select name="orderby" class="orderby">
                <option value="menu_order"><?php esc_html_e('Default sorting', 'scrapbook-shop'); ?></option>
                <option value="popularity"><?php esc_html_e('Sort by popularity', 'scrapbook-shop'); ?></option>
                <option value="rating"><?php esc_html_e('Sort by average rating', 'scrapbook-shop'); ?></option>
                <option value="date"><?php esc_html_e('Sort by latest', 'scrapbook-shop'); ?></option>
                <option value="price"><?php esc_html_e('Sort by price: low to high', 'scrapbook-shop'); ?></option>
                <option value="price-desc"><?php esc_html_e('Sort by price: high to low', 'scrapbook-shop'); ?></option>
            </select>
            <?php wc_query_string_form_fields(null, ['orderby', 'submit']); ?>
        </form>
<?php
    }

    /**
     * Get product categories for selector
     */
    private function get_product_categories()
    {
        $categories = get_terms([
            'taxonomy' => 'product_cat',
            'hide_empty' => false,
        ]);

        $options = [];
        foreach ($categories as $category) {
            $options[$category->term_id] = $category->name;
        }

        return $options;
    }

    /**
     * Get washi tapes list
     */
    private function get_washi_tapes_list()
    {
        $options = [];

        if (class_exists('Washi_Tape_DB')) {
            $db = new \Washi_Tape_DB();
            $tapes = $db->get_all_washi_tapes();

            if (!empty($tapes)) {
                foreach ($tapes as $tape) {
                    $options[$tape->id] = $tape->title;
                }
            }
        }

        return $options;
    }
}
```

## File: scrapbook-shop.php
```php
<?php

/**
 * Plugin Name: Scrapbook Shop for Elementor
 * Description: Beautiful scrapbook-style WooCommerce product displays with Washi Tape integration for Elementor
 * Version: 1.0.0
 * Author: Your Name
 * Text Domain: scrapbook-shop
 * Requires Plugins: elementor, woocommerce
 */

// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}

define('SCRAPBOOK_SHOP_VERSION', '1.0.0');
define('SCRAPBOOK_SHOP_PATH', plugin_dir_path(__FILE__));
define('SCRAPBOOK_SHOP_URL', plugin_dir_url(__FILE__));

/**
 * Main Scrapbook Shop Plugin Class
 */
class Scrapbook_Shop_Plugin
{

    private static $instance = null;

    public static function get_instance()
    {
        if (null === self::$instance) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    public function __construct()
    {
        // Check dependencies
        add_action('admin_init', [$this, 'check_dependencies']);

        // Initialize the plugin
        add_action('plugins_loaded', [$this, 'init']);

        // Register styles and scripts
        add_action('wp_enqueue_scripts', [$this, 'enqueue_frontend_assets']);
        add_action('elementor/editor/after_enqueue_styles', [$this, 'enqueue_editor_styles']);

        // Register Elementor widgets
        add_action('elementor/widgets/register', [$this, 'register_widgets']);

        // Add custom widget category
        add_action('elementor/elements/categories_registered', [$this, 'add_widget_category']);

        // Register custom image sizes
        add_action('after_setup_theme', [$this, 'register_image_sizes']);

        // Add theme support
        add_action('after_setup_theme', [$this, 'add_theme_support']);
    }

    /**
     * Check plugin dependencies
     */
    public function check_dependencies()
    {
        $missing_plugins = [];

        if (!did_action('elementor/loaded')) {
            $missing_plugins[] = 'Elementor';
        }

        if (!class_exists('WooCommerce')) {
            $missing_plugins[] = 'WooCommerce';
        }

        if (!empty($missing_plugins)) {
            add_action('admin_notices', function () use ($missing_plugins) {
?>
                <div class="notice notice-error">
                    <p>
                        <?php
                        printf(
                            esc_html__('Scrapbook Shop requires the following plugins to be installed and activated: %s', 'scrapbook-shop'),
                            implode(', ', $missing_plugins)
                        );
                        ?>
                    </p>
                </div>
            <?php
            });
        }
    }

    /**
     * Initialize the plugin
     */
    public function init()
    {
        // Load text domain
        load_plugin_textdomain('scrapbook-shop', false, dirname(plugin_basename(__FILE__)) . '/languages');

        // Check if Elementor is loaded
        if (!did_action('elementor/loaded')) {
            return;
        }

        // Include widget files
        $this->include_widget_files();

        // Add AJAX handlers for dynamic content
        add_action('wp_ajax_scrapbook_load_more_products', [$this, 'ajax_load_more_products']);
        add_action('wp_ajax_nopriv_scrapbook_load_more_products', [$this, 'ajax_load_more_products']);
    }

    /**
     * Include widget files
     */
    private function include_widget_files()
    {
        require_once SCRAPBOOK_SHOP_PATH . 'widgets/scrapbook-product-card.php';
        require_once SCRAPBOOK_SHOP_PATH . 'widgets/scrapbook-products-grid.php';
    }

    /**
     * Register Elementor widgets
     */
    public function register_widgets($widgets_manager)
    {
        // Make sure the widget classes exist
        if (class_exists('Scrapbook_Shop\Widgets\Scrapbook_Product_Card')) {
            $widgets_manager->register(new \Scrapbook_Shop\Widgets\Scrapbook_Product_Card());
        }

        if (class_exists('Scrapbook_Shop\Widgets\Scrapbook_Products_Grid')) {
            $widgets_manager->register(new \Scrapbook_Shop\Widgets\Scrapbook_Products_Grid());
        }
    }

    /**
     * Add custom widget category
     */
    public function add_widget_category($elements_manager)
    {
        $elements_manager->add_category(
            'scrapbook-shop',
            [
                'title' => esc_html__('Scrapbook Shop', 'scrapbook-shop'),
                'icon' => 'fa fa-shopping-cart',
            ]
        );
    }

    /**
     * Enqueue frontend assets
     */
    public function enqueue_frontend_assets()
    {
        // Main styles
        wp_enqueue_style(
            'scrapbook-shop-styles',
            SCRAPBOOK_SHOP_URL . 'assets/css/scrapbook-shop.css',
            ['woocommerce-general'],
            SCRAPBOOK_SHOP_VERSION
        );

        // Responsive styles
        wp_enqueue_style(
            'scrapbook-shop-responsive',
            SCRAPBOOK_SHOP_URL . 'assets/css/scrapbook-shop-responsive.css',
            ['scrapbook-shop-styles'],
            SCRAPBOOK_SHOP_VERSION
        );

        // Frontend scripts
        wp_enqueue_script(
            'scrapbook-shop-scripts',
            SCRAPBOOK_SHOP_URL . 'assets/js/scrapbook-shop.js',
            ['jquery'],
            SCRAPBOOK_SHOP_VERSION,
            true
        );

        // Localize script for AJAX
        wp_localize_script('scrapbook-shop-scripts', 'scrapbook_shop_ajax', [
            'ajax_url' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('scrapbook_shop_nonce'),
        ]);
    }

    /**
     * Enqueue editor styles
     */
    public function enqueue_editor_styles()
    {
        wp_enqueue_style(
            'scrapbook-shop-editor',
            SCRAPBOOK_SHOP_URL . 'assets/css/scrapbook-shop-editor.css',
            [],
            SCRAPBOOK_SHOP_VERSION
        );
    }

    /**
     * Register custom image sizes
     */
    public function register_image_sizes()
    {
        // Polaroid-style image size
        add_image_size('scrapbook_polaroid', 400, 400, true);

        // Thumbnail for grid
        add_image_size('scrapbook_grid', 300, 300, true);
    }

    /**
     * Add theme support
     */
    public function add_theme_support()
    {
        // Add WooCommerce support
        add_theme_support('woocommerce');

        // Add support for WooCommerce galleries
        add_theme_support('wc-product-gallery-zoom');
        add_theme_support('wc-product-gallery-lightbox');
        add_theme_support('wc-product-gallery-slider');
    }

    /**
     * AJAX handler for loading more products
     */
    public function ajax_load_more_products()
    {
        check_ajax_referer('scrapbook_shop_nonce', 'nonce');

        $paged = isset($_POST['paged']) ? intval($_POST['paged']) : 1;
        $per_page = isset($_POST['per_page']) ? intval($_POST['per_page']) : 12;
        $query_type = isset($_POST['query_type']) ? sanitize_text_field($_POST['query_type']) : 'all';

        // Build query
        $args = [
            'post_type' => 'product',
            'posts_per_page' => $per_page,
            'paged' => $paged,
        ];

        // Add query type specific args
        switch ($query_type) {
            case 'featured':
                $args['tax_query'][] = [
                    'taxonomy' => 'product_visibility',
                    'field' => 'name',
                    'terms' => 'featured',
                ];
                break;
            case 'sale':
                $args['post__in'] = wc_get_product_ids_on_sale();
                break;
        }

        $products = new WP_Query($args);

        ob_start();

        if ($products->have_posts()) {
            while ($products->have_posts()) {
                $products->the_post();
                global $product;

                // Output product HTML
            ?>
                <div class="scrapbook-grid-item">
                    <!-- Product card HTML here -->
                </div>
    <?php
            }
        }

        $html = ob_get_clean();

        wp_send_json_success([
            'html' => $html,
            'max_pages' => $products->max_num_pages,
        ]);

        wp_die();
    }
}

// Initialize the plugin
function scrapbook_shop_init()
{
    return Scrapbook_Shop_Plugin::get_instance();
}

add_action('plugins_loaded', 'scrapbook_shop_init', 0);

/**
 * Helper function to get washi tape SVG
 */
function scrapbook_get_washi_tape($tape_id = null)
{
    if (!class_exists('Washi_Tape_DB')) {
        return '';
    }

    $db = new Washi_Tape_DB();

    if ($tape_id) {
        $tape = $db->get_washi_tape($tape_id);
    } else {
        // Get random tape
        $tapes = $db->get_all_washi_tapes();
        if (!empty($tapes)) {
            $tape = $tapes[array_rand($tapes)];
        }
    }

    return ($tape && !empty($tape->svg)) ? $tape->svg : '';
}

/**
 * Template function for product card
 */
function scrapbook_product_card($product_id = null)
{
    if (!$product_id) {
        global $product;
    } else {
        $product = wc_get_product($product_id);
    }

    if (!$product) {
        return;
    }

    // Get random washi tape
    $washi_tape = scrapbook_get_washi_tape();
    $rotation = rand(-10, 10);

    ?>
    <div class="scrapbook-product-card">
        <div class="product-card-inner">
            <div class="product-image-wrapper">
                <?php if ($washi_tape): ?>
                    <div class="washi-tape-decoration" style="transform: rotate(<?php echo esc_attr($rotation); ?>deg);">
                        <?php echo $washi_tape; ?>
                    </div>
                <?php endif; ?>

                <?php if ($product->is_on_sale()): ?>
                    <span class="onsale"><?php esc_html_e('Sale!', 'woocommerce'); ?></span>
                <?php endif; ?>

                <div class="polaroid-frame">
                    <a href="<?php echo esc_url($product->get_permalink()); ?>">
                        <?php echo $product->get_image('scrapbook_polaroid'); ?>
                    </a>
                </div>
            </div>

            <div class="product-details">
                <h3 class="product-title">
                    <a href="<?php echo esc_url($product->get_permalink()); ?>">
                        <?php echo esc_html($product->get_name()); ?>
                    </a>
                </h3>

                <?php woocommerce_template_loop_rating(); ?>

                <div class="price"><?php echo $product->get_price_html(); ?></div>
            </div>

            <div class="product-actions">
                <?php woocommerce_template_loop_add_to_cart(); ?>
            </div>
        </div>
    </div>
<?php
}
```

================
File: scrapbook-shop/scrapbook-shop.php
================
<?php

/**
 * Plugin Name: Scrapbook Shop for Elementor
 * Description: Beautiful scrapbook-style WooCommerce product displays with Washi Tape integration for Elementor
 * Version: 1.0.7
 * Author: Richard McLain
 * Text Domain: scrapbook-shop
 * Domain Path: /languages
 * Requires Plugins: elementor, woocommerce
 */

// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}

define('SCRAPBOOK_SHOP_VERSION', '1.0.7');
define('SCRAPBOOK_SHOP_PATH', plugin_dir_path(__FILE__));
define('SCRAPBOOK_SHOP_URL', plugin_dir_url(__FILE__));

/**
 * Main Scrapbook Shop Plugin Class
 */
class Scrapbook_Shop_Plugin
{

    private static $instance = null;

    public static function get_instance()
    {
        if (null === self::$instance) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    public function __construct()
    {
        // Check dependencies
        add_action('admin_init', [$this, 'check_dependencies']);

        // Load translations as early as possible to avoid JIT notices
        add_action('plugins_loaded', [$this, 'load_textdomain'], 0);

        // Initialize the plugin after all plugins are loaded
        add_action('plugins_loaded', [$this, 'init']);

        // Register styles and scripts
        add_action('wp_enqueue_scripts', [$this, 'enqueue_frontend_assets']);
        add_action('elementor/editor/after_enqueue_styles', [$this, 'enqueue_editor_styles']);

        // Register Elementor widgets
        add_action('elementor/widgets/register', [$this, 'register_widgets']);

        // Add custom widget category
        add_action('elementor/elements/categories_registered', [$this, 'add_widget_category']);

        // Register custom image sizes
        add_action('after_setup_theme', [$this, 'register_image_sizes']);

        // Add theme support
        add_action('after_setup_theme', [$this, 'add_theme_support']);
    }

    /**
     * Check plugin dependencies
     */
    public function check_dependencies()
    {
        $missing_plugins = [];

        if (!did_action('elementor/loaded')) {
            $missing_plugins[] = 'Elementor';
        }

        if (!class_exists('WooCommerce')) {
            $missing_plugins[] = 'WooCommerce';
        }

        if (!empty($missing_plugins)) {
            add_action('admin_notices', function () use ($missing_plugins) {
?>
                <div class="notice notice-error">
                    <p>
                        <?php
                        printf(
                            esc_html__('Scrapbook Shop requires the following plugins to be installed and activated: %s', 'scrapbook-shop'),
                            implode(', ', $missing_plugins)
                        );
                        ?>
                    </p>
                </div>
            <?php
            });
        }
    }

    /**
     * Initialize the plugin
     */
    public function init()
    {
        // Check if Elementor is loaded
        if (!did_action('elementor/loaded')) {
            return;
        }

        // Add AJAX handlers for dynamic content
        add_action('wp_ajax_scrapbook_load_more_products', [$this, 'ajax_load_more_products']);
        add_action('wp_ajax_nopriv_scrapbook_load_more_products', [$this, 'ajax_load_more_products']);
    }

    /**
     * Load plugin textdomain
     */
    public function load_textdomain()
    {
        load_plugin_textdomain('scrapbook-shop', false, dirname(plugin_basename(__FILE__)) . '/languages');
    }

    /**
     * Include widget files
     */
    private function include_widget_files()
    {
        require_once SCRAPBOOK_SHOP_PATH . 'widgets/scrapbook-product-card.php';
        require_once SCRAPBOOK_SHOP_PATH . 'widgets/scrapbook-products-grid.php';
    }

    /**
     * Register Elementor widgets
     */
    public function register_widgets($widgets_manager)
    {
        // Ensure Elementor base class is available
        if (!class_exists('Elementor\\Widget_Base')) {
            return;
        }

        // Include widget files only when Elementor is registering widgets
        $this->include_widget_files();

        // Register widgets if classes exist
        if (class_exists('Scrapbook_Shop\\Widgets\\Scrapbook_Product_Card')) {
            $widgets_manager->register(new \Scrapbook_Shop\Widgets\Scrapbook_Product_Card());
        }

        if (class_exists('Scrapbook_Shop\\Widgets\\Scrapbook_Products_Grid')) {
            $widgets_manager->register(new \Scrapbook_Shop\Widgets\Scrapbook_Products_Grid());
        }
    }

    /**
     * Add custom widget category
     */
    public function add_widget_category($elements_manager)
    {
        $elements_manager->add_category(
            'scrapbook-shop',
            [
                'title' => esc_html__('Scrapbook Shop', 'scrapbook-shop'),
                'icon' => 'fa fa-shopping-cart',
            ]
        );
    }

    /**
     * Enqueue frontend assets
     */
    public function enqueue_frontend_assets()
    {
        // Main styles
        wp_enqueue_style(
            'scrapbook-shop-styles',
            SCRAPBOOK_SHOP_URL . 'assets/css/scrapbook-shop.css',
            ['woocommerce-general'],
            SCRAPBOOK_SHOP_VERSION
        );

        // Responsive styles
        wp_enqueue_style(
            'scrapbook-shop-responsive',
            SCRAPBOOK_SHOP_URL . 'assets/css/scrapbook-shop-responsive.css',
            ['scrapbook-shop-styles'],
            SCRAPBOOK_SHOP_VERSION
        );

        // Frontend scripts
        wp_enqueue_script(
            'scrapbook-shop-scripts',
            SCRAPBOOK_SHOP_URL . 'assets/js/scrapbook-shop.js',
            ['jquery'],
            SCRAPBOOK_SHOP_VERSION,
            true
        );

        // Localize script for AJAX
        wp_localize_script('scrapbook-shop-scripts', 'scrapbook_shop_ajax', [
            'ajax_url' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('scrapbook_shop_nonce'),
        ]);
    }

    /**
     * Enqueue editor styles
     */
    public function enqueue_editor_styles()
    {
        wp_enqueue_style(
            'scrapbook-shop-editor',
            SCRAPBOOK_SHOP_URL . 'assets/css/scrapbook-shop-editor.css',
            [],
            SCRAPBOOK_SHOP_VERSION
        );
    }

    /**
     * Register custom image sizes
     */
    public function register_image_sizes()
    {
        // Polaroid-style image size
        add_image_size('scrapbook_polaroid', 400, 400, true);

        // Thumbnail for grid
        add_image_size('scrapbook_grid', 300, 300, true);
    }

    /**
     * Add theme support
     */
    public function add_theme_support()
    {
        // Add WooCommerce support
        add_theme_support('woocommerce');

        // Add support for WooCommerce galleries
        add_theme_support('wc-product-gallery-zoom');
        add_theme_support('wc-product-gallery-lightbox');
        add_theme_support('wc-product-gallery-slider');
    }

    /**
     * AJAX handler for loading more products
     */
    public function ajax_load_more_products()
    {
        check_ajax_referer('scrapbook_shop_nonce', 'nonce');

        $paged = isset($_POST['paged']) ? intval($_POST['paged']) : 1;
        $per_page = isset($_POST['per_page']) ? intval($_POST['per_page']) : 12;
        $query_type = isset($_POST['query_type']) ? sanitize_text_field($_POST['query_type']) : 'all';

        // Build query
        $args = [
            'post_type' => 'product',
            'posts_per_page' => $per_page,
            'paged' => $paged,
        ];

        // Add query type specific args
        switch ($query_type) {
            case 'featured':
                $args['tax_query'][] = [
                    'taxonomy' => 'product_visibility',
                    'field' => 'name',
                    'terms' => 'featured',
                ];
                break;
            case 'sale':
                $args['post__in'] = wc_get_product_ids_on_sale();
                break;
        }

        $products = new WP_Query($args);

        ob_start();

        if ($products->have_posts()) {
            while ($products->have_posts()) {
                $products->the_post();
                global $product;

                // Output product HTML
            ?>
                <div class="scrapbook-grid-item">
                    <!-- Product card HTML here -->
                </div>
    <?php
            }
        }

        $html = ob_get_clean();

        wp_send_json_success([
            'html' => $html,
            'max_pages' => $products->max_num_pages,
        ]);

        wp_die();
    }
}

// Initialize the plugin
function scrapbook_shop_init()
{
    return Scrapbook_Shop_Plugin::get_instance();
}

add_action('plugins_loaded', 'scrapbook_shop_init', 0);

/**
 * Helper function to get washi tape SVG
 */
function scrapbook_get_washi_tape($tape_id = null)
{
    if (!class_exists('Washi_Tape_DB')) {
        return '';
    }

    $db = new Washi_Tape_DB();

    if ($tape_id) {
        $tape = $db->get_washi_tape($tape_id);
    } else {
        // Get random tape
        $tapes = $db->get_all_washi_tapes();
        if (!empty($tapes)) {
            $tape = $tapes[array_rand($tapes)];
        }
    }

    return ($tape && !empty($tape->svg)) ? $tape->svg : '';
}

/**
 * Template function for product card
 */
function scrapbook_product_card($product_id = null)
{
    if (!$product_id) {
        global $product;
    } else {
        $product = wc_get_product($product_id);
    }

    if (!$product) {
        return;
    }

    // Get random washi tape
    $washi_tape = scrapbook_get_washi_tape();
    $rotation = rand(-10, 10);

    ?>
    <div class="scrapbook-product-card">
        <div class="product-card-inner">
            <div class="product-image-wrapper">
                <?php if ($washi_tape): ?>
                    <div class="washi-tape-decoration" style="transform: rotate(<?php echo esc_attr($rotation); ?>deg);">
                        <?php echo $washi_tape; ?>
                    </div>
                <?php endif; ?>

                <?php if ($product->is_on_sale()): ?>
                    <span class="onsale"><?php esc_html_e('Sale!', 'woocommerce'); ?></span>
                <?php endif; ?>

                <div class="polaroid-frame">
                    <a href="<?php echo esc_url($product->get_permalink()); ?>">
                        <?php echo $product->get_image('scrapbook_polaroid'); ?>
                    </a>
                </div>
            </div>

            <div class="product-details">
                <h3 class="product-title">
                    <a href="<?php echo esc_url($product->get_permalink()); ?>">
                        <?php echo esc_html($product->get_name()); ?>
                    </a>
                </h3>

                <?php woocommerce_template_loop_rating(); ?>

                <div class="price"><?php echo $product->get_price_html(); ?></div>
            </div>

            <div class="product-actions">
                <?php woocommerce_template_loop_add_to_cart(); ?>
            </div>
        </div>
    </div>
<?php
}

================
File: tljc-posts/assets/css/tljc-posts.css
================
/* TLJC Posts Collection Styles - Integrated with Washi Tape Generator */

.tljc-posts-container {
    display: grid;
    gap: 40px;
    padding: 30px 0;
    margin: 20px 0;
    position: relative;
}

/* Grid Columns with proper alignment */
.tljc-posts-columns-1 {
    grid-template-columns: 1fr;
    max-width: 800px;
    margin: 0 auto;
}

.tljc-posts-columns-2 {
    grid-template-columns: repeat(2, 1fr);
}

.tljc-posts-columns-3 {
    grid-template-columns: 2fr 1fr 1fr;
}

.tljc-posts-columns-4 {
    grid-template-columns: repeat(4, 1fr);
}

/* Responsive Grid with better breakpoints */
@media (max-width: 1200px) {
    .tljc-posts-columns-4 {
        grid-template-columns: repeat(3, 1fr);
    }
}

@media (max-width: 900px) {
    .tljc-posts-container {
        grid-template-columns: 1fr;
    }

    .tljc-posts-card-wrapper:first-child {
        grid-column: span 1;
    }
}

@media (max-width: 600px) {

    .tljc-posts-columns-4,
    .tljc-posts-columns-3,
    .tljc-posts-columns-2 {
        grid-template-columns: 1fr;
    }

    .tljc-posts-container {
        gap: 25px;
        padding: 20px 0;
    }
}

/* Sophisticated Post Card Styling */
.tljc-post-card {
    position: relative;
    background: #fff;
    border-radius: 8px;
    overflow: hidden;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.tljc-post-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
}

.tljc-post-wrapper {
    position: relative;
    height: 100%;
    display: flex;
    flex-direction: column;
    padding: 20px;
    z-index: 1;
}

/* Washi Tape Integration */
.tljc-posts-card-wrapper {
    position: relative;
}

.tljc-washi-tape-element {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 0;
    pointer-events: none;
    z-index: 1000;
}

.tljc-washi-tape-element svg {
    position: absolute;
    left: 50%;
    top: -10px;
    transform: translateX(-50%) rotate(var(--tape-rotation, 0deg));
    pointer-events: none;
    z-index: 1000;
}

/* High-Quality Post Image */
.tljc-post-image {
    position: relative;
    width: 100%;
    padding-top: 66.67%;
    /* 3:2 aspect ratio */
    overflow: hidden;
}

.tljc-post-image img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
}

.tljc-post-image:hover img {
    transform: scale(1.05);
}

/* Sophisticated Typography */
.tljc-post-content {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
}

.tljc-post-title {
    margin: 0 0 15px;
    font-size: 1.25rem;
    line-height: 1.4;
}

.tljc-post-title a {
    color: inherit;
    text-decoration: none;
    transition: color 0.3s ease;
}

.tljc-post-title a:hover {
    color: #8a5cf7;
}

/* Refined Post Meta */
.tljc-post-meta {
    margin-bottom: 15px;
    font-size: 0.875rem;
    color: #666;
}

.tljc-post-date {
    display: inline-block;
}

/* Clean Post Excerpt */
.tljc-post-excerpt {
    margin-bottom: 20px;
    font-size: 0.9375rem;
    line-height: 1.6;
    color: #444;
}

/* Elegant Read More Button */
.tljc-post-link {
    margin-top: auto;
}

.tljc-read-more {
    display: inline-block;
    padding: 8px 20px;
    background-color: #8a5cf7;
    display: inline-flex;
    align-items: center;
    background: rgba(255, 255, 255, 0.8);
    color: #2c3e50;
    text-decoration: none;
    padding: 10px 20px;
    border-radius: 20px;
    font-size: 0.875rem;
    font-weight: 500;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    border: 1px solid rgba(44, 62, 80, 0.1);
    letter-spacing: 0.02em;
}

.tljc-read-more:hover {
    background: rgba(255, 255, 255, 0.95);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    border-color: rgba(44, 62, 80, 0.2);
    color: #1a252f;
}

.tljc-read-more::after {
    content: "→";
    margin-left: 8px;
    transition: transform 0.3s ease;
}

.tljc-read-more:hover::after {
    transform: translateX(3px);
}

/* Elegant Pagination */
.tljc-posts-pagination {
    text-align: center;
    margin: 50px 0 30px;
    padding: 30px 0;
}

.tljc-posts-pagination .page-numbers {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    min-width: 44px;
    height: 44px;
    margin: 0 4px;
    background: rgba(255, 255, 255, 0.8);
    color: #2c3e50;
    text-decoration: none;
    border-radius: 8px;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    font-weight: 500;
    font-size: 0.875rem;
    border: 1px solid rgba(44, 62, 80, 0.1);
}

.tljc-posts-pagination .page-numbers:hover,
.tljc-posts-pagination .page-numbers.current {
    background: rgba(255, 255, 255, 0.95);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    border-color: rgba(44, 62, 80, 0.2);
}

.tljc-posts-pagination .page-numbers.current {
    background: #f8e6e6;
    color: #2c3e50;
    border-color: rgba(248, 230, 230, 0.8);
}

/* Improved Featured Post Layout */
@media (min-width: 900px) {

    .tljc-posts-columns-3 .tljc-post-card:first-child,
    .tljc-posts-columns-4 .tljc-post-card:first-child {
        grid-column: 1 / 3;
        display: flex;
        flex-direction: row;
        align-items: stretch;
    }

    .tljc-posts-columns-3 .tljc-post-card:first-child .tljc-post-wrapper,
    .tljc-posts-columns-4 .tljc-post-card:first-child .tljc-post-wrapper {
        flex-direction: row;
        padding: 0;
    }

    .tljc-posts-columns-3 .tljc-post-card:first-child .tljc-post-image,
    .tljc-posts-columns-4 .tljc-post-card:first-child .tljc-post-image {
        width: 45%;
        margin: 0;
        border-radius: 6px 0 0 6px;
        flex-shrink: 0;
    }

    .tljc-posts-columns-3 .tljc-post-card:first-child .tljc-post-image img,
    .tljc-posts-columns-4 .tljc-post-card:first-child .tljc-post-image img {
        height: 100%;
        min-height: 280px;
    }

    .tljc-posts-columns-3 .tljc-post-card:first-child .tljc-post-content,
    .tljc-posts-columns-4 .tljc-post-card:first-child .tljc-post-content {
        padding: 30px;
        width: 55%;
    }

    .tljc-posts-columns-3 .tljc-post-card:first-child .tljc-post-title,
    .tljc-posts-columns-4 .tljc-post-card:first-child .tljc-post-title {
        font-size: 1.5rem;
        margin-bottom: 16px;
    }
}

/* Smooth Entry Animation */
@keyframes tljc-fade-in-up {
    from {
        opacity: 0;
        transform: translateY(30px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.tljc-post-card {
    animation: tljc-fade-in-up 0.6s cubic-bezier(0.4, 0, 0.2, 1) forwards;
}

.tljc-post-card:nth-child(1) {
    animation-delay: 0s;
}

.tljc-post-card:nth-child(2) {
    animation-delay: 0.1s;
}

.tljc-post-card:nth-child(3) {
    animation-delay: 0.2s;
}

.tljc-post-card:nth-child(4) {
    animation-delay: 0.3s;
}

.tljc-post-card:nth-child(5) {
    animation-delay: 0.4s;
}

.tljc-post-card:nth-child(6) {
    animation-delay: 0.5s;
}

/* Card border enhancement */
.tljc-post-card::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border-radius: 6px;
    border: 1px solid rgba(255, 255, 255, 0.4);
    pointer-events: none;
    z-index: 1;
}

/* No posts message styling */
.tljc-posts-container+p {
    text-align: center;
    color: #7f8c8d;
    font-style: italic;
    padding: 40px 20px;
    background: rgba(255, 255, 255, 0.5);
    border-radius: 8px;
    margin: 20px 0;
}

/* Washi Tape Positioning Variations */
.tljc-post-card:nth-child(3n+2) .tljc-washi-tape-element[data-washi-tape-position="top-center"] {
    left: 45% !important;
    transform: translateX(-50%) rotate(2deg) !important;
}

.tljc-post-card:nth-child(4n+3) .tljc-washi-tape-element[data-washi-tape-position="top-center"] {
    left: 55% !important;
    transform: translateX(-50%) rotate(-1deg) !important;
}

.tljc-post-card:nth-child(5n+4) .tljc-washi-tape-element[data-washi-tape-position="top-center"] {
    left: 40% !important;
    transform: translateX(-50%) rotate(1.5deg) !important;
}

/* Ensure washi tape is visible above card background */
.tljc-post-card::before {
    z-index: 0;
}

/* Post Grid Layout */
.tljc-posts-grid {
    display: grid;
    grid-gap: 30px;
    margin: 0;
    padding: 0;
}

.tljc-posts-grid.columns-1 {
    grid-template-columns: 1fr;
}

.tljc-posts-grid.columns-2 {
    grid-template-columns: repeat(2, 1fr);
}

.tljc-posts-grid.columns-3 {
    grid-template-columns: repeat(3, 1fr);
}

.tljc-posts-grid.columns-4 {
    grid-template-columns: repeat(4, 1fr);
}

/* Post Card Styles */
.tljc-post-wrapper {
    position: relative;
    background: #fff;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
}

.tljc-post-wrapper:hover {
    transform: translateY(-5px);
}

.tljc-post-image {
    position: relative;
    padding-top: 66.67%;
    /* 3:2 aspect ratio */
    overflow: hidden;
}

.tljc-post-image img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
}

.tljc-post-wrapper:hover .tljc-post-image img {
    transform: scale(1.05);
}

.tljc-post-content {
    padding: 20px;
}

.tljc-post-title {
    margin: 0 0 15px;
    font-size: 1.25em;
    line-height: 1.4;
}

.tljc-post-title a {
    color: inherit;
    text-decoration: none;
}

.tljc-post-meta {
    font-size: 0.9em;
    color: #666;
    margin-bottom: 15px;
}

.tljc-post-excerpt {
    margin-bottom: 20px;
    line-height: 1.6;
}

.tljc-post-link {
    margin-top: 20px;
}

.tljc-read-more {
    display: inline-block;
    padding: 8px 20px;
    background: #f0f0f0;
    color: #333;
    text-decoration: none;
    border-radius: 4px;
    transition: background 0.3s ease;
}

.tljc-read-more:hover {
    background: #e0e0e0;
}

/* Responsive Styles */
@media (max-width: 1024px) {
    .tljc-posts-grid.columns-4 {
        grid-template-columns: repeat(3, 1fr);
    }
}

@media (max-width: 768px) {

    .tljc-posts-grid.columns-3,
    .tljc-posts-grid.columns-4 {
        grid-template-columns: repeat(2, 1fr);
    }
}

@media (max-width: 480px) {
    .tljc-posts-grid {
        grid-template-columns: 1fr !important;
    }
}

/* Ensure post card is positioned for absolute washi tape centering */
.tljc-post-card {
    position: relative;
    /* already present, but ensure it's not overridden elsewhere */
}

/* Ensure SVG overlays are always on top */
.tljc-post-card svg {
    z-index: 20;
    pointer-events: none;
}

/* Ensure washi tape element is full width for center positions */
.tljc-washi-tape-element[data-position*="center"] {
    left: 0;
    right: 0;
    width: 100%;
}

/* Magazine style: first card larger */
.tljc-posts-columns-3 .tljc-posts-card-wrapper:first-child {
    grid-column: span 2;
}

.tljc-posts-card-wrapper .tljc-post-card {
    height: 100%;
}

================
File: tljc-posts/assets/js/editor.js
================
/**
 * TLJC Posts Editor Script
 */
(function ($) {
    'use strict';

    var TLJCPostsEditor = {
        init: function () {
            this.initWashiTapePreview();
        },

        initWashiTapePreview: function () {
            // Initialize washi tape preview when element is ready
            elementor.hooks.addAction('panel/open_editor/widget/tljc_posts', this.onPanelOpen);
            elementor.hooks.addAction('panel/open_editor/widget/tljc_posts', this.onPanelChange);
        },

        onPanelOpen: function (panel, model, view) {
            // Initialize preview when panel opens
            TLJCPostsEditor.updateWashiTapePreview(panel);
        },

        onPanelChange: function (panel, model, view) {
            // Update preview when settings change
            panel.$el.on('change', 'select, input', function () {
                TLJCPostsEditor.updateWashiTapePreview(panel);
            });
        },

        updateWashiTapePreview: function (panel) {
            var $element = panel.$el.closest('.elementor-element');
            var $cards = $element.find('.tljc-post-card');
            var settings = panel.getSettings();

            $cards.each(function () {
                var $card = $(this);
                $card.find('.tljc-washi-tape-element').remove();
                if (settings.show_washi_tape === 'yes' && settings.washi_tape_style) {
                    var $tape = $('<div class="tljc-washi-tape-element"></div>')
                        .attr('data-tape-id', settings.washi_tape_style)
                        .attr('data-position', settings.washi_tape_position)
                        .attr('data-rotation', settings.washi_tape_rotation && settings.washi_tape_rotation.size ? settings.washi_tape_rotation.size : 0)
                        .attr('data-width', settings.washi_tape_width && settings.washi_tape_width.size ? settings.washi_tape_width.size : 180)
                        .attr('data-height', settings.washi_tape_height && settings.washi_tape_height.size ? settings.washi_tape_height.size : 45);
                    $card.prepend($tape);
                }
            });

            if (typeof initWashiTapes === 'function') {
                initWashiTapes();
                // Fallback: if SVG is not present, try again after a short delay
                setTimeout(function () {
                    $cards.find('.tljc-washi-tape-element').each(function () {
                        if (!$(this).find('svg').length) {
                            initWashiTapes();
                        }
                    });
                }, 300);
            }
        }
    };

    // Initialize when Elementor is ready
    $(window).on('elementor/frontend/init', function () {
        elementor.hooks.addAction('frontend/element_ready/tljc_posts.default', function () {
            TLJCPostsEditor.init();
        });
    });

})(jQuery);

================
File: tljc-posts/widgets/class-tljc-posts-widget.php
================
<?php
/**
 * TLJC Posts Widget
 */

if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly.
}

class TLJC_Posts_Widget extends \Elementor\Widget_Base
{
    const VERSION = '1.0.0';

    public function get_name()
    {
        return 'tljc_posts';
    }

    public function get_title()
    {
        return __('TLJC Posts Collection', 'tljc-posts');
    }

    public function get_icon()
    {
        return 'eicon-posts-grid';
    }

    public function get_categories()
    {
        return ['general'];
    }

    public function get_keywords()
    {
        return ['blog', 'posts', 'tljc', 'journal', 'archive'];
    }

    protected function get_washi_tape_options()
    {
        $options = [
            'none' => __('None', 'tljc-posts'),
        ];

        // Check if Washi Tape Generator plugin is active
        if (class_exists('Washi_Tape_DB')) {
            try {
                $db = new \Washi_Tape_DB();
                $washi_tapes = $db->get_all_washi_tapes();

                if (!empty($washi_tapes) && is_array($washi_tapes)) {
                    foreach ($washi_tapes as $tape) {
                        if (isset($tape->id) && isset($tape->title)) {
                            $options[$tape->id] = $tape->title;
                        }
                    }
                } else {
                    $options['create'] = __('Create washi tapes in admin first', 'tljc-posts');
                }
            } catch (Exception $e) {
                $options['error'] = __('Error loading washi tapes', 'tljc-posts');
            }
        } else {
            $options['install'] = __('Install Washi Tape Generator plugin', 'tljc-posts');
        }

        return $options;
    }

    /**
     * Register widget controls
     */
    protected function _register_controls()
    {
        // Content Section
        $this->start_controls_section(
            'content_section',
            [
                'label' => __('Content', 'tljc-posts'),
                'tab' => \Elementor\Controls_Manager::TAB_CONTENT,
            ]
        );

        $this->add_control(
            'posts_per_page',
            [
                'label' => __('Posts Per Page', 'tljc-posts'),
                'type' => \Elementor\Controls_Manager::NUMBER,
                'default' => 6,
                'min' => 1,
                'max' => 12,
            ]
        );

        $this->add_control(
            'columns',
            [
                'label' => __('Columns', 'tljc-posts'),
                'type' => \Elementor\Controls_Manager::SELECT,
                'default' => '3',
                'options' => [
                    '1' => __('1 Column', 'tljc-posts'),
                    '2' => __('2 Columns', 'tljc-posts'),
                    '3' => __('3 Columns', 'tljc-posts'),
                    '4' => __('4 Columns', 'tljc-posts'),
                ],
            ]
        );

        $this->add_control(
            'orderby',
            [
                'label' => __('Order By', 'tljc-posts'),
                'type' => \Elementor\Controls_Manager::SELECT,
                'default' => 'date',
                'options' => [
                    'date' => __('Date', 'tljc-posts'),
                    'title' => __('Title', 'tljc-posts'),
                    'rand' => __('Random', 'tljc-posts'),
                ],
            ]
        );

        $this->add_control(
            'order',
            [
                'label' => __('Order', 'tljc-posts'),
                'type' => \Elementor\Controls_Manager::SELECT,
                'default' => 'DESC',
                'options' => [
                    'DESC' => __('Descending', 'tljc-posts'),
                    'ASC' => __('Ascending', 'tljc-posts'),
                ],
            ]
        );

        $this->add_control(
            'show_excerpt',
            [
                'label' => __('Show Excerpt', 'tljc-posts'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'label_on' => __('Show', 'tljc-posts'),
                'label_off' => __('Hide', 'tljc-posts'),
                'return_value' => 'yes',
                'default' => 'yes',
            ]
        );

        $this->add_control(
            'excerpt_length',
            [
                'label' => __('Excerpt Length', 'tljc-posts'),
                'type' => \Elementor\Controls_Manager::NUMBER,
                'default' => 20,
                'condition' => [
                    'show_excerpt' => 'yes',
                ],
            ]
        );

        $this->add_control(
            'show_meta',
            [
                'label' => __('Show Meta', 'tljc-posts'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'label_on' => __('Show', 'tljc-posts'),
                'label_off' => __('Hide', 'tljc-posts'),
                'return_value' => 'yes',
                'default' => 'yes',
            ]
        );

        $this->add_control(
            'show_date',
            [
                'label' => __('Show Date', 'tljc-posts'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'label_on' => __('Show', 'tljc-posts'),
                'label_off' => __('Hide', 'tljc-posts'),
                'return_value' => 'yes',
                'default' => 'yes',
                'condition' => [
                    'show_meta' => 'yes',
                ],
            ]
        );

        $this->add_control(
            'show_read_more',
            [
                'label' => __('Show Read More', 'tljc-posts'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'label_on' => __('Show', 'tljc-posts'),
                'label_off' => __('Hide', 'tljc-posts'),
                'return_value' => 'yes',
                'default' => 'yes',
            ]
        );

        $this->add_control(
            'read_more_text',
            [
                'label' => __('Read More Text', 'tljc-posts'),
                'type' => \Elementor\Controls_Manager::TEXT,
                'default' => __('Read More', 'tljc-posts'),
                'condition' => [
                    'show_read_more' => 'yes',
                ],
            ]
        );

        $this->end_controls_section();

        // Washi Tape Section
        $this->start_controls_section(
            'washi_tape_section',
            [
                'label' => __('Washi Tape', 'tljc-posts'),
                'tab' => \Elementor\Controls_Manager::TAB_CONTENT,
            ]
        );

        $this->add_control(
            'show_washi_tape',
            [
                'label' => __('Show Washi Tape', 'tljc-posts'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'label_on' => __('Show', 'tljc-posts'),
                'label_off' => __('Hide', 'tljc-posts'),
                'return_value' => 'yes',
                'default' => 'no',
            ]
        );

        $this->add_control(
            'washi_tape_style',
            [
                'label' => __('Washi Tape Style', 'tljc-posts'),
                'type' => \Elementor\Controls_Manager::SELECT,
                'default' => '',
                'options' => $this->get_washi_tape_options(),
                'condition' => [
                    'show_washi_tape' => 'yes',
                ],
            ]
        );

        $this->add_control(
            'washi_tape_position',
            [
                'label' => __('Position', 'tljc-posts'),
                'type' => \Elementor\Controls_Manager::SELECT,
                'default' => 'top-center',
                'options' => [
                    'top-center' => __('Top Center', 'tljc-posts'),
                    'top-left' => __('Top Left', 'tljc-posts'),
                    'top-right' => __('Top Right', 'tljc-posts'),
                    'bottom-center' => __('Bottom Center', 'tljc-posts'),
                    'bottom-left' => __('Bottom Left', 'tljc-posts'),
                    'bottom-right' => __('Bottom Right', 'tljc-posts'),
                ],
                'condition' => [
                    'show_washi_tape' => 'yes',
                    'washi_tape_style!' => '',
                ],
            ]
        );

        $this->add_control(
            'washi_tape_rotation',
            [
                'label' => __('Rotation', 'tljc-posts'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['deg'],
                'range' => [
                    'deg' => [
                        'min' => -180,
                        'max' => 180,
                    ],
                ],
                'default' => [
                    'unit' => 'deg',
                    'size' => 0,
                ],
                'condition' => [
                    'show_washi_tape' => 'yes',
                    'washi_tape_style!' => '',
                ],
            ]
        );

        $this->add_control(
            'washi_tape_width',
            [
                'label' => __('Width', 'tljc-posts'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px', '%'],
                'range' => [
                    'px' => [
                        'min' => 50,
                        'max' => 500,
                        'step' => 1,
                    ],
                    '%' => [
                        'min' => 10,
                        'max' => 100,
                        'step' => 1,
                    ],
                ],
                'default' => [
                    'unit' => 'px',
                    'size' => 180,
                ],
                'condition' => [
                    'show_washi_tape' => 'yes',
                    'washi_tape_style!' => '',
                ],
            ]
        );

        $this->add_control(
            'washi_tape_height',
            [
                'label' => __('Height', 'tljc-posts'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px', '%'],
                'range' => [
                    'px' => [
                        'min' => 10,
                        'max' => 200,
                        'step' => 1,
                    ],
                    '%' => [
                        'min' => 5,
                        'max' => 50,
                        'step' => 1,
                    ],
                ],
                'default' => [
                    'unit' => 'px',
                    'size' => 45,
                ],
                'condition' => [
                    'show_washi_tape' => 'yes',
                    'washi_tape_style!' => '',
                ],
            ]
        );

        $this->add_control(
            'washi_tape_offset_x',
            [
                'label' => __('Horizontal Offset', 'tljc-posts'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px', '%'],
                'range' => [
                    'px' => [
                        'min' => -100,
                        'max' => 100,
                        'step' => 1,
                    ],
                    '%' => [
                        'min' => -50,
                        'max' => 50,
                        'step' => 1,
                    ],
                ],
                'default' => [
                    'unit' => 'px',
                    'size' => 0,
                ],
                'condition' => [
                    'show_washi_tape' => 'yes',
                    'washi_tape_style!' => '',
                ],
            ]
        );

        $this->add_control(
            'washi_tape_offset_y',
            [
                'label' => __('Vertical Offset', 'tljc-posts'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px', '%'],
                'range' => [
                    'px' => [
                        'min' => -100,
                        'max' => 100,
                        'step' => 1,
                    ],
                    '%' => [
                        'min' => -50,
                        'max' => 50,
                        'step' => 1,
                    ],
                ],
                'default' => [
                    'unit' => 'px',
                    'size' => 0,
                ],
                'condition' => [
                    'show_washi_tape' => 'yes',
                    'washi_tape_style!' => '',
                ],
            ]
        );

        $this->end_controls_section();

        // Style Section
        $this->start_controls_section(
            'style_section',
            [
                'label' => __('Style', 'tljc-posts'),
                'tab' => \Elementor\Controls_Manager::TAB_STYLE,
            ]
        );

        $this->add_control(
            'card_background_color',
            [
                'label' => __('Card Background Color', 'tljc-posts'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'selectors' => [
                    '{{WRAPPER}} .tljc-post-card' => 'background-color: {{VALUE}}',
                ],
                'default' => '#ffffff',
            ]
        );

        $this->add_control(
            'card_padding',
            [
                'label' => __('Card Padding', 'tljc-posts'),
                'type' => \Elementor\Controls_Manager::DIMENSIONS,
                'size_units' => ['px', 'em', '%'],
                'selectors' => [
                    '{{WRAPPER}} .tljc-post-card' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
                ],
                'default' => [
                    'top' => '20',
                    'right' => '20',
                    'bottom' => '20',
                    'left' => '20',
                    'unit' => 'px',
                    'isLinked' => true,
                ],
            ]
        );

        $this->add_group_control(
            \Elementor\Group_Control_Border::get_type(),
            [
                'name' => 'card_border',
                'label' => __('Card Border', 'tljc-posts'),
                'selector' => '{{WRAPPER}} .tljc-post-card',
            ]
        );

        $this->add_control(
            'card_border_radius',
            [
                'label' => __('Border Radius', 'tljc-posts'),
                'type' => \Elementor\Controls_Manager::DIMENSIONS,
                'size_units' => ['px', '%'],
                'selectors' => [
                    '{{WRAPPER}} .tljc-post-card' => 'border-radius: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
                ],
                'default' => [
                    'top' => '8',
                    'right' => '8',
                    'bottom' => '8',
                    'left' => '8',
                    'unit' => 'px',
                    'isLinked' => true,
                ],
            ]
        );

        $this->add_group_control(
            \Elementor\Group_Control_Box_Shadow::get_type(),
            [
                'name' => 'card_box_shadow',
                'label' => __('Box Shadow', 'tljc-posts'),
                'selector' => '{{WRAPPER}} .tljc-post-card',
            ]
        );

        $this->add_control(
            'read_more_color',
            [
                'label' => __('Read More Button Color', 'tljc-posts'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'selectors' => [
                    '{{WRAPPER}} .tljc-read-more' => 'color: {{VALUE}};',
                    '{{WRAPPER}} .tljc-read-more' => 'background-color: {{VALUE}};',
                ],
            ]
        );

        // Heading Typography
        $this->add_control(
            'heading_style_heading',
            [
                'label' => __('Heading', 'tljc-posts'),
                'type' => \Elementor\Controls_Manager::HEADING,
            ]
        );
        $this->add_control(
            'heading_color',
            [
                'label' => __('Heading Color', 'tljc-posts'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'selectors' => [
                    '{{WRAPPER}} .tljc-post-title' => 'color: {{VALUE}};',
                ],
            ]
        );
        $this->add_group_control(
            \Elementor\Group_Control_Typography::get_type(),
            [
                'name' => 'heading_typography',
                'label' => __('Heading Typography', 'tljc-posts'),
                'selector' => '{{WRAPPER}} .tljc-post-title',
            ]
        );
        // Body Typography
        $this->add_control(
            'body_style_heading',
            [
                'label' => __('Body', 'tljc-posts'),
                'type' => \Elementor\Controls_Manager::HEADING,
            ]
        );
        $this->add_control(
            'body_color',
            [
                'label' => __('Body Color', 'tljc-posts'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'selectors' => [
                    '{{WRAPPER}} .tljc-post-content' => 'color: {{VALUE}};',
                ],
            ]
        );
        $this->add_group_control(
            \Elementor\Group_Control_Typography::get_type(),
            [
                'name' => 'body_typography',
                'label' => __('Body Typography', 'tljc-posts'),
                'selector' => '{{WRAPPER}} .tljc-post-content',
            ]
        );

        $this->end_controls_section();

        // Add editor preview script
        add_action('elementor/editor/after_enqueue_scripts', function () {
            wp_enqueue_script(
                'tljc-posts-editor',
                plugin_dir_url(__FILE__) . '../assets/js/editor.js',
                ['jquery'],
                self::VERSION,
                true
            );
        });
    }

    /**
     * Render widget output on the frontend
     */
    protected function render()
    {
        $settings = $this->get_settings_for_display();
        $columns = isset($settings['columns']) ? $settings['columns'] : '3';
        $container_class = 'tljc-posts-container tljc-posts-columns-' . $columns;

        // Query posts
        $args = array(
            'post_type' => 'post',
            'posts_per_page' => $settings['posts_per_page'],
            'orderby' => $settings['orderby'],
            'order' => $settings['order'],
        );

        $query = new \WP_Query($args);

        // Collect all tape IDs used in this widget
        $tape_ids = [];
        if ($settings['show_washi_tape'] === 'yes' && !empty($settings['washi_tape_style'])) {
            $tape_ids[] = intval($settings['washi_tape_style']);
        }

        // Output all unique washi tape templates at the top
        if (!empty($tape_ids)) {
            global $wpdb;
            $table_name = $wpdb->prefix . 'washi_tapes';
            foreach (array_unique($tape_ids) as $tape_id) {
                $tape = $wpdb->get_row($wpdb->prepare("SELECT * FROM $table_name WHERE id = %d", $tape_id));
                if ($tape && !empty($tape->svg)) {
                    $svg = $tape->svg;
                    $svg = str_replace('\\&quot;', '"', $svg);
                    $svg = str_replace('&quot;', '"', $svg);
                    $svg = str_replace('\\"', '"', $svg);
                    $svg = preg_replace('/\s+/', ' ', $svg);
                    $svg = str_replace('" >', '">', $svg);
                    $svg = str_replace('> <', '><', $svg);
                    $svg = preg_replace('/style="[^"]*"/', '', $svg);
                    // Output hidden template
                    echo '<div class="washi-tape-template" id="washi-tape-' . esc_attr($tape_id) . '" style="display:none;">' . $svg . '</div>';
                }
            }
        }

        if ($query->have_posts()):
            ?>
            <div class="<?php echo esc_attr($container_class); ?>">
                <?php
                $i = 0;
                while ($query->have_posts()):
                    $query->the_post();
                    $i++;
                    $show_tape = $settings['show_washi_tape'] === 'yes' && !empty($settings['washi_tape_style']);
                    $tape_attrs = $show_tape ? 'data-tape-id="' . esc_attr($settings['washi_tape_style']) . '" '
                        . 'data-position="' . esc_attr($settings['washi_tape_position']) . '" '
                        . 'data-rotation="' . esc_attr(isset($settings['washi_tape_rotation']['size']) ? $settings['washi_tape_rotation']['size'] : 0) . '" '
                        . 'data-width="' . esc_attr(isset($settings['washi_tape_width']['size']) ? $settings['washi_tape_width']['size'] : 180) . '" '
                        . 'data-height="' . esc_attr(isset($settings['washi_tape_height']['size']) ? $settings['washi_tape_height']['size'] : 45) . '" '
                        . 'data-vertical-offset="' . esc_attr(isset($settings['washi_tape_offset_y']['size']) ? $settings['washi_tape_offset_y']['size'] : 0) . '" '
                        . 'data-horizontal-offset="' . esc_attr(isset($settings['washi_tape_offset_x']['size']) ? $settings['washi_tape_offset_x']['size'] : 0) . '"' : '';
                    ?>
                    <div class="tljc-posts-card-wrapper" style="position: relative;">
                        <?php if ($show_tape): ?>
                            <div class="tljc-washi-tape-element" <?php echo $tape_attrs; ?>></div>
                        <?php endif; ?>
                        <div class="tljc-post-card">
                            <div class="tljc-post-image">
                                <?php if (has_post_thumbnail()): ?>
                                    <?php the_post_thumbnail('large'); ?>
                                <?php endif; ?>
                            </div>
                            <div class="tljc-post-content">
                                <h2 class="tljc-post-title">
                                    <a href="<?php the_permalink(); ?>"><?php the_title(); ?></a>
                                </h2>
                                <?php if ($settings['show_meta'] === 'yes' && $settings['show_date'] === 'yes'): ?>
                                    <div class="tljc-post-meta">
                                        <span class="tljc-post-date"><?php echo get_the_date(); ?></span>
                                    </div>
                                <?php endif; ?>
                                <?php if ($settings['show_excerpt'] === 'yes'): ?>
                                    <div class="tljc-post-excerpt">
                                        <?php echo wp_trim_words(get_the_excerpt(), $settings['excerpt_length']); ?>
                                    </div>
                                <?php endif; ?>
                                <?php if ($settings['show_read_more'] === 'yes'): ?>
                                    <div class="tljc-post-link">
                                        <a href="<?php the_permalink(); ?>" class="tljc-read-more">
                                            <?php echo esc_html($settings['read_more_text']); ?>
                                        </a>
                                    </div>
                                <?php endif; ?>
                            </div>
                        </div>
                    </div>
                <?php endwhile;
                wp_reset_postdata(); ?>
            </div>
            <?php
        endif;
    }
}

================
File: tljc-posts/README.md
================
# TLJC Posts Collection Plugin

A beautiful, crafty-styled blog post archive widget designed specifically for The Little Journal Club website. This Elementor widget creates stunning blog post grids that perfectly match your journal theme aesthetic.

## Features

✨ **Beautiful Journal-Style Cards** - Each post is displayed in a card that mimics the journal entry styling from your theme

🎨 **Washi Tape Decorations** - Decorative washi tape elements that can be customized or randomized

📱 **Fully Responsive** - Looks great on all devices with responsive grid layouts

⚡ **Smooth Animations** - Hover effects and entry animations for engaging user experience

🎛️ **Elementor Integration** - Full Elementor widget with live editing capabilities

## Styling Options

### Washi Tape Styles

- **Pink** - Soft pink with polka dot pattern
- **Mint** - Fresh mint green solid
- **Lavender** - Gentle purple tone
- **Grid** - Light blue with grid pattern
- **Mixed** - Randomly assigns different styles to each post
- **None** - No washi tape decoration

### Layout Options

- 1-4 column grid layouts
- Responsive breakpoints
- Custom spacing and gaps
- Featured post highlighting (first post spans multiple columns)

### Content Controls

- Posts per page (1-12)
- Show/hide excerpts with custom length
- Show/hide post date
- Show/hide author name
- Custom card background colors
- Custom title colors

## CSS Customization

The plugin uses these main CSS classes that you can further customize:

- `.tljc-posts-container` - Main grid container
- `.tljc-post-card` - Individual post cards
- `.tljc-tape-decoration` - Washi tape elements
- `.tljc-post-title` - Post titles
- `.tljc-post-excerpt` - Post excerpts
- `.tljc-read-more` - Read more buttons

## Compatibility

- WordPress 5.0+
- Elementor 2.0+
- PHP 7.0+
- Works with your existing TLJC theme
- Compatible with WooCommerce pages

## Support

This plugin is designed specifically for The Little Journal Club website and incorporates the existing design system including:

- Color palette (#c9dbec, #ffb3ba, #baffc9, #bae1ff, etc.)
- Typography styles
- Shadow and hover effects
- Grid paper background compatibility
- Journal entry aesthetics

## Version History

**v1.0.0** - Initial release

- Core widget functionality
- Responsive grid layouts
- Washi tape decorations
- Journal-style card design
- Elementor integration

================
File: tljc-posts/tljc-posts.php
================
<?php
/**
 * Plugin Name: TLJC Posts Collection
 * Description: A beautiful blog post archive widget for The Little Journal Club
 * Version: 1.0.2
 * Author: The Little Journal Club
 * Text Domain: tljc-posts
 */


if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly.
}

final class TLJC_Posts_Plugin
{

    const VERSION = '1.0.0';
    const MINIMUM_ELEMENTOR_VERSION = '2.0.0';
    const MINIMUM_PHP_VERSION = '7.0';

    private static $_instance = null;

    public static function instance()
    {
        if (is_null(self::$_instance)) {
            self::$_instance = new self();
        }
        return self::$_instance;
    }

    public function __construct()
    {
        add_action('init', [$this, 'i18n']);
        add_action('plugins_loaded', [$this, 'init']);
    }

    public function i18n()
    {
        load_plugin_textdomain('tljc-posts');
    }

    public function init()
    {
        // Check if Elementor installed and activated
        if (!did_action('elementor/loaded')) {
            add_action('admin_notices', [$this, 'admin_notice_missing_main_plugin']);
            return;
        }

        // Check for required Elementor version
        if (!version_compare(ELEMENTOR_VERSION, self::MINIMUM_ELEMENTOR_VERSION, '>=')) {
            add_action('admin_notices', [$this, 'admin_notice_minimum_elementor_version']);
            return;
        }

        // Check for required PHP version
        if (version_compare(PHP_VERSION, self::MINIMUM_PHP_VERSION, '<')) {
            add_action('admin_notices', [$this, 'admin_notice_minimum_php_version']);
            return;
        }

        // Check for Washi Tape Generator plugin (recommended but not required)
        if (!class_exists('Washi_Tape_DB')) {
            add_action('admin_notices', [$this, 'admin_notice_washi_tape_recommended']);
        }

        // Add Plugin actions
        add_action('elementor/widgets/widgets_registered', [$this, 'init_widgets']);
        add_action('wp_enqueue_scripts', [$this, 'enqueue_styles']);
    }

    public function admin_notice_missing_main_plugin()
    {
        if (isset($_GET['activate']))
            unset($_GET['activate']);
        $message = sprintf(
            esc_html__('"%1$s" requires "%2$s" to be installed and activated.', 'tljc-posts'),
            '<strong>' . esc_html__('TLJC Posts Collection', 'tljc-posts') . '</strong>',
            '<strong>' . esc_html__('Elementor', 'tljc-posts') . '</strong>'
        );
        printf('<div class="notice notice-warning is-dismissible"><p>%1$s</p></div>', $message);
    }

    public function admin_notice_minimum_elementor_version()
    {
        if (isset($_GET['activate']))
            unset($_GET['activate']);
        $message = sprintf(
            esc_html__('"%1$s" requires "%2$s" version %3$s or greater.', 'tljc-posts'),
            '<strong>' . esc_html__('TLJC Posts Collection', 'tljc-posts') . '</strong>',
            '<strong>' . esc_html__('Elementor', 'tljc-posts') . '</strong>',
            self::MINIMUM_ELEMENTOR_VERSION
        );
        printf('<div class="notice notice-warning is-dismissible"><p>%1$s</p></div>', $message);
    }

    public function admin_notice_minimum_php_version()
    {
        if (isset($_GET['activate']))
            unset($_GET['activate']);
        $message = sprintf(
            esc_html__('"%1$s" requires "%2$s" version %3$s or greater.', 'tljc-posts'),
            '<strong>' . esc_html__('TLJC Posts Collection', 'tljc-posts') . '</strong>',
            '<strong>' . esc_html__('PHP', 'tljc-posts') . '</strong>',
            self::MINIMUM_PHP_VERSION
        );
        printf('<div class="notice notice-warning is-dismissible"><p>%1$s</p></div>', $message);
    }

    public function admin_notice_washi_tape_recommended()
    {
        $message = sprintf(
            esc_html__('"%1$s" works best with the "%2$s" plugin for authentic washi tape designs with torn edges.', 'tljc-posts'),
            '<strong>' . esc_html__('TLJC Posts Collection', 'tljc-posts') . '</strong>',
            '<strong>' . esc_html__('Washi Tape Generator', 'tljc-posts') . '</strong>'
        );
        printf('<div class="notice notice-info is-dismissible"><p>%1$s <a href="admin.php?page=washi-tape-generator">Create washi tapes &rarr;</a></p></div>', $message);
    }

    public function init_widgets()
    {
        // Check if Typography control is available
        if (!class_exists('\Elementor\Group_Control_Typography')) {
            return;
        }

        // Include Widget files
        require_once(__DIR__ . '/widgets/class-tljc-posts-widget.php');

        // Register widget
        \Elementor\Plugin::instance()->widgets_manager->register_widget_type(new \TLJC_Posts_Widget());
    }

    public function enqueue_styles()
    {
        // Enqueue our styles
        wp_enqueue_style(
            'tljc-posts-style',
            plugin_dir_url(__FILE__) . 'assets/css/tljc-posts.css',
            [],
            self::VERSION
        );

        // If Washi Tape Generator is active, ensure its scripts are loaded
        if (class_exists('Washi_Tape_DB')) {
            // Enqueue Washi Tape Generator's frontend script if not already enqueued
            if (!wp_script_is('washi-tape-frontend-script', 'enqueued')) {
                wp_enqueue_script(
                    'washi-tape-frontend-script',
                    WASHI_TAPE_PLUGIN_URL . 'assets/js/frontend-script.js',
                    ['jquery'],
                    WASHI_TAPE_VERSION,
                    true
                );
            }

            // Enqueue Washi Tape Generator's frontend styles if not already enqueued
            if (!wp_style_is('washi-tape-frontend-style', 'enqueued')) {
                wp_enqueue_style(
                    'washi-tape-frontend-style',
                    WASHI_TAPE_PLUGIN_URL . 'assets/css/frontend-style.css',
                    [],
                    WASHI_TAPE_VERSION
                );
            }
        }
    }
}

TLJC_Posts_Plugin::instance();

================
File: washi-tape-attacher/assets/css/editor.css
================
/*
 * Washi Tape Attacher - Editor Styles
 */

/* Make the element wrapper position relative so the tape can be positioned within it */
.elementor-element.wta-element-wrapper,
.elementor-widget-wrap.wta-element-wrapper,
.elementor-container.wta-element-wrapper {
    position: relative !important;
}

/* Base styles for the tape instance in both preview and frontend */
.wta-tape-instance,
.wta-tape-instance-preview {
    position: absolute;
    pointer-events: none; /* Prevents the tape from interfering with clicks */
    line-height: 0; /* Fixes potential spacing issues with SVG */
}

.wta-tape-instance svg,
.wta-tape-instance-preview svg {
    width: 100%;
    height: 100%;
    display: block;
}

================
File: washi-tape-attacher/assets/css/frontend.css
================
/*
 * Washi Tape Attacher - Frontend & Editor Styles
 */

/* This makes the element a positioning container for the tape */
.wta-element-wrapper {
    position: relative !important;
}

/* Base styles for the tape instance */
.wta-tape-instance {
    position: absolute;
    pointer-events: none; /* Prevents tape from interfering with clicks */
    line-height: 0;
}

.wta-tape-instance svg {
    width: 100%;
    height: 100%;
    display: block;
}

/* Positioning helpers */
.wta-pos-top-center {
    left: 50%;
    transform: translateX(-50%); /* Center the tape before applying offsets */
}

.wta-pos-top-left {
    left: 0;
}

.wta-pos-top-right {
    right: 0;
}

================
File: washi-tape-attacher/assets/js/editor.js
================
(function($) {
    'use strict';

    /**
     * This script handles the live preview updates in the Elementor editor.
     */
    var WashiTapeEditorHandler = function($scope, $) {

        // A function to update the tape based on the current settings
        var updateTapePreview = function() {
            var elementId = $scope.data('id');
            var model = elementor.elements.models[elementId];

            if (!model) {
                return;
            }

            var settings = model.get('settings').attributes;
            var $tape = $scope.find('.wta-tape-instance-preview');

            // If tape is disabled or no tape is selected, remove it and exit
            if (settings.wta_enable !== 'yes' || !settings.wta_tape_id || settings.wta_tape_id === '0') {
                if ($tape.length) {
                    $tape.remove();
                }
                return;
            }

            // If the tape div doesn't exist, create it
            if (!$tape.length) {
                $tape = $('<div class="wta-tape-instance-preview"></div>');
                $scope.append($tape);
            }

            // --- Update SVG Content ---
            var currentTapeId = $tape.attr('data-tape-id');
            if (currentTapeId !== settings.wta_tape_id) {
                $tape.attr('data-tape-id', settings.wta_tape_id);
                // Fetch new SVG via AJAX
                $.ajax({
                    url: wtaEditor.ajax_url,
                    type: 'POST',
                    data: {
                        action: 'wta_get_tape_svg',
                        nonce: wtaEditor.nonce,
                        tape_id: settings.wta_tape_id
                    },
                    success: function(response) {
                        if (response.success) {
                            $tape.html(response.data.svg);
                        } else {
                            $tape.html(''); // Clear on error
                        }
                    }
                });
            }
            
            // --- Update Styles ---
            // Get responsive settings
            var device = elementor.channels.deviceMode.request('currentMode');
            var width = settings.wta_width_tablet && device === 'tablet' ? settings.wta_width_tablet : (settings.wta_width_mobile && device === 'mobile' ? settings.wta_width_mobile : settings.wta_width);
            var height = settings.wta_height_tablet && device === 'tablet' ? settings.wta_height_tablet : (settings.wta_height_mobile && device === 'mobile' ? settings.wta_height_mobile : settings.wta_height);

            $tape.css({
                width: width.size + width.unit,
                height: height.size + height.unit,
                top: settings.wta_vertical_offset.size + settings.wta_vertical_offset.unit,
                left: settings.wta_horizontal_offset.size + settings.wta_horizontal_offset.unit,
                transform: 'rotate(' + settings.wta_rotation.size + 'deg)',
                zIndex: settings.wta_z_index
            });
        };

        // Listen for changes on the specific controls
        var controls = [
            'wta_enable', 'wta_tape_id', 'wta_width', 'wta_height', 
            'wta_horizontal_offset', 'wta_vertical_offset', 'wta_rotation', 'wta_z_index'
        ];

        $.each(controls, function(index, control_name) {
            elementor.channels.editor.on('change:' + control_name, function(controlView, editor, newValues) {
                // Check if the change happened in the current element
                if (controlView.model.get('id') === $scope.data('id')) {
                    updateTapePreview();
                }
            });
        });
        
        // Also run on device mode change to update responsive controls
        elementor.channels.deviceMode.on('change', updateTapePreview);

        // Initial update on load
        updateTapePreview();
    };

    // Register the handler for all element types
    $(window).on('elementor/frontend/init', function() {
        elementorFrontend.hooks.addAction('frontend/element_ready/widget', WashiTapeEditorHandler);
        elementorFrontend.hooks.addAction('frontend/element_ready/section', WashiTapeEditorHandler);
        elementorFrontend.hooks.addAction('frontend/element_ready/column', WashiTapeEditorHandler);
        elementorFrontend.hooks.addAction('frontend/element_ready/container', WashiTapeEditorHandler);
    });

})(jQuery);

================
File: washi-tape-attacher/includes/class-elementor-integration.php
================
<?php
namespace Washi_Tape_Attacher;

use Elementor\Controls_Manager;
use Elementor\Element_Base;

if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly.
}

/**
 * Handles the integration with Elementor.
 */
class Elementor_Integration {

    private static $_instance = null;
    private static $washi_tapes_cache = null;

    public static function instance() {
        if (is_null(self::$_instance)) {
            self::$_instance = new self();
        }
        return self::$_instance;
    }

    public function __construct() {
        // Register the controls for various element types
        add_action('elementor/element/common/_section_style/after_section_end', [$this, 'register_controls'], 10, 1);
        add_action('elementor/element/section/section_advanced/after_section_end', [$this, 'register_controls'], 10, 1);
        add_action('elementor/element/column/section_advanced/after_section_end', [$this, 'register_controls'], 10, 1);
        add_action('elementor/element/container/section_layout/after_section_end', [$this, 'register_controls'], 10, 1);

        // Render the tape on the frontend
        add_action('elementor/frontend/before_render', [$this, 'before_render'], 10, 1);
        add_action('elementor/frontend/after_render', [$this, 'after_render'], 10, 1);

        // Enqueue assets
        add_action('elementor/frontend/after_enqueue_styles', [$this, 'enqueue_frontend_styles']);
    }

    /**
     * Fetches all washi tapes from the database and caches the result.
     */
    private function get_washi_tapes() {
        if (self::$washi_tapes_cache === null) {
            self::$washi_tapes_cache = [];
            if (class_exists('Washi_Tape_DB')) {
                $db = new \Washi_Tape_DB();
                $tapes = $db->get_all_washi_tapes();
                if (!empty($tapes)) {
                    foreach ($tapes as $tape) {
                        self::$washi_tapes_cache[$tape->id] = esc_html($tape->title);
                    }
                }
            }
        }
        return ['0' => __('— Select Tape —', 'washi-tape-attacher')] + self::$washi_tapes_cache;
    }

    /**
     * Register the controls in the Elementor panel.
     */
    public function register_controls(Element_Base $element) {
        $element->start_controls_section(
            'section_washi_tape_attacher',
            [
                'label' => __('Washi Tape', 'washi-tape-attacher'),
                'tab' => Controls_Manager::TAB_ADVANCED,
            ]
        );

        $element->add_control(
            'wta_enable',
            [
                'label' => __('Enable Washi Tape', 'washi-tape-attacher'),
                'type' => Controls_Manager::SWITCHER,
                'return_value' => 'yes',
                'render_type' => 'template', // This is crucial for live preview
            ]
        );

        $element->add_control(
            'wta_tape_id',
            [
                'label' => __('Select Washi Tape', 'washi-tape-attacher'),
                'type' => Controls_Manager::SELECT,
                'options' => $this->get_washi_tapes(),
                'default' => '0',
                'condition' => ['wta_enable' => 'yes'],
                'render_type' => 'template',
            ]
        );

        $element->add_control(
            'wta_position',
            [
                'label' => __('Tape Position', 'washi-tape-attacher'),
                'type' => Controls_Manager::SELECT,
                'default' => 'top-center',
                'options' => [
                    'top-center' => __('Top Center', 'washi-tape-attacher'),
                    'top-left' => __('Top Left', 'washi-tape-attacher'),
                    'top-right' => __('Top Right', 'washi-tape-attacher'),
                ],
                'condition' => ['wta_enable' => 'yes', 'wta_tape_id!' => '0'],
                'render_type' => 'template',
            ]
        );

        $element->add_responsive_control(
            'wta_width',
            [
                'label' => __('Tape Width', 'washi-tape-attacher'),
                'type' => Controls_Manager::SLIDER,
                'size_units' => ['px', '%', 'vw'],
                'range' => ['px' => ['min' => 20, 'max' => 500]],
                'default' => ['unit' => 'px', 'size' => 120],
                'condition' => ['wta_enable' => 'yes', 'wta_tape_id!' => '0'],
                'render_type' => 'template',
                 'selectors' => [
                    '{{WRAPPER}} .wta-tape-instance' => 'width: {{SIZE}}{{UNIT}};',
                ],
            ]
        );
        
        $element->add_responsive_control(
            'wta_height',
            [
                'label' => __('Tape Height', 'washi-tape-attacher'),
                'type' => Controls_Manager::SLIDER,
                'size_units' => ['px'],
                'range' => ['px' => ['min' => 10, 'max' => 200]],
                'default' => ['unit' => 'px', 'size' => 45],
                'condition' => ['wta_enable' => 'yes', 'wta_tape_id!' => '0'],
                'render_type' => 'template',
                 'selectors' => [
                    '{{WRAPPER}} .wta-tape-instance' => 'height: {{SIZE}}{{UNIT}};',
                ],
            ]
        );

        $element->add_responsive_control(
            'wta_horizontal_offset',
            [
                'label' => __('Horizontal Offset', 'washi-tape-attacher'),
                'type' => Controls_Manager::SLIDER,
                'size_units' => ['px', '%'],
                'range' => ['px' => ['min' => -200, 'max' => 200], '%' => ['min' => -100, 'max' => 100]],
                'default' => ['unit' => 'px', 'size' => 0],
                'condition' => ['wta_enable' => 'yes', 'wta_tape_id!' => '0'],
                'render_type' => 'template',
                 'selectors' => [
                    '{{WRAPPER}} .wta-tape-instance' => 'margin-left: {{SIZE}}{{UNIT}};',
                ],
            ]
        );

        $element->add_responsive_control(
            'wta_vertical_offset',
            [
                'label' => __('Vertical Offset', 'washi-tape-attacher'),
                'type' => Controls_Manager::SLIDER,
                'size_units' => ['px', '%'],
                'range' => ['px' => ['min' => -200, 'max' => 200], '%' => ['min' => -100, 'max' => 100]],
                'default' => ['unit' => 'px', 'size' => -20],
                'condition' => ['wta_enable' => 'yes', 'wta_tape_id!' => '0'],
                'render_type' => 'template',
                 'selectors' => [
                    '{{WRAPPER}} .wta-tape-instance' => 'margin-top: {{SIZE}}{{UNIT}};',
                ],
            ]
        );

        $element->add_control(
            'wta_rotation',
            [
                'label' => __('Tape Rotation', 'washi-tape-attacher'),
                'type' => Controls_Manager::SLIDER,
                'size_units' => ['deg'],
                'range' => ['deg' => ['min' => -180, 'max' => 180]],
                'default' => ['unit' => 'deg', 'size' => -5],
                'condition' => ['wta_enable' => 'yes', 'wta_tape_id!' => '0'],
                'render_type' => 'template',
                 'selectors' => [
                    '{{WRAPPER}} .wta-tape-instance' => 'transform: {{wta-position.value === \'top-center\' ? \'translateX(-50%)\' : \'\'}} rotate({{SIZE}}deg);',
                ],
            ]
        );

        $element->add_control(
            'wta_z_index',
            [
                'label' => __('Z-Index', 'washi-tape-attacher'),
                'type' => Controls_Manager::NUMBER,
                'default' => 10,
                'condition' => ['wta_enable' => 'yes', 'wta_tape_id!' => '0'],
                'render_type' => 'template',
                 'selectors' => [
                    '{{WRAPPER}} .wta-tape-instance' => 'z-index: {{VALUE}};',
                ],
            ]
        );

        $element->end_controls_section();
    }

    /**
     * Before the element renders, add a class to its wrapper.
     */
    public function before_render(Element_Base $element) {
        $settings = $element->get_settings_for_display();
        if (isset($settings['wta_enable']) && $settings['wta_enable'] === 'yes' && !empty($settings['wta_tape_id']) && $settings['wta_tape_id'] !== '0') {
            $element->add_render_attribute('_wrapper', 'class', 'wta-element-wrapper');
        }
    }

    /**
     * After the element renders, output the washi tape HTML.
     */
    public function after_render(Element_Base $element) {
        $settings = $element->get_settings_for_display();
        if (isset($settings['wta_enable']) && $settings['wta_enable'] === 'yes' && !empty($settings['wta_tape_id']) && $settings['wta_tape_id'] !== '0') {
            
            $svg_content = '';
            if (class_exists('Washi_Tape_DB')) {
                $db = new \Washi_Tape_DB();
                $tape = $db->get_washi_tape($settings['wta_tape_id']);
                if ($tape && !empty($tape->svg)) {
                    $svg_content = stripslashes($tape->svg);
                }
            }

            if (empty($svg_content)) {
                return;
            }
            
            $position_class = 'wta-pos-' . esc_attr($settings['wta_position']);

            // Output the tape div. The CSS selectors will handle positioning.
            printf(
                '<div class="wta-tape-instance %s">%s</div>',
                $position_class,
                $svg_content
            );
        }
    }
    
    /**
     * Enqueue frontend styles.
     */
    public function enqueue_frontend_styles() {
        wp_enqueue_style(
            'washi-tape-attacher-frontend',
            WASHI_TAPE_ATTACHER_URL . 'assets/css/frontend.css',
            [],
            WASHI_TAPE_ATTACHER_VERSION
        );
    }
}

================
File: washi-tape-attacher/washi-tape-attacher.php
================
<?php
/**
 * Plugin Name:       Washi Tape Attacher for Elementor
 * Description:       A simple and stable plugin to attach washi tape designs to any Elementor element.
 * Version:           1.0.0
 * Author:            Your Name
 * Text Domain:       washi-tape-attacher
 */

if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly.
}

define('WASHI_TAPE_ATTACHER_VERSION', '1.0.0');
define('WASHI_TAPE_ATTACHER_URL', plugin_dir_url(__FILE__));
define('WASHI_TAPE_ATTACHER_PATH', plugin_dir_path(__FILE__));

/**
 * Main Plugin Class
 */
final class Washi_Tape_Attacher {

    private static $_instance = null;

    public static function instance() {
        if (is_null(self::$_instance)) {
            self::$_instance = new self();
        }
        return self::$_instance;
    }

    public function __construct() {
        add_action('plugins_loaded', [$this, 'init']);
    }

    public function init() {
        // Check if Elementor is active
        if (!did_action('elementor/loaded')) {
            add_action('admin_notices', [$this, 'admin_notice_missing_elementor']);
            return;
        }

        // Include the integration class
        require_once WASHI_TAPE_ATTACHER_PATH . 'includes/class-elementor-integration.php';

        // Initialize the integration
        \Washi_Tape_Attacher\Elementor_Integration::instance();
    }

    public function admin_notice_missing_elementor() {
        if (isset($_GET['activate'])) {
            unset($_GET['activate']);
        }
        $message = sprintf(
            esc_html__('"%1$s" requires "%2$s" to be installed and activated.', 'washi-tape-attacher'),
            '<strong>' . esc_html__('Washi Tape Attacher', 'washi-tape-attacher') . '</strong>',
            '<strong>' . esc_html__('Elementor', 'washi-tape-attacher') . '</strong>'
        );
        printf('<div class="notice notice-warning is-dismissible"><p>%1$s</p></div>', $message);
    }
}

// Instantiate the plugin
Washi_Tape_Attacher::instance();

================
File: washi-tape-generator/assets/css/admin-style.css
================
/**
 * Washi Tape Generator Admin Styles
 */

/* Admin Grid Layout */
.washi-tape-admin-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
    margin-top: 20px;
}

@media (max-width: 1200px) {
    .washi-tape-admin-grid {
        grid-template-columns: 1fr;
    }
}

/* Panel Styling */
.washi-tape-panel {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    margin-bottom: 20px;
}

.panel-header {
    background-color: #f0f0f1;
    padding: 15px 20px;
    border-bottom: 1px solid #dcdcde;
}

.panel-header h2 {
    margin: 0;
    font-size: 16px;
    font-weight: 600;
}

.panel-body {
    padding: 20px;
}

/* Form Styling */
.form-section {
    margin-bottom: 25px;
}

.form-section:last-child {
    margin-bottom: 0;
}

.form-section-title {
    font-size: 14px;
    font-weight: 600;
    margin-bottom: 15px;
    padding-bottom: 10px;
    border-bottom: 1px solid #f0f0f1;
    color: #1d2327;
}

.form-group {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 15px;
    margin-bottom: 15px;
}

.form-control {
    margin-bottom: 15px;
}

.form-control label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
    font-size: 13px;
    color: #50575e;
}

.form-control input[type="color"] {
    height: 35px;
    width: 100%;
    border: 1px solid #8c8f94;
    border-radius: 4px;
    padding: 0;
    cursor: pointer;
}

.form-control input[type="color"]::-webkit-color-swatch-wrapper {
    padding: 0;
}

.form-control input[type="color"]::-webkit-color-swatch {
    border: none;
    border-radius: 4px;
}

.form-control input[type="number"],
.form-control select,
.form-control input[type="text"] {
    width: 100%;
    padding: 8px;
    border: 1px solid #8c8f94;
    border-radius: 4px;
    font-size: 14px;
}

.form-control input[type="range"] {
    width: 100%;
}

/* Toggle Switch */
.toggle-container {
    display: flex;
    align-items: center;
    margin-top: 5px;
}

.toggle {
    position: relative;
    display: inline-block;
    width: 52px;
    height: 28px;
    margin-right: 10px;
}

.toggle input {
    opacity: 0;
    width: 0;
    height: 0;
}

.toggle-slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: .4s;
    border-radius: 28px;
}

.toggle-slider:before {
    position: absolute;
    content: "";
    height: 20px;
    width: 20px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    transition: .4s;
    border-radius: 50%;
}

input:checked + .toggle-slider {
    background-color: #2271b1;
}

input:focus + .toggle-slider {
    box-shadow: 0 0 1px #2271b1;
}

input:checked + .toggle-slider:before {
    transform: translateX(24px);
}

.toggle-label {
    font-weight: 500;
    font-size: 13px;
}

/* Range Sliders */
.range-slider {
    -webkit-appearance: none;
    height: 6px;
    border-radius: 3px;  
    background: #dcdcde;
    outline: none;
    padding: 0;
    margin: 8px 0;
}

.range-slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 16px;
    height: 16px;
    border-radius: 50%; 
    background: #2271b1;
    cursor: pointer;
    transition: background .15s ease-in-out;
}

.range-slider::-moz-range-thumb {
    width: 16px;
    height: 16px;
    border: 0;
    border-radius: 50%;
    background: #2271b1;
    cursor: pointer;
    transition: background .15s ease-in-out;
}

.range-slider::-webkit-slider-thumb:hover,
.range-slider::-moz-range-thumb:hover {
    background: #135e96;
}

output {
    display: inline-block;
    font-size: 12px;
    color: #50575e;
    margin-top: 5px;
}

/* Form Actions */
.form-actions {
    margin-top: 20px;
    display: flex;
    gap: 10px;
}

/* Preview Container */
.preview-container {
    position: relative;
    margin: 20px auto;
    width: 100%;
    max-width: 400px;
    height: 300px;
}

.content-box {
    width: 100%;
    height: 100%;
    background-color: #f0f0f1;
    border-radius: 8px;
    padding: 30px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    position: relative;
    z-index: 0;
    border: 1px solid #dcdcde;
}

.content-box h3 {
    margin-bottom: 15px;
    color: #1d2327;
}

.washi-svg {
    position: absolute;
    z-index: 1;
    filter: drop-shadow(0 1px 3px rgba(0, 0, 0, 0.2));
}

/* Saved Washi Tapes */
.saved-tapes-header {
    margin-top: 20px;
}

.washi-tape-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
    gap: 15px;
    margin-top: 10px;
}

.washi-tape-item {
    background-color: #f6f7f7;
    border-radius: 6px;
    border: 1px solid #dcdcde;
    overflow: hidden;
    position: relative;
    transition: all 0.2s ease;
}

.washi-tape-item:hover {
    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.1);
    transform: translateY(-2px);
}

.washi-tape-preview {
    height: 120px;
    padding: 15px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #fff;
    position: relative;
    overflow: visible;
}

.washi-tape-preview .preview-background {
    width: 100%;
    height: 100%;
    background-color: #f0f0f1;
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
}

.washi-tape-preview .preview-background svg {
    position: absolute;
    z-index: 1;
    width: 180px !important;
    height: 45px !important;
    left: 50% !important;
    top: 50% !important;
    transform: translate(-50%, -50%) !important;
    filter: drop-shadow(0 1px 3px rgba(0, 0, 0, 0.2));
}

.washi-tape-preview .preview-background svg path {
    vector-effect: non-scaling-stroke;
}

.washi-tape-preview .preview-background svg pattern {
    patternUnits: userSpaceOnUse;
}

.washi-tape-details {
    padding: 10px 15px;
}

.washi-tape-details h3 {
    margin: 0 0 10px 0;
    font-size: 14px;
    font-weight: 600;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.washi-tape-actions {
    display: flex;
    justify-content: space-between;
    gap: 10px;
}

.washi-tape-actions button {
    flex: 1;
    text-align: center;
}

/* Image Upload */
.image-upload-container {
    margin-top: 5px;
}

#image-preview {
    margin-top: 10px;
    background-color: #f0f0f1;
    border: 1px solid #dcdcde;
    padding: 5px;
    border-radius: 4px;
    min-height: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
}

/* Loading Indicator */
.loading-indicator {
    text-align: center;
    padding: 20px;
    color: #50575e;
}

================
File: washi-tape-generator/assets/css/frontend-style.css
================
/**
 * Washi Tape Generator Frontend Styles
 */

/* Container for all washi tapes (hidden) */
#elementor-washi-tapes {
    display: none;
}

/* Element with washi tape - support both Elementor and non-Elementor classes */
.has-washi-tape,
.tljc-washi-tape-element {
    position: relative;
    overflow: visible !important;
}

/* Washi tape positioning and styling - support both Elementor and non-Elementor classes */
.elementor-washi-tape,
.tljc-washi-tape-element {
    position: absolute;
    z-index: 2;
    filter: drop-shadow(0 1px 3px rgba(0, 0, 0, 0.15));
    pointer-events: none;
}

/* Position helpers - support both Elementor and non-Elementor classes */
.has-washi-tape[data-washi-tape-position="top-left"] .elementor-washi-tape,
.tljc-washi-tape-element[data-washi-tape-position="top-left"] {
    top: -20px;
    left: -20px;
}

.has-washi-tape[data-washi-tape-position="top-right"] .elementor-washi-tape,
.tljc-washi-tape-element[data-washi-tape-position="top-right"] {
    top: -20px;
    right: -20px;
}

.has-washi-tape[data-washi-tape-position="bottom-left"] .elementor-washi-tape,
.tljc-washi-tape-element[data-washi-tape-position="bottom-left"] {
    bottom: -20px;
    left: -20px;
}

.has-washi-tape[data-washi-tape-position="bottom-right"] .elementor-washi-tape,
.tljc-washi-tape-element[data-washi-tape-position="bottom-right"] {
    bottom: -20px;
    right: -20px;
}

/* Make sure SVG fills the container */
.elementor-washi-tape svg,
.tljc-washi-tape-element svg {
    width: 100%;
    height: 100%;
    display: block;
}

/* Fix SVG attributes */
.washi-svg {
    position: absolute;
    display: block;
    left: 50%;
    top: -20px;
    transform: translateX(-50%) rotate(0deg);
}

================
File: washi-tape-generator/assets/css/preview-style.css
================
/**
 * Washi Tape Generator Elementor Preview Styles
 * These styles are only loaded in the Elementor editor
 */

/* Highlight elements with washi tape in editor */
.elementor-editor-active .has-washi-tape {
    outline: 2px dashed #6d28d9;
    outline-offset: 2px;
}

/* Add a visual indicator */
.elementor-editor-active .has-washi-tape::before {
    content: "🎨 Washi Tape";
    position: absolute;
    top: -20px;
    left: 0;
    background-color: #6d28d9;
    color: white;
    font-size: 10px;
    padding: 2px 5px;
    border-radius: 3px;
    z-index: 9999;
    pointer-events: none;
}

/* Make sure washi tapes are visible and positioned correctly in editor */
.elementor-editor-active .elementor-washi-tape {
    opacity: 1;
    visibility: visible;
    pointer-events: none;
}

/* Make sure washi tapes don't interfere with editing */
.elementor-editor-active .elementor-element.elementor-widget > .elementor-washi-tape {
    pointer-events: none;
}

/* Show a hint in the panel */
.elementor-control-section_washi_tape_controls .elementor-panel-heading-title::after {
    content: "✨";
    margin-left: 5px;
    color: #6d28d9;
}

================
File: washi-tape-generator/assets/js/admin-script.js
================
/**
 * Washi Tape Generator Admin Script
 */
(function ($) {
    'use strict';

    // Initialize the washi tape generator
    const WashiTapeGenerator = {
        init: function () {
            this.initVars();
            this.bindEvents();
            this.initMediaUploader();
            this.updatePreview();
            this.loadSavedWashiTapes();
        },

        initVars: function () {
            // Form elements
            this.colorInput = $('#color');
            this.patternSelect = $('#pattern');
            this.tornEdgesCheckbox = $('#torn-edges');
            this.widthInput = $('#width');
            this.heightInput = $('#height');
            this.positionSelect = $('#position');
            this.rotationInput = $('#rotation');
            this.patternSpacingInput = $('#pattern-spacing');
            this.lineThicknessInput = $('#line-thickness');
            this.lineColorInput = $('#line-color');
            this.dotDiameterInput = $('#dot-diameter');
            this.dotColorInput = $('#dot-color');
            this.patternRandomnessInput = $('#pattern-randomness');
            this.useImageOverlayCheckbox = $('#use-image-overlay');
            this.imageUrlInput = $('#image-url');
            this.imageOpacityInput = $('#image-opacity');

            // Output elements
            this.washiSvg = document.getElementById('washi-svg');
            this.savedWashiTapesContainer = $('#saved-washi-tapes');

            // Other variables
            this.svgDefs = null;
            this.currentImageData = null;
        },

        bindEvents: function () {
            // Update preview on input change, excluding the title input
            $('input:not(#tape-title), select').on('input change', this.updatePreview.bind(this));

            // Reset button
            $('#reset-washi-tape').on('click', this.resetForm.bind(this));

            // Save button
            $('#save-washi-tape').on('click', this.saveWashiTape.bind(this));

            // Image overlay toggle
            this.useImageOverlayCheckbox.on('change', function () {
                if (this.checked) {
                    $('#image-overlay-controls').show();
                } else {
                    $('#image-overlay-controls').hide();
                }
                WashiTapeGenerator.updatePreview();
            });

            // Pattern select change
            this.patternSelect.on('change', function () {
                const pattern = $(this).val();
                $('#line-options').toggle(['horizontal-lines', 'vertical-lines', 'grid', 'random-lines'].includes(pattern));
                $('#dot-options').toggle(pattern === 'dots');
                $('#pattern-spacing-group').toggle(pattern !== 'solid');
                $('#pattern-randomness-control').toggle(pattern === 'random-lines');
                WashiTapeGenerator.updatePreview();
            });

            // Range slider value display
            $('#roughness').on('input', function () {
                $('#roughness-value').text($(this).val() + '%');
            });

            $('#segments').on('input', function () {
                $('#segments-value').text($(this).val());
            });

            $('#opacity').on('input', function () {
                $('#opacity-value').text($(this).val() + '%');
            });

            $('#pattern-opacity').on('input', function () {
                $('#pattern-opacity-value').text($(this).val() + '%');
            });

            $('#pattern-randomness').on('input', function () {
                $('#pattern-randomness-value').text($(this).val() + '%');
            });

            $('#image-opacity').on('input', function () {
                $('#image-opacity-value').text($(this).val() + '%');
            });
        },

        initMediaUploader: function () {
            let mediaUploader;

            $('#image-upload-btn').on('click', function (e) {
                e.preventDefault();

                // If the uploader object has already been created, reopen the dialog
                if (mediaUploader) {
                    mediaUploader.open();
                    return;
                }

                // Create the media uploader
                mediaUploader = wp.media({
                    title: 'Select Image for Washi Tape',
                    button: {
                        text: 'Use this image'
                    },
                    multiple: false
                });

                // When an image is selected, run a callback
                mediaUploader.on('select', function () {
                    const attachment = mediaUploader.state().get('selection').first().toJSON();
                    $('#image-url').val(attachment.url);
                    $('#image-preview').html('<img src="' + attachment.url + '" style="max-width: 100%; max-height: 100px;">');

                    // Convert image to base64 for SVG embedding
                    WashiTapeGenerator.convertImageToBase64(attachment.url);
                });

                // Open the uploader dialog
                mediaUploader.open();
            });
        },

        convertImageToBase64: function (imageUrl) {
            const img = new Image();
            img.crossOrigin = 'Anonymous';
            img.onload = function () {
                const canvas = document.createElement('canvas');
                canvas.width = img.width;
                canvas.height = img.height;

                const ctx = canvas.getContext('2d');
                ctx.drawImage(img, 0, 0);

                const dataURL = canvas.toDataURL('image/png');
                WashiTapeGenerator.currentImageData = dataURL;
                WashiTapeGenerator.updatePreview();
            };

            img.onerror = function () {
                console.error('Error loading image');
                WashiTapeGenerator.currentImageData = null;
            };

            img.src = imageUrl;
        },

        generateTornEdgePath: function (width, height) {
            // Generate a random torn edge path with torn left and right edges only
            const segments = parseInt($('#segments').val()) || 10;
            const segmentHeight = height / segments;
            const roughnessPercent = parseInt($('#roughness').val()) || 10;
            const roughnessLeft = width * (roughnessPercent / 100); // Roughness of the left torn edge
            const roughnessRight = width * (roughnessPercent / 100); // Roughness of the right torn edge

            // Start at top-left
            let path = `M0,0 `;

            // Top edge (straight)
            path += `L${width},0 `;

            // Right edge with random variations
            for (let i = 1; i < segments; i++) {
                const y = i * segmentHeight;
                const x = width - (Math.random() * roughnessRight);
                path += `L${x},${y} `;
            }
            path += `L${width},${height} `;

            // Bottom edge (straight)
            path += `L0,${height} `;

            // Left edge with random variations
            for (let i = segments - 1; i > 0; i--) {
                const y = i * segmentHeight;
                const x = (Math.random() * roughnessLeft);
                path += `L${x},${y} `;
            }

            // Close the path
            path += 'Z';

            return path;
        },

        createSvgPattern: function (patternType) {
            // Remove existing defs
            const existingDefs = this.washiSvg.querySelector('defs');
            if (existingDefs) {
                this.washiSvg.removeChild(existingDefs);
            }

            // Create new defs
            this.svgDefs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');
            const patternId = 'pattern-' + Date.now();
            const pattern = document.createElementNS('http://www.w3.org/2000/svg', 'pattern');

            const spacing = parseInt(this.patternSpacingInput.val()) || 10;
            const patternSize = spacing;

            pattern.setAttribute('id', patternId);
            pattern.setAttribute('patternUnits', 'userSpaceOnUse');
            pattern.setAttribute('width', patternSize);
            pattern.setAttribute('height', patternSize);

            if (patternType === 'horizontal-lines') {
                const lineThickness = parseInt(this.lineThicknessInput.val()) || 1;
                const lineColor = this.lineColorInput.val();

                const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                line.setAttribute('x1', '0');
                line.setAttribute('y1', patternSize / 2);
                line.setAttribute('x2', patternSize);
                line.setAttribute('y2', patternSize / 2);
                line.setAttribute('stroke', lineColor);
                line.setAttribute('stroke-width', lineThickness);

                pattern.appendChild(line);
            }
            else if (patternType === 'vertical-lines') {
                const lineThickness = parseInt(this.lineThicknessInput.val()) || 1;
                const lineColor = this.lineColorInput.val();

                const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                line.setAttribute('x1', patternSize / 2);
                line.setAttribute('y1', '0');
                line.setAttribute('x2', patternSize / 2);
                line.setAttribute('y2', patternSize);
                line.setAttribute('stroke', lineColor);
                line.setAttribute('stroke-width', lineThickness);

                pattern.appendChild(line);
            }
            else if (patternType === 'grid') {
                const lineThickness = parseInt(this.lineThicknessInput.val()) || 1;
                const lineColor = this.lineColorInput.val();

                // Horizontal line
                const hLine = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                hLine.setAttribute('x1', '0');
                hLine.setAttribute('y1', patternSize / 2);
                hLine.setAttribute('x2', patternSize);
                hLine.setAttribute('y2', patternSize / 2);
                hLine.setAttribute('stroke', lineColor);
                hLine.setAttribute('stroke-width', lineThickness);

                // Vertical line
                const vLine = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                vLine.setAttribute('x1', patternSize / 2);
                vLine.setAttribute('y1', '0');
                vLine.setAttribute('x2', patternSize / 2);
                vLine.setAttribute('y2', patternSize);
                vLine.setAttribute('stroke', lineColor);
                vLine.setAttribute('stroke-width', lineThickness);

                pattern.appendChild(hLine);
                pattern.appendChild(vLine);
            }
            else if (patternType === 'random-lines') {
                const lineThickness = parseInt(this.lineThicknessInput.val()) || 1;
                const lineColor = this.lineColorInput.val();
                const randomness = parseInt(this.patternRandomnessInput.val()) || 0;

                // Add multiple random lines
                for (let i = 0; i < 4; i++) {
                    const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');

                    if (Math.random() > 0.5) {
                        // Horizontal-ish line
                        const y = Math.random() * patternSize;
                        const deviation = (randomness / 100) * patternSize;

                        line.setAttribute('x1', '0');
                        line.setAttribute('y1', y);
                        line.setAttribute('x2', patternSize);
                        line.setAttribute('y2', y + (Math.random() * deviation * 2 - deviation));
                    } else {
                        // Vertical-ish line
                        const x = Math.random() * patternSize;
                        const deviation = (randomness / 100) * patternSize;

                        line.setAttribute('x1', x);
                        line.setAttribute('y1', '0');
                        line.setAttribute('x2', x + (Math.random() * deviation * 2 - deviation));
                        line.setAttribute('y2', patternSize);
                    }

                    line.setAttribute('stroke', lineColor);
                    line.setAttribute('stroke-width', lineThickness);
                    pattern.appendChild(line);
                }
            }
            else if (patternType === 'dots') {
                const dotDiameter = parseInt(this.dotDiameterInput.val()) || 5;
                const dotColor = this.dotColorInput.val();

                const dot = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
                dot.setAttribute('cx', patternSize / 2);
                dot.setAttribute('cy', patternSize / 2);
                dot.setAttribute('r', dotDiameter / 2);
                dot.setAttribute('fill', dotColor);

                pattern.appendChild(dot);
            }

            this.svgDefs.appendChild(pattern);
            this.washiSvg.appendChild(this.svgDefs);

            return `url(#${patternId})`;
        },

        updatePreview: function () {
            // Get values from form
            const color = this.colorInput.val();
            const patternType = this.patternSelect.val();
            const tornEdges = this.tornEdgesCheckbox.prop('checked');
            const width = parseInt(this.widthInput.val()) || 180;
            const height = parseInt(this.heightInput.val()) || 45;
            const position = this.positionSelect.val();
            const rotation = parseInt(this.rotationInput.val()) || 0;
            const useImageOverlay = this.useImageOverlayCheckbox.prop('checked');
            const imageOpacity = parseInt(this.imageOpacityInput.val()) / 100 || 0.5;

            // Clear existing SVG content
            while (this.washiSvg.firstChild) {
                this.washiSvg.removeChild(this.washiSvg.firstChild);
            }

            // Set SVG dimensions
            this.washiSvg.setAttribute('width', width);
            this.washiSvg.setAttribute('height', height);

            // Create pattern if needed
            let fill = color;
            let patternFill = null;

            if (patternType !== 'solid') {
                patternFill = this.createSvgPattern(patternType);
            }

            // Create the tape shape
            const tapePath = document.createElementNS('http://www.w3.org/2000/svg', 'path');

            // Set path data based on torn edges setting
            if (tornEdges) {
                tapePath.setAttribute('d', this.generateTornEdgePath(width, height));
            } else {
                tapePath.setAttribute('d', `M0,0 L${width},0 L${width},${height} L0,${height} Z`);
            }

            // Apply fill color with opacity
            const baseOpacity = parseInt($('#opacity').val()) / 100 || 1;
            tapePath.setAttribute('fill', fill);
            tapePath.setAttribute('fill-opacity', baseOpacity);

            // Add the path to the SVG
            this.washiSvg.appendChild(tapePath);

            // Add pattern overlay if selected
            if (patternFill) {
                const patternOpacity = parseInt($('#pattern-opacity').val()) / 100 || 1;
                const patternOverlay = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                patternOverlay.setAttribute('d', tapePath.getAttribute('d'));
                patternOverlay.setAttribute('fill', patternFill);
                patternOverlay.setAttribute('fill-opacity', patternOpacity);
                this.washiSvg.appendChild(patternOverlay);
            }

            // Add image overlay if enabled
            if (useImageOverlay && this.currentImageData) {
                // Create clipPath for the image
                const clipPath = document.createElementNS('http://www.w3.org/2000/svg', 'clipPath');
                const clipPathId = 'clip-' + Date.now();
                clipPath.setAttribute('id', clipPathId);

                // Clone the tape path for clipping
                const clipPathShape = tapePath.cloneNode(true);
                clipPath.appendChild(clipPathShape);

                // Add clipPath to defs
                if (!this.svgDefs) {
                    this.svgDefs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');
                }
                this.svgDefs.appendChild(clipPath);
                this.washiSvg.appendChild(this.svgDefs);

                const imageSize = $('#image-size').val();
                if (imageSize === 'repeat' || imageSize === 'repeat-x' || imageSize === 'repeat-y') {
                    // For repeating patterns, create a pattern element
                    const pattern = document.createElementNS('http://www.w3.org/2000/svg', 'pattern');
                    const patternId = 'pattern-' + Date.now();
                    pattern.setAttribute('id', patternId);
                    pattern.setAttribute('patternUnits', 'userSpaceOnUse');

                    // Load the image to get its dimensions
                    const tempImg = new Image();
                    tempImg.src = this.currentImageData;
                    tempImg.onload = () => {
                        const imgWidth = tempImg.width;
                        const imgHeight = tempImg.height;

                        // Set pattern size based on repeat type
                        if (imageSize === 'repeat' || imageSize === 'repeat-x') {
                            pattern.setAttribute('width', imgWidth);
                        } else {
                            pattern.setAttribute('width', width);
                        }
                        if (imageSize === 'repeat' || imageSize === 'repeat-y') {
                            pattern.setAttribute('height', imgHeight);
                        } else {
                            pattern.setAttribute('height', height);
                        }

                        // Add image to pattern
                        const patternImage = document.createElementNS('http://www.w3.org/2000/svg', 'image');
                        patternImage.setAttribute('href', this.currentImageData);
                        patternImage.setAttribute('width', imgWidth);
                        patternImage.setAttribute('height', imgHeight);
                        pattern.appendChild(patternImage);

                        // Add pattern to defs
                        this.svgDefs.appendChild(pattern);

                        // Create rect with pattern fill
                        const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
                        rect.setAttribute('width', width);
                        rect.setAttribute('height', height);
                        rect.setAttribute('fill', `url(#${patternId})`);
                        rect.setAttribute('clip-path', `url(#${clipPathId})`);
                        rect.setAttribute('opacity', imageOpacity);
                        this.washiSvg.appendChild(rect);
                    };
                } else {
                    // For cover/contain, use regular image
                    const image = document.createElementNS('http://www.w3.org/2000/svg', 'image');
                    image.setAttribute('href', this.currentImageData);
                    image.setAttribute('width', width);
                    image.setAttribute('height', height);
                    image.setAttribute('preserveAspectRatio',
                        imageSize === 'cover' ? 'xMidYMid slice' : 'xMidYMid meet');
                    image.setAttribute('clip-path', `url(#${clipPathId})`);
                    image.setAttribute('opacity', imageOpacity);
                    this.washiSvg.appendChild(image);
                }
            }

            // Position the SVG in the preview
            const previewContainer = document.querySelector('.preview-container');
            const contentBox = document.querySelector('.content-box');

            // Add these lines to ensure the SVG is visible
            this.washiSvg.style.position = 'absolute';
            this.washiSvg.style.display = 'block';

            // Reset transform
            this.washiSvg.style.transform = '';

            if (position === 'left') {
                this.washiSvg.style.left = '-20px';
                this.washiSvg.style.top = '30px';
                this.washiSvg.style.transform = `rotate(${rotation - 10}deg)`;
            } else if (position === 'right') {
                this.washiSvg.style.right = '-20px';
                this.washiSvg.style.left = 'auto';
                this.washiSvg.style.top = '30px';
                this.washiSvg.style.transform = `rotate(${rotation + 10}deg)`;
            } else if (position === 'top') {
                this.washiSvg.style.left = '50%';
                this.washiSvg.style.top = '-20px';
                this.washiSvg.style.transform = `translateX(-50%) rotate(${rotation}deg)`;
            } else if (position === 'bottom') {
                this.washiSvg.style.left = '50%';
                this.washiSvg.style.bottom = '-20px';
                this.washiSvg.style.top = 'auto';
                this.washiSvg.style.transform = `translateX(-50%) rotate(${rotation}deg)`;
            }
        },

        resetForm: function () {
            // Reset form to default values
            $('#tape-title').val('');
            $('#tape-id').val('0');
            this.colorInput.val('#8a5cf7');
            this.patternSelect.val('vertical-lines').trigger('change');
            this.tornEdgesCheckbox.prop('checked', true);
            this.widthInput.val('180');
            this.heightInput.val('45');
            this.positionSelect.val('left');
            this.rotationInput.val('0');
            this.patternSpacingInput.val('10');
            this.lineThicknessInput.val('1');
            this.lineColorInput.val('#000000');
            this.dotDiameterInput.val('5');
            this.dotColorInput.val('#ffffff');
            this.patternRandomnessInput.val('0');
            $('#pattern-randomness-value').text('0%');
            this.useImageOverlayCheckbox.prop('checked', false).trigger('change');
            this.imageUrlInput.val('');
            this.imageOpacityInput.val('50');
            $('#image-opacity-value').text('50%');
            $('#image-preview').html('');
            this.currentImageData = null;

            // Reset range slider value displays
            $('#roughness').val('10');
            $('#roughness-value').text('10%');
            $('#segments').val('10');
            $('#segments-value').text('10');
            $('#opacity').val('100');
            $('#opacity-value').text('100%');
            $('#pattern-opacity').val('100');
            $('#pattern-opacity-value').text('100%');

            // Update preview
            this.updatePreview();
        },

        saveWashiTape: function () {
            // Get form values
            const title = $('#tape-title').val();
            const id = $('#tape-id').val();

            if (!title) {
                alert('Please enter a name for your washi tape.');
                return;
            }

            // Get SVG code and clean it up
            let svgCode = this.washiSvg.outerHTML;
            // Remove any escaped quotes and normalize the SVG
            svgCode = svgCode
                .replace(/&quot;/g, '"')
                .replace(/\\&quot;/g, '"')
                .replace(/\s+/g, ' ')
                .replace(/"\s+/g, '"')
                .replace(/\s+"/g, '"')
                .replace(/" >/g, '">')
                .replace(/> </g, '><')
                .replace(/\\"pattern-/g, 'pattern-')
                .replace(/\\"patternUnits=/g, 'patternUnits=')
                .replace(/\\"userSpaceOnUse\\"/g, 'userSpaceOnUse')
                .replace(/\\"width=/g, 'width=')
                .replace(/\\"height=/g, 'height=')
                .replace(/\\"(\d+)\\"/g, '"$1"')
                .replace(/\\"([^"]+)\\"/g, '"$1"')
                .replace(/absolute;=/g, '')
                .replace(/display:=/g, '')
                .replace(/left:=/g, '')
                .replace(/top:=/g, '')
                .replace(/transform:=/g, '')
                .replace(/rotate\(-10deg\);\\"/g, '')
                .replace(/\s+style="[^"]*"/g, '');

            // Ensure proper xmlns attribute
            if (!svgCode.includes('xmlns="http://www.w3.org/2000/svg"')) {
                svgCode = svgCode.replace('<svg', '<svg xmlns="http://www.w3.org/2000/svg"');
            }

            // Get all settings
            const settings = {
                color: this.colorInput.val(),
                pattern: this.patternSelect.val(),
                tornEdges: this.tornEdgesCheckbox.prop('checked'),
                width: this.widthInput.val(),
                height: this.heightInput.val(),
                position: this.positionSelect.val(),
                rotation: this.rotationInput.val(),
                patternSpacing: this.patternSpacingInput.val(),
                lineThickness: this.lineThicknessInput.val(),
                lineColor: this.lineColorInput.val(),
                dotDiameter: this.dotDiameterInput.val(),
                dotColor: this.dotColorInput.val(),
                patternRandomness: this.patternRandomnessInput.val(),
                roughness: $('#roughness').val(),
                segments: $('#segments').val(),
                opacity: $('#opacity').val(),
                patternOpacity: $('#pattern-opacity').val(),
                useImageOverlay: this.useImageOverlayCheckbox.prop('checked'),
                imageUrl: this.imageUrlInput.val(),
                imageOpacity: this.imageOpacityInput.val(),
                imageData: this.currentImageData,
                imageSize: $('#image-size').val()
            };

            // Save the washi tape
            $.ajax({
                url: washiTapeParams.ajaxUrl,
                type: 'POST',
                data: {
                    action: 'save_washi_tape',
                    nonce: washiTapeParams.nonce,
                    id: id,
                    title: title,
                    svg: svgCode,
                    settings: JSON.stringify(settings)
                },
                success: function (response) {
                    if (response.success) {
                        // After successful save, reload the saved tapes
                        WashiTapeGenerator.loadSavedWashiTapes();

                        // Reset the form if this was a new tape
                        if (id === '0') {
                            WashiTapeGenerator.resetForm();
                        }

                        alert('Washi tape saved successfully!');
                    } else {
                        alert('Error saving washi tape.');
                    }
                },
                error: function () {
                    alert('Error saving washi tape.');
                }
            });
        },

        loadSavedWashiTapes: function () {
            $.ajax({
                url: washiTapeParams.ajaxUrl,
                type: 'POST',
                data: {
                    action: 'get_washi_tapes',
                    nonce: washiTapeParams.nonce
                },
                beforeSend: function () {
                    WashiTapeGenerator.savedWashiTapesContainer.html('<div class="loading-indicator">Loading...</div>');
                },
                success: function (response) {
                    if (response.success && response.data.washi_tapes) {
                        if (response.data.washi_tapes.length === 0) {
                            WashiTapeGenerator.savedWashiTapesContainer.html('<p>No saved washi tapes yet.</p>');
                            return;
                        }

                        let html = '<div class="washi-tape-grid">';

                        response.data.washi_tapes.forEach(function (tape) {
                            // Clean up the SVG before inserting
                            const cleanSvg = tape.svg
                                .replace(/&quot;/g, '"')
                                .replace(/\\&quot;/g, '"')
                                .replace(/\s+/g, ' ')
                                .replace(/"\s+/g, '"')
                                .replace(/\s+"/g, '"')
                                .replace(/" >/g, '">')
                                .replace(/> </g, '><')
                                .replace(/absolute;/g, '')
                                .replace(/display:/g, '')
                                .replace(/left:/g, '')
                                .replace(/top:/g, '')
                                .replace(/transform:/g, '')
                                .replace(/rotate\(-10deg\);/g, '')
                                .replace(/style="[^"]*"/g, '')
                                .replace(/\\"(\d+)\\"/g, '"$1"')
                                .replace(/\\"([^"]+)\\"/g, '"$1"')
                                .replace(/\\"pattern-/g, 'pattern-')
                                .replace(/\\"patternUnits=/g, 'patternUnits=')
                                .replace(/\\"userSpaceOnUse\\"/g, 'userSpaceOnUse')
                                .replace(/\\"width=/g, 'width=')
                                .replace(/\\"height=/g, 'height=');

                            html += '<div class="washi-tape-item" data-id="' + tape.id + '" data-settings="' + encodeURIComponent(tape.settings) + '">';
                            html += '<div class="washi-tape-preview">';
                            html += '<div class="preview-background">';
                            html += cleanSvg;
                            html += '</div>';
                            html += '</div>';
                            html += '<div class="washi-tape-details">';
                            html += '<h3>' + tape.title + '</h3>';
                            html += '<div class="washi-tape-actions">';
                            html += '<button type="button" class="button edit-washi-tape">Edit</button>';
                            html += '<button type="button" class="button button-link-delete delete-washi-tape">Delete</button>';
                            html += '</div>';
                            html += '</div>';
                            html += '</div>';
                        });

                        html += '</div>';

                        WashiTapeGenerator.savedWashiTapesContainer.html(html);

                        // Add event listeners
                        $('.edit-washi-tape').on('click', WashiTapeGenerator.editWashiTape);
                        $('.delete-washi-tape').on('click', WashiTapeGenerator.deleteWashiTape);
                    } else {
                        WashiTapeGenerator.savedWashiTapesContainer.html('<p>Error loading washi tapes.</p>');
                    }
                },
                error: function () {
                    WashiTapeGenerator.savedWashiTapesContainer.html('<p>Error loading washi tapes.</p>');
                }
            });
        },

        editWashiTape: function () {
            const item = $(this).closest('.washi-tape-item');
            const id = item.data('id');
            const settingsJson = decodeURIComponent(item.data('settings'));
            const settings = JSON.parse(settingsJson);

            // Fill the form with the settings
            $('#tape-id').val(id);
            $('#tape-title').val(item.find('h3').text());

            // Set all form values
            WashiTapeGenerator.colorInput.val(settings.color);
            WashiTapeGenerator.patternSelect.val(settings.pattern).trigger('change');
            WashiTapeGenerator.tornEdgesCheckbox.prop('checked', settings.tornEdges);
            WashiTapeGenerator.widthInput.val(settings.width);
            WashiTapeGenerator.heightInput.val(settings.height);
            WashiTapeGenerator.positionSelect.val(settings.position);
            WashiTapeGenerator.rotationInput.val(settings.rotation);
            WashiTapeGenerator.patternSpacingInput.val(settings.patternSpacing);
            WashiTapeGenerator.lineThicknessInput.val(settings.lineThickness);
            WashiTapeGenerator.lineColorInput.val(settings.lineColor);
            WashiTapeGenerator.dotDiameterInput.val(settings.dotDiameter);
            WashiTapeGenerator.dotColorInput.val(settings.dotColor);
            WashiTapeGenerator.patternRandomnessInput.val(settings.patternRandomness || 0);
            $('#pattern-randomness-value').text((settings.patternRandomness || 0) + '%');
            $('#roughness').val(settings.roughness);
            $('#roughness-value').text(settings.roughness + '%');
            $('#segments').val(settings.segments);
            $('#segments-value').text(settings.segments);
            $('#opacity').val(settings.opacity);
            $('#opacity-value').text(settings.opacity + '%');
            $('#pattern-opacity').val(settings.patternOpacity);
            $('#pattern-opacity-value').text(settings.patternOpacity + '%');

            // Handle image overlay
            WashiTapeGenerator.useImageOverlayCheckbox.prop('checked', settings.useImageOverlay).trigger('change');
            if (settings.useImageOverlay && settings.imageUrl) {
                WashiTapeGenerator.imageUrlInput.val(settings.imageUrl);
                WashiTapeGenerator.imageOpacityInput.val(settings.imageOpacity);
                $('#image-opacity-value').text(settings.imageOpacity + '%');
                $('#image-size').val(settings.imageSize || 'cover');

                if (settings.imageData) {
                    WashiTapeGenerator.currentImageData = settings.imageData;
                    $('#image-preview').html('<img src="' + settings.imageData + '" style="max-width: 100%; max-height: 100px;">');
                } else if (settings.imageUrl) {
                    $('#image-preview').html('<img src="' + settings.imageUrl + '" style="max-width: 100%; max-height: 100px;">');
                    WashiTapeGenerator.convertImageToBase64(settings.imageUrl);
                }
            }

            // Scroll to top of form
            $('html, body').animate({
                scrollTop: $('.generator-panel').offset().top - 50
            }, 500);

            // Update preview
            WashiTapeGenerator.updatePreview();
        },

        deleteWashiTape: function () {
            if (!confirm('Are you sure you want to delete this washi tape?')) {
                return;
            }

            const item = $(this).closest('.washi-tape-item');
            const id = item.data('id');

            $.ajax({
                url: washiTapeParams.ajaxUrl,
                type: 'POST',
                data: {
                    action: 'delete_washi_tape',
                    nonce: washiTapeParams.nonce,
                    id: id
                },
                success: function (response) {
                    if (response.success) {
                        alert(response.data.message);
                        // Reload saved washi tapes
                        WashiTapeGenerator.loadSavedWashiTapes();
                    } else {
                        alert(response.data.message);
                    }
                },
                error: function () {
                    alert('An error occurred while deleting the washi tape.');
                }
            });
        }
    };

    // Initialize on document ready
    $(document).ready(function () {
        WashiTapeGenerator.init();
    });

})(jQuery);

================
File: washi-tape-generator/assets/js/elementor-editor.js
================
/**
 * Washi Tape Generator - Elementor Editor Integration
 * This script handles the integration with Elementor editor
 */
(function($) {
    'use strict';

    // Track editor state
    let isEditorInitialized = false;
    let editorWashiTapes = {};

    /**
     * Initialize Washi Tape in Elementor editor
     */
    function initWashiTapeEditor() {
        if (isEditorInitialized) {
            return;
        }
        
        isEditorInitialized = true;
        
        // Create container for washi tapes if not exists
        if ($('#elementor-washi-tapes-container').length === 0) {
            $('body').append('<div id="elementor-washi-tapes-container" style="display:none;"></div>');
        }

        // Listen for panel changes
        elementor.channels.editor.on('section:activated', handleSectionActivated);
        
        // Listen for element settings changes
        elementor.channels.editor.on('change', handleSettingsChanged);
        
        // Listen for preview related events
        elementor.settings.page.model.on('change', handlePageSettingsChange);
        
        // Add custom CSS class to the editor
        $('body').addClass('washi-tape-editor-active');
        
        console.log('Washi Tape Generator: Elementor editor integration initialized');
        
        // Scan for existing washi tapes
        scanExistingWashiTapes();
    }

    /**
     * Handle section activated in panel
     */
    function handleSectionActivated(sectionName, editor) {
        if (sectionName === 'section_washi_tape_controls') {
            const model = editor.getOption('editedElementView').getContainer().model;
            const settings = model.get('settings').attributes;
            
            // If washi tape is enabled, refresh it
            if (settings.enable_washi_tape === 'yes' && settings.washi_tape_id !== '0') {
                refreshWashiTape(model.get('id'), settings);
            }
        }
    }

    /**
     * Handle settings changed in panel
     */
    function handleSettingsChanged(view) {
        const settingsModel = view.container.settings;
        const settings = settingsModel.attributes;
        const elementId = view.container.model.get('id');
        
        // Check if this change affects washi tape settings
        if (settings.hasOwnProperty('enable_washi_tape') || 
            settings.hasOwnProperty('washi_tape_id') || 
            settings.hasOwnProperty('washi_tape_position') || 
            settings.hasOwnProperty('washi_tape_rotation') || 
            settings.hasOwnProperty('washi_tape_z_index')) {
            
            // If washi tape is enabled and has an ID
            if (settings.enable_washi_tape === 'yes' && settings.washi_tape_id !== '0') {
                refreshWashiTape(elementId, settings);
            } else {
                // Remove washi tape
                removeWashiTape(elementId);
            }
        }
    }

    /**
     * Handle page settings change
     */
    function handlePageSettingsChange() {
        // This is a good place to handle global settings that might affect all washi tapes
        // For now, we'll just log that settings changed
        console.log('Page settings changed - Washi Tape Generator is aware');
    }

    /**
     * Scan for existing washi tapes in the editor
     */
    function scanExistingWashiTapes() {
        // Get all elements with washi tape
        elementor.getPreviewView().$el.find('.has-washi-tape').each(function() {
            const $element = $(this);
            const elementId = $element.data('model-cid');
            
            if (elementId) {
                const container = elementor.getContainer(elementId);
                if (container) {
                    const settings = container.settings.attributes;
                    if (settings.enable_washi_tape === 'yes' && settings.washi_tape_id !== '0') {
                        refreshWashiTape(elementId, settings);
                    }
                }
            }
        });
    }

    /**
     * Refresh a washi tape on an element
     */
    function refreshWashiTape(elementId, settings) {
        // Get the element in preview
        const $element = elementor.getPreviewView().$el.find(`[data-model-cid="${elementId}"]`);
        
        if (!$element.length) {
            return;
        }
        
        // Mark the element
        $element.addClass('has-washi-tape');
        $element.attr('data-washi-tape-id', `washi-tape-${settings.washi_tape_id}`);
        $element.attr('data-washi-tape-position', settings.washi_tape_position || 'top-left');
        
        // Check if we already have this washi tape loaded
        if (editorWashiTapes[settings.washi_tape_id]) {
            insertWashiTape($element, settings);
        } else {
            // Fetch the washi tape
            loadWashiTape(settings.washi_tape_id, function() {
                insertWashiTape($element, settings);
            });
        }
    }

    /**
     * Load a washi tape from the server
     */
    function loadWashiTape(tapeId, callback) {
        $.ajax({
            url: ajaxurl,
            type: 'POST',
            data: {
                action: 'get_washi_tape_svg',
                nonce: washiTapePreviewParams.nonce,
                id: tapeId
            },
            success: function(response) {
                if (response.success && response.data.svg) {
                    // Store in our cache
                    editorWashiTapes[tapeId] = response.data.svg;
                    
                    // Make sure we have the container
                    let $container = $('#elementor-washi-tapes-container');
                    if (!$container.length) {
                        $container = $('<div id="elementor-washi-tapes-container" style="display:none;"></div>');
                        $('body').append($container);
                    }
                    
                    // Add or update the SVG in the container
                    const tapeElementId = `washi-tape-${tapeId}`;
                    let $tapeElement = $(`#${tapeElementId}`);
                    
                    if ($tapeElement.length) {
                        $tapeElement.html(response.data.svg);
                    } else {
                        $container.append(`<div id="${tapeElementId}" class="elementor-washi-tape">${response.data.svg}</div>`);
                    }
                    
                    if (typeof callback === 'function') {
                        callback();
                    }
                } else {
                    console.error('Failed to load washi tape:', response);
                }
            },
            error: function(xhr, status, error) {
                console.error('Failed to load washi tape:', error);
            }
        });
    }

    /**
     * Insert a washi tape onto an element
     */
    function insertWashiTape($element, settings) {
        // Remove any existing washi tape first
        $element.find('.elementor-washi-tape').remove();
        
        // Get the tape from our container
        const $sourceTape = $(`#washi-tape-${settings.washi_tape_id}`);
        
        if (!$sourceTape.length) {
            console.error('Washi tape not found:', settings.washi_tape_id);
            return;
        }
        
        // Clone the tape
        const $tapeCopy = $sourceTape.clone();
        $tapeCopy.removeAttr('id');
        
        // Position the tape
        positionTape($tapeCopy, settings);
        
        // Add to the element
        $element.append($tapeCopy);
        
        // Make sure element is positioned relatively
        if ($element.css('position') === 'static') {
            $element.css('position', 'relative');
        }
    }

    /**
     * Position a tape based on settings
     */
    function positionTape($tape, settings) {
        // Make tape visible
        $tape.css({
            'display': 'block',
            'position': 'absolute',
            'z-index': settings.washi_tape_z_index || 1
        });
        
        // Set position
        const position = settings.washi_tape_position || 'top-left';
        
        // Reset all positions first
        $tape.css({
            'top': '',
            'right': '',
            'bottom': '',
            'left': ''
        });
        
        if (position === 'top-left') {
            $tape.css({
                'top': '-20px',
                'left': '-20px'
            });
        } else if (position === 'top-right') {
            $tape.css({
                'top': '-20px',
                'right': '-20px'
            });
        } else if (position === 'bottom-left') {
            $tape.css({
                'bottom': '-20px',
                'left': '-20px'
            });
        } else if (position === 'bottom-right') {
            $tape.css({
                'bottom': '-20px',
                'right': '-20px'
            });
        }
        
        // Apply rotation if set
        if (settings.washi_tape_rotation) {
            const degrees = settings.washi_tape_rotation.size || 0;
            $tape.css('transform', `rotate(${degrees}deg)`);
        }
    }

    /**
     * Remove a washi tape from an element
     */
    function removeWashiTape(elementId) {
        const $element = elementor.getPreviewView().$el.find(`[data-model-cid="${elementId}"]`);
        
        if (!$element.length) {
            return;
        }
        
        $element.removeClass('has-washi-tape');
        $element.removeAttr('data-washi-tape-id');
        $element.removeAttr('data-washi-tape-position');
        $element.find('.elementor-washi-tape').remove();
    }

    // Initialize when Elementor is ready
    $(window).on('elementor/frontend/init', function() {
        elementor.on('preview:loaded', initWashiTapeEditor);
    });

})(jQuery);

================
File: washi-tape-generator/assets/js/frontend-script.js
================
/**
 * Washi Tape Generator Front-end Script
 */
(function () {
    'use strict';

    /* ---------- core ---------- */
    function initWashiTapes(retryCount = 0) {
        console.log('Initializing washi tapes...'); // Debug log
        const elements = document.querySelectorAll('.tljc-washi-tape-element');
        console.log('Found elements:', elements.length); // Debug log

        elements.forEach(function (element) {
            const tapeId = element.getAttribute('data-tape-id');
            console.log('Processing element with tape ID:', tapeId); // Debug log

            if (!tapeId) return;

            // Get the SVG from the hidden template
            const tapeTemplate = document.getElementById('washi-tape-' + tapeId);
            if (!tapeTemplate) {
                console.warn('Washi tape template not found for ID:', tapeId);
                // Retry up to 3 times if template is not found (in case of late rendering)
                if (retryCount < 3) {
                    setTimeout(function () { initWashiTapes(retryCount + 1); }, 200);
                }
                return;
            }

            // Get size and position attributes
            const width = element.getAttribute('data-width') || 180;
            const height = element.getAttribute('data-height') || 45;
            const position = element.getAttribute('data-position') || 'top-center';
            const rotation = element.getAttribute('data-rotation') || 0;
            const verticalOffset = element.getAttribute('data-vertical-offset') || 0;
            const horizontalOffset = element.getAttribute('data-horizontal-offset') || 0;

            // Clean up the SVG content
            let svgContent = tapeTemplate.innerHTML;
            svgContent = svgContent
                .replace(/\\&quot;/g, '"')
                .replace(/&quot;/g, '"')
                .replace(/\\"/g, '"')
                .replace(/\s+/g, ' ')
                .replace(/"\s+/g, '"')
                .replace(/\s+"/g, '"')
                .replace(/" >/g, '">')
                .replace(/> </g, '><')
                .replace(/style="[^"]*"/g, '')
                .replace(/\\"pattern-/g, 'pattern-')
                .replace(/\\"patternUnits=/g, 'patternUnits=')
                .replace(/\\"userSpaceOnUse\\"/g, 'userSpaceOnUse')
                .replace(/\\"width=/g, 'width=')
                .replace(/\\"height=/g, 'height=')
                .replace(/\\"(\d+)\\"/g, '"$1"')
                .replace(/\\"([^"\s]+)\\"/g, '"$1"');

            // Remove any existing SVG
            element.innerHTML = '';

            // Insert SVG markup directly (not as nested SVG)
            element.innerHTML = svgContent;
            const svgElement = element.querySelector('svg');
            if (!svgElement) {
                console.warn('SVG element not found after inserting tape content for ID:', tapeId);
                return;
            }
            svgElement.setAttribute('width', width);
            svgElement.setAttribute('height', height);
            svgElement.setAttribute('preserveAspectRatio', 'none');
            svgElement.style.width = width + 'px';
            svgElement.style.height = height + 'px';
            svgElement.style.left = '50%';
            svgElement.style.top = '-10px';
            svgElement.style.transform = `translateX(-50%) rotate(${rotation}deg)`;
            svgElement.style.position = 'absolute';
            svgElement.style.pointerEvents = 'none';
            svgElement.style.zIndex = '1000';
            // No parent width/height set
            console.log('Tape SVG appended to element:', tapeId); // Debug log
        });
    }

    /* ---------- bootstrap ---------- */
    // Initialize immediately if DOM is already loaded
    if (document.readyState === 'complete' || document.readyState === 'interactive') {
        initWashiTapes();
    }

    // Plain front-end
    document.addEventListener('DOMContentLoaded', function () {
        console.log('DOM Content Loaded - Initializing washi tapes'); // Debug log
        initWashiTapes();
    });

    // Elementor preview / editor
    function attachToElementor() {
        console.log('Attaching to Elementor'); // Debug log

        // Handle regular Elementor preview
        window.elementorFrontend.hooks.addAction(
            'frontend/element_ready/global',
            function ($scope) {
                setTimeout(initWashiTapes, 100);
            }
        );

        // Handle Elementor editor preview
        if (window.elementor && window.elementor.channels && window.elementor.channels.editor) {
            window.elementor.channels.editor.on('change', function () {
                setTimeout(initWashiTapes, 100);
            });
            window.elementor.channels.editor.on('section:activated', function () {
                setTimeout(initWashiTapes, 100);
            });
            window.elementor.channels.editor.on('panel:open', function () {
                setTimeout(initWashiTapes, 100);
            });
            window.elementor.channels.editor.on('panel:close', function () {
                setTimeout(initWashiTapes, 100);
            });
        }
    }

    // Initialize based on environment
    if (window.elementorFrontend && window.elementorFrontend.hooks) {
        console.log('Elementor already initialized - attaching now'); // Debug log
        attachToElementor(); // Elementor already initialised
    } else {
        console.log('Waiting for Elementor to initialize'); // Debug log
        // Wait until Elementor finishes booting
        jQuery(window).on('elementor/frontend/init', function () {
            console.log('Elementor initialized - attaching now'); // Debug log
            attachToElementor();
        });
    }

    // Re-initialize on dynamic content load
    jQuery(document).on('elementor/popup/hide', function () {
        console.log('Popup hidden - reinitializing washi tapes'); // Debug log
        initWashiTapes();
    });

    jQuery(document).on('elementor/popup/show', function () {
        console.log('Popup shown - reinitializing washi tapes'); // Debug log
        initWashiTapes();
    });

    // Also initialize on window load to catch any late-loading content
    window.addEventListener('load', function () {
        console.log('Window loaded - reinitializing washi tapes'); // Debug log
        initWashiTapes();
    });
})();

================
File: washi-tape-generator/assets/js/preview-script.js
================
/**
 * Washi Tape Generator Elementor Preview Script
 * This script is only loaded in the Elementor editor
 */
(function($) {
    'use strict';

    /**
     * Initialize the washi tape preview functionality
     */
    function initWashiTapePreview() {
        // Listen for changes to washi tape controls
        elementor.channels.editor.on('change', function(view) {
            const element = view.container.view.$el;
            const model = view.container.model;
            const settings = model.get('settings');
            
            // Check if washi tape is enabled
            if (settings.attributes.enable_washi_tape === 'yes' && settings.attributes.washi_tape_id !== '0') {
                updateWashiTape(element, settings.attributes);
            } else {
                removeWashiTape(element);
            }
        });
        
        // Handle section panel change
        elementor.channels.editor.on('section:activated', function(sectionName, editor) {
            if (sectionName === 'section_washi_tape_controls') {
                refreshWashiTapePreview(editor.model.cid);
            }
        });
    }
    
    /**
     * Update washi tape on an element
     */
    function updateWashiTape(element, settings) {
        // Add washi tape class and attributes
        element.addClass('has-washi-tape');
        element.attr('data-washi-tape-id', 'washi-tape-' + settings.washi_tape_id);
        element.attr('data-washi-tape-position', settings.washi_tape_position);
        
        // Create or update washi tape in editor
        createEditorWashiTape(settings.washi_tape_id, function(tapeElement) {
            if (!tapeElement) return;
            
            // Remove existing tape
            element.find('.elementor-washi-tape').remove();
            
            // Clone and add the new tape
            const tapeClone = $(tapeElement).clone();
            tapeClone.css({
                'display': 'block',
                'position': 'absolute',
                'z-index': settings.washi_tape_z_index || 1
            });
            
            // Position the tape
            positionTape(tapeClone, settings.washi_tape_position);
            
            // Apply rotation
            if (settings.washi_tape_rotation) {
                const degrees = settings.washi_tape_rotation.size || 0;
                tapeClone.css('transform', 'rotate(' + degrees + 'deg)');
            }
            
            element.append(tapeClone);
        });
    }
    
    /**
     * Position a tape based on position setting
     */
    function positionTape(tapeElement, position) {
        // Reset positioning
        tapeElement.css({
            'top': '',
            'right': '',
            'bottom': '',
            'left': ''
        });
        
        // Set position
        if (position === 'top-left') {
            tapeElement.css({
                'top': '-20px',
                'left': '-20px'
            });
        } else if (position === 'top-right') {
            tapeElement.css({
                'top': '-20px',
                'right': '-20px'
            });
        } else if (position === 'bottom-left') {
            tapeElement.css({
                'bottom': '-20px',
                'left': '-20px'
            });
        } else if (position === 'bottom-right') {
            tapeElement.css({
                'bottom': '-20px',
                'right': '-20px'
            });
        }
    }
    
    /**
     * Remove washi tape from an element
     */
    function removeWashiTape(element) {
        element.removeClass('has-washi-tape');
        element.removeAttr('data-washi-tape-id');
        element.removeAttr('data-washi-tape-position');
        element.find('.elementor-washi-tape').remove();
    }
    
    /**
     * Refresh washi tape preview when the section is activated
     */
    function refreshWashiTapePreview(cid) {
        const model = elementor.getContainer(cid).model;
        const settings = model.get('settings');
        const element = elementor.$preview.find('[data-model-cid="' + cid + '"]');
        
        if (settings.attributes.enable_washi_tape === 'yes' && settings.attributes.washi_tape_id !== '0') {
            updateWashiTape(element, settings.attributes);
        }
    }
    
    /**
     * Create a washi tape element in the editor
     */
    function createEditorWashiTape(tapeId, callback) {
        // Use AJAX to get the washi tape SVG
        $.ajax({
            url: ajaxurl,
            type: 'POST',
            data: {
                action: 'get_washi_tape_svg',
                nonce: washiTapePreviewParams.nonce,
                id: tapeId
            },
            success: function(response) {
                if (response.success && response.data.svg) {
                    // Create element
                    const tapeElement = $('<div class="elementor-washi-tape">' + response.data.svg + '</div>');
                    
                    // Add to hidden container if not exists
                    let container = $('#elementor-washi-tapes-container');
                    if (container.length === 0) {
                        container = $('<div id="elementor-washi-tapes-container" style="display:none;"></div>');
                        $('body').append(container);
                    }
                    
                    // Add with ID
                    const tapeId = 'washi-tape-' + response.data.id;
                    let existingTape = $('#' + tapeId);
                    if (existingTape.length) {
                        existingTape.replaceWith(tapeElement.attr('id', tapeId));
                    } else {
                        container.append(tapeElement.attr('id', tapeId));
                    }
                    
                    callback(tapeElement[0]);
                } else {
                    console.error('Error loading washi tape:', response);
                    callback(null);
                }
            },
            error: function() {
                console.error('Error loading washi tape');
                callback(null);
            }
        });
    }

    // Initialize when Elementor is ready
    $(window).on('elementor/frontend/init', function() {
        elementor.on('preview:loaded', initWashiTapePreview);
    });

})(jQuery);

================
File: washi-tape-generator/includes/admin/views/admin-page.php
================
<?php
// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}
?>
<div class="wrap washi-tape-admin">
    <h1><?php echo esc_html__('Washi Tape Generator', 'washi-tape-generator'); ?></h1>

    <div class="washi-tape-admin-grid">
        <!-- Generator Panel -->
        <div class="washi-tape-panel generator-panel">
            <div class="panel-header">
                <h2><?php echo esc_html__('Create Washi Tape', 'washi-tape-generator'); ?></h2>
            </div>
            <div class="panel-body">
                <form id="washi-form">
                    <div class="form-section">
                        <div class="form-section-title"><?php echo esc_html__('Tape Name', 'washi-tape-generator'); ?></div>
                        <div class="form-control">
                            <input type="text" id="tape-title" class="regular-text" placeholder="<?php echo esc_attr__('Enter a name for your washi tape', 'washi-tape-generator'); ?>" required>
                            <input type="hidden" id="tape-id" value="0">
                        </div>
                    </div>

                    <div class="form-section">
                        <div class="form-section-title"><?php echo esc_html__('Appearance', 'washi-tape-generator'); ?></div>
                        <div class="form-group">
                            <div class="form-control">
                                <label for="color"><?php echo esc_html__('Base Color', 'washi-tape-generator'); ?></label>
                                <input type="color" id="color" value="#8a5cf7">
                            </div>
                            <div class="form-control">
                                <label for="opacity"><?php echo esc_html__('Base Opacity', 'washi-tape-generator'); ?></label>
                                <input type="range" id="opacity" min="0" max="100" value="100" class="range-slider">
                                <output for="opacity" id="opacity-value">100%</output>
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="form-control">
                                <label for="pattern"><?php echo esc_html__('Pattern', 'washi-tape-generator'); ?></label>
                                <select id="pattern">
                                    <option value="solid"><?php echo esc_html__('Solid', 'washi-tape-generator'); ?></option>
                                    <option value="horizontal-lines"><?php echo esc_html__('Horizontal Lines', 'washi-tape-generator'); ?></option>
                                    <option value="vertical-lines" selected><?php echo esc_html__('Vertical Lines', 'washi-tape-generator'); ?></option>
                                    <option value="grid"><?php echo esc_html__('Grid', 'washi-tape-generator'); ?></option>
                                    <option value="dots"><?php echo esc_html__('Dots', 'washi-tape-generator'); ?></option>
                                    <option value="random-lines"><?php echo esc_html__('Random Lines', 'washi-tape-generator'); ?></option>
                                </select>
                            </div>
                            <div class="form-control">
                                <label for="pattern-opacity"><?php echo esc_html__('Pattern Opacity', 'washi-tape-generator'); ?></label>
                                <input type="range" id="pattern-opacity" min="0" max="100" value="100" class="range-slider">
                                <output for="pattern-opacity" id="pattern-opacity-value">100%</output>
                            </div>
                        </div>

                        <div id="pattern-options">
                            <div class="form-group" id="pattern-spacing-group">
                                <div class="form-control">
                                    <label for="pattern-spacing"><?php echo esc_html__('Pattern Spacing (px)', 'washi-tape-generator'); ?></label>
                                    <input type="number" id="pattern-spacing" value="10" min="1">
                                </div>
                                <div class="form-control" id="pattern-randomness-control">
                                    <label for="pattern-randomness"><?php echo esc_html__('Pattern Randomness', 'washi-tape-generator'); ?></label>
                                    <input type="range" id="pattern-randomness" min="0" max="100" value="0" class="range-slider">
                                    <output for="pattern-randomness" id="pattern-randomness-value">0%</output>
                                </div>
                            </div>

                            <div class="form-group" id="line-options">
                                <div class="form-control">
                                    <label for="line-thickness"><?php echo esc_html__('Line Thickness (px)', 'washi-tape-generator'); ?></label>
                                    <input type="number" id="line-thickness" value="1" min="1">
                                </div>
                                <div class="form-control">
                                    <label for="line-color"><?php echo esc_html__('Line Color', 'washi-tape-generator'); ?></label>
                                    <input type="color" id="line-color" value="#000000">
                                </div>
                            </div>

                            <div class="form-group" id="dot-options" style="display: none;">
                                <div class="form-control">
                                    <label for="dot-diameter"><?php echo esc_html__('Dot Diameter (px)', 'washi-tape-generator'); ?></label>
                                    <input type="number" id="dot-diameter" value="5" min="1">
                                </div>
                                <div class="form-control">
                                    <label for="dot-color"><?php echo esc_html__('Dot Color', 'washi-tape-generator'); ?></label>
                                    <input type="color" id="dot-color" value="#ffffff">
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-section">
                        <div class="form-section-title"><?php echo esc_html__('Image Overlay', 'washi-tape-generator'); ?></div>
                        <div class="form-control">
                            <div class="toggle-container">
                                <label class="toggle">
                                    <input type="checkbox" id="use-image-overlay">
                                    <span class="toggle-slider"></span>
                                </label>
                                <span class="toggle-label"><?php echo esc_html__('Use Image Overlay', 'washi-tape-generator'); ?></span>
                            </div>
                        </div>

                        <div id="image-overlay-controls" style="display: none;">
                            <div class="form-control">
                                <label for="image-upload"><?php echo esc_html__('Upload Image', 'washi-tape-generator'); ?></label>
                                <div class="image-upload-container">
                                    <button type="button" id="image-upload-btn" class="button"><?php echo esc_html__('Select Image', 'washi-tape-generator'); ?></button>
                                    <div id="image-preview"></div>
                                    <input type="hidden" id="image-url" value="">
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="form-control">
                                    <label for="image-size"><?php echo esc_html__('Image Size', 'washi-tape-generator'); ?></label>
                                    <select id="image-size">
                                        <option value="cover"><?php echo esc_html__('Cover', 'washi-tape-generator'); ?></option>
                                        <option value="contain"><?php echo esc_html__('Contain', 'washi-tape-generator'); ?></option>
                                        <option value="repeat"><?php echo esc_html__('Repeat', 'washi-tape-generator'); ?></option>
                                        <option value="repeat-x"><?php echo esc_html__('Repeat X', 'washi-tape-generator'); ?></option>
                                        <option value="repeat-y"><?php echo esc_html__('Repeat Y', 'washi-tape-generator'); ?></option>
                                    </select>
                                </div>
                                <div class="form-control">
                                    <label for="image-opacity"><?php echo esc_html__('Image Opacity', 'washi-tape-generator'); ?></label>
                                    <input type="range" id="image-opacity" min="0" max="100" value="50" class="range-slider">
                                    <output for="image-opacity" id="image-opacity-value">50%</output>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-section">
                        <div class="form-section-title"><?php echo esc_html__('Size & Position', 'washi-tape-generator'); ?></div>
                        <div class="form-group">
                            <div class="form-control">
                                <label for="width"><?php echo esc_html__('Width (px)', 'washi-tape-generator'); ?></label>
                                <input type="number" id="width" value="180" min="50">
                            </div>
                            <div class="form-control">
                                <label for="height"><?php echo esc_html__('Height (px)', 'washi-tape-generator'); ?></label>
                                <input type="number" id="height" value="45" min="20">
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="form-control">
                                <label for="position"><?php echo esc_html__('Position', 'washi-tape-generator'); ?></label>
                                <select id="position">
                                    <option value="left"><?php echo esc_html__('Left', 'washi-tape-generator'); ?></option>
                                    <option value="right"><?php echo esc_html__('Right', 'washi-tape-generator'); ?></option>
                                    <option value="top"><?php echo esc_html__('Top', 'washi-tape-generator'); ?></option>
                                    <option value="bottom"><?php echo esc_html__('Bottom', 'washi-tape-generator'); ?></option>
                                </select>
                            </div>
                            <div class="form-control">
                                <label for="rotation"><?php echo esc_html__('Rotation (degrees)', 'washi-tape-generator'); ?></label>
                                <input type="number" id="rotation" value="0" step="1">
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="form-control">
                                <label for="roughness"><?php echo esc_html__('Edge Roughness', 'washi-tape-generator'); ?></label>
                                <input type="range" id="roughness" min="1" max="20" value="10" class="range-slider">
                                <output for="roughness" id="roughness-value">10%</output>
                            </div>
                            <div class="form-control">
                                <label for="segments"><?php echo esc_html__('Edge Segments', 'washi-tape-generator'); ?></label>
                                <input type="range" id="segments" min="5" max="20" value="10" class="range-slider">
                                <output for="segments" id="segments-value">10</output>
                            </div>
                        </div>

                        <div class="form-control">
                            <div class="toggle-container">
                                <label class="toggle">
                                    <input type="checkbox" id="torn-edges" checked>
                                    <span class="toggle-slider"></span>
                                </label>
                                <span class="toggle-label"><?php echo esc_html__('Torn Edges', 'washi-tape-generator'); ?></span>
                            </div>
                        </div>
                    </div>

                    <div class="form-actions">
                        <button type="button" id="save-washi-tape" class="button button-primary"><?php echo esc_html__('Save Washi Tape', 'washi-tape-generator'); ?></button>
                        <button type="button" id="reset-washi-tape" class="button"><?php echo esc_html__('Reset', 'washi-tape-generator'); ?></button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Preview & Saved Tapes Panel -->
        <div class="washi-tape-panel preview-panel">
            <div class="panel-header">
                <h2><?php echo esc_html__('Preview', 'washi-tape-generator'); ?></h2>
            </div>
            <div class="panel-body">
                <div class="preview-container">
                    <svg id="washi-svg" class="washi-svg" preserveAspectRatio="none"></svg>
                    <div class="content-box">
                        <h3><?php echo esc_html__('Washi Tape Preview', 'washi-tape-generator'); ?></h3>
                        <p><?php echo esc_html__('Customize your decorative tape using the controls', 'washi-tape-generator'); ?></p>
                    </div>
                </div>
            </div>

            <div class="panel-header saved-tapes-header">
                <h2><?php echo esc_html__('Saved Washi Tapes', 'washi-tape-generator'); ?></h2>
            </div>
            <div class="panel-body">
                <div id="saved-washi-tapes" class="saved-washi-tapes">
                    <div class="loading-indicator"><?php echo esc_html__('Loading...', 'washi-tape-generator'); ?></div>
                </div>
            </div>
        </div>
    </div>
</div>

================
File: washi-tape-generator/includes/admin/class-washi-tape-admin.php
================
<?php

/**
 * Washi Tape Admin Class
 */
class Washi_Tape_Admin
{

    /**
     * Admin instance
     */
    private static $instance = null;

    /**
     * Get admin instance
     */
    public static function get_instance()
    {
        if (null === self::$instance) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    /**
     * Constructor
     */
    public function __construct()
    {
        // Add actions and filters
        add_action('admin_init', array($this, 'admin_init'));
    }

    /**
     * Admin init
     */
    public function admin_init()
    {
        // Register media uploader scripts for the image overlay
        add_action('admin_enqueue_scripts', array($this, 'enqueue_media_uploader'));
    }

    /**
     * Enqueue media uploader
     */
    public function enqueue_media_uploader($hook)
    {
        if ('toplevel_page_washi-tape-generator' !== $hook) {
            return;
        }

        wp_enqueue_media();
    }
}

// Initialize the admin class
Washi_Tape_Admin::get_instance();

================
File: washi-tape-generator/includes/elementor/class-washi-tape-elementor.php
================
<?php

namespace Washi_Tape\Elementor;

if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly
}

/**
 * Add Washi Tape Controls to Elementor widgets
 */
class Washi_Tape_Controls
{
    /**
     * Initialize the class
     */
    public function __construct()
    {
        // Frontend styles
        add_action('elementor/frontend/after_enqueue_styles', [$this, 'enqueue_styles']);
        add_action('wp_enqueue_scripts', [$this, 'enqueue_styles']);

        // Editor styles
        add_action('elementor/editor/after_enqueue_styles', [$this, 'enqueue_editor_styles']);
        add_action('elementor/preview/enqueue_styles', [$this, 'enqueue_preview_styles']);

        // Controls
        add_action('elementor/element/after_section_end', [$this, 'add_washi_tape_controls'], 10, 3);

        // Content filter
        add_filter('elementor/widget/render_content', [$this, 'apply_washi_tape'], 10, 2);

        // Add editor script loading
        add_action('elementor/preview/enqueue_scripts', [$this, 'enqueue_preview_scripts']);

        // Register Washi Tape Controls
        add_action('elementor/controls/register', [$this, 'register_washi_tape_control']);
    }

    /**
     * Add Washi Tape controls to Elementor widgets
     */
    public function add_washi_tape_controls($element, $section_id, $args)
    {

        if ('section_advanced' !== $section_id || 'section_custom_css' !== $section_id) { // Try "section_advanced" instead
            return;
        }

        if (!did_action('elementor/loaded') || !class_exists('\Elementor\Plugin')) {
            return;
        }

        if (!$element instanceof \Elementor\Element_Base) {
            return;
        }

        $allowed_types = ['widget', 'section', 'column'];
        if (!in_array($element->get_type(), $allowed_types, true)) {
            return;
        }

        try {
            // Log database interaction
            if (WP_DEBUG) {
                error_log('Washi Tape Generator: Attempting to fetch washi tapes from database');
            }

            // Get all washi tapes
            $db = new \Washi_Tape_DB();
            $washi_tapes = $db->get_all_washi_tapes();

            if (empty($washi_tapes) && WP_DEBUG) {
                error_log('Washi Tape Generator: No washi tapes found in database');
            }

            // Start adding controls
            $element->start_controls_section(
                'section_washi_tape',
                [
                    'label' => __('Washi Tape Maker', 'washi-tape-generator'),
                    'tab' => \Elementor\Controls_Manager::TAB_ADVANCED,
                ]
            );

            // Prepare options
            $options = array(
                '0' => __('None', 'washi-tape-generator'),
            );

            if (!empty($washi_tapes)) {
                foreach ($washi_tapes as $tape) {
                    $options[$tape->id] = $tape->title;
                }
            }

            $element->add_control(
                'enable_washi_tape',
                [
                    'label' => __('Enable Tape Decor', 'washi-tape-generator'),
                    'type' => \Elementor\Controls_Manager::SWITCHER,
                    'default' => '',
                    'label_on' => __('Yes', 'washi-tape-generator'),
                    'label_off' => __('No', 'washi-tape-generator'),
                    'return_value' => 'yes',
                ]
            );

            $element->add_control(
                'washi_tape_id',
                [
                    'label' => __('Select Tape', 'washi-tape-generator'),
                    'type' => \Elementor\Controls_Manager::SELECT,
                    'default' => '0',
                    'options' => $options,
                    'condition' => [
                        'enable_washi_tape' => 'yes',
                    ],
                ]
            );

            $element->add_control(
                'washi_tape_position',
                [
                    'label' => __('Position', 'washi-tape-generator'),
                    'type' => \Elementor\Controls_Manager::SELECT,
                    'default' => 'top-left',
                    'options' => [
                        'top-left' => __('Top Left', 'washi-tape-generator'),
                        'top-right' => __('Top Right', 'washi-tape-generator'),
                        'bottom-left' => __('Bottom Left', 'washi-tape-generator'),
                        'bottom-right' => __('Bottom Right', 'washi-tape-generator'),
                    ],
                    'condition' => [
                        'enable_washi_tape' => 'yes',
                        'washi_tape_id!' => '0',
                    ],
                ]
            );

            $element->add_control(
                'washi_tape_rotation',
                [
                    'label' => __('Rotation', 'washi-tape-generator'),
                    'type' => \Elementor\Controls_Manager::SLIDER,
                    'size_units' => ['deg'],
                    'range' => [
                        'deg' => [
                            'min' => -180,
                            'max' => 180,
                            'step' => 1,
                        ],
                    ],
                    'default' => [
                        'unit' => 'deg',
                        'size' => 0,
                    ],
                    'condition' => [
                        'enable_washi_tape' => 'yes',
                        'washi_tape_id!' => '0',
                    ],
                    'selectors' => [
                        '{{WRAPPER}} .elementor-washi-tape' => 'transform: rotate({{SIZE}}{{UNIT}});',
                    ],
                ]
            );

            $element->add_control(
                'washi_tape_z_index',
                [
                    'label' => __('Z-Index', 'washi-tape-generator'),
                    'type' => \Elementor\Controls_Manager::NUMBER,
                    'min' => -1000,
                    'max' => 1000,
                    'step' => 1,
                    'default' => 1,
                    'condition' => [
                        'enable_washi_tape' => 'yes',
                        'washi_tape_id!' => '0',
                    ],
                    'selectors' => [
                        '{{WRAPPER}} .elementor-washi-tape' => 'z-index: {{VALUE}};',
                    ],
                ]
            );

            $element->end_controls_section();

            if (WP_DEBUG) {
                error_log('Washi Tape Generator: Successfully added all controls to element');
            }
        } catch (\Exception $e) {
            error_log(sprintf(
                'Washi Tape Generator: Error adding controls - Message: %s | File: %s | Line: %d | Trace: %s',
                $e->getMessage(),
                $e->getFile(),
                $e->getLine(),
                $e->getTraceAsString()
            ));
            return;
        }
    }

    /**
     * Enqueue styles
     */
    public function enqueue_styles()
    {
        wp_enqueue_style(
            'washi-tape-elementor',
            WASHI_TAPE_URL . 'assets/css/elementor.css',
            [],
            WASHI_TAPE_VERSION
        );
    }

    /**
     * Enqueue editor styles
     */
    public function enqueue_editor_styles()
    {
        wp_enqueue_style(
            'washi-tape-elementor-editor',
            WASHI_TAPE_URL . 'assets/css/elementor-editor.css',
            [],
            WASHI_TAPE_VERSION
        );
    }

    /**
     * Enqueue preview styles
     */
    public function enqueue_preview_styles()
    {
        wp_enqueue_style(
            'washi-tape-elementor-preview',
            WASHI_TAPE_URL . 'assets/css/elementor-preview.css',
            [],
            WASHI_TAPE_VERSION
        );
    }

    /**
     * Enqueue preview scripts
     */
    public function enqueue_preview_scripts()
    {
        wp_enqueue_script(
            'washi-tape-elementor-preview',
            WASHI_TAPE_URL . 'assets/js/elementor-preview.js',
            ['jquery'],
            WASHI_TAPE_VERSION,
            true
        );
    }

    /**
     * Apply Washi Tape to widget content
     */
    public function apply_washi_tape($content, $widget)
    {
        try {
            if (WP_DEBUG) {
                error_log('Washi Tape Generator: Attempting to apply washi tape to widget: ' . $widget->get_name());
            }

            // Get settings
            $settings = $widget->get_settings_for_display();

            // Check if washi tape is enabled
            if (empty($settings['enable_washi_tape']) || $settings['enable_washi_tape'] !== 'yes') {
                return $content;
            }

            // Check if a tape is selected
            if (empty($settings['washi_tape_id']) || $settings['washi_tape_id'] === '0') {
                return $content;
            }

            // Get the washi tape data
            $db = new \Washi_Tape_DB();
            $tape = $db->get_washi_tape($settings['washi_tape_id']);

            if (!$tape) {
                if (WP_DEBUG) {
                    error_log('Washi Tape Generator: Tape not found with ID: ' . $settings['washi_tape_id']);
                }
                return $content;
            }

            // Get position
            $position = !empty($settings['washi_tape_position']) ? $settings['washi_tape_position'] : 'top-left';

            // Create the washi tape HTML
            $tape_html = sprintf(
                '<div class="elementor-washi-tape washi-tape-position-%s" style="background-image: url(%s);" data-tape-id="%d"></div>',
                esc_attr($position),
                esc_url($tape->image_url),
                (int) $tape->id
            );

            if (WP_DEBUG) {
                error_log('Washi Tape Generator: Successfully applied washi tape to widget');
            }

            return $tape_html . $content;
        } catch (\Exception $e) {
            error_log(sprintf(
                'Washi Tape Generator: Error applying washi tape - Message: %s | File: %s | Line: %d | Trace: %s',
                $e->getMessage(),
                $e->getFile(),
                $e->getLine(),
                $e->getTraceAsString()
            ));
            return $content;
        }
    }

    /**
     * Register Washi Tape Control
     * 
     * @param \Elementor\Controls_Manager $controls_manager Elementor controls manager.
     */
    public function register_washi_tape_control($controls_manager)
    {
        try {
            if (WP_DEBUG) {
                error_log('Washi Tape Generator: Starting control registration');
            }

            if (!$controls_manager instanceof \Elementor\Controls_Manager) {
                error_log('Washi Tape Generator: Invalid controls manager instance');
                return;
            }

            // Get all washi tapes from database
            $db = new \Washi_Tape_DB();
            $washi_tapes = $db->get_all_washi_tapes();

            if (empty($washi_tapes) && WP_DEBUG) {
                error_log('Washi Tape Generator: No washi tapes found during control registration');
            }

            // Prepare options for the dropdown
            $options = [
                '0' => __('None', 'washi-tape-generator'),
            ];

            if (!empty($washi_tapes)) {
                foreach ($washi_tapes as $tape) {
                    $options[$tape->id] = $tape->title;
                }
            }

            // Register a new control type
            $controls_manager->add_control(
                'washi_tape_selector',
                [
                    'label' => __('Washi Tape', 'washi-tape-generator'),
                    'type' => \Elementor\Controls_Manager::SELECT,
                    'default' => '0',
                    'options' => $options,
                    'label_block' => true,
                ]
            );

            if (WP_DEBUG) {
                error_log('Washi Tape Generator: Successfully registered washi tape control');
            }
        } catch (\Exception $e) {
            error_log(sprintf(
                'Washi Tape Generator: Error registering control - Message: %s | File: %s | Line: %d | Trace: %s',
                $e->getMessage(),
                $e->getFile(),
                $e->getLine(),
                $e->getTraceAsString()
            ));
        }
    }
}

================
File: washi-tape-generator/includes/class-washi-tape-db.php
================
<?php

/**
 * Washi Tape Database Class
 */
class Washi_Tape_DB
{

    /**
     * Table name
     */
    private $table_name;

    /**
     * Constructor
     */
    public function __construct()
    {
        global $wpdb;
        $this->table_name = $wpdb->prefix . 'washi_tapes';
    }

    /**
     * Create database tables
     */
    public function create_tables()
    {
        global $wpdb;

        $charset_collate = $wpdb->get_charset_collate();

        $sql = "CREATE TABLE $this->table_name (
            id mediumint(9) NOT NULL AUTO_INCREMENT,
            title varchar(255) NOT NULL,
            svg longtext NOT NULL,
            settings longtext NOT NULL,
            created_at datetime DEFAULT CURRENT_TIMESTAMP NOT NULL,
            updated_at datetime NOT NULL,
            PRIMARY KEY  (id)
        ) $charset_collate;";

        require_once ABSPATH . 'wp-admin/includes/upgrade.php';
        dbDelta($sql);

        // Add error logging
        if ($wpdb->last_error) {
            error_log('Washi Tape Table Creation Error (DB Class): ' . $wpdb->last_error);
        } else {
            error_log('Washi Tape Table Creation Success (DB Class)');
        }
    }

    /**
     * Create a new washi tape design
     */
    public function create_washi_tape($title, $svg, $settings)
    {
        global $wpdb;

        $current_time = current_time('mysql');

        $result = $wpdb->insert(
            $this->table_name,
            array(
                'title' => $title,
                'svg' => $svg,
                'settings' => $settings,
                'updated_at' => $current_time
            ),
            array('%s', '%s', '%s', '%s')
        );

        return $result ? $wpdb->insert_id : false;
    }

    /**
     * Update an existing washi tape design
     */
    public function update_washi_tape($id, $title, $svg, $settings)
    {
        global $wpdb;

        $current_time = current_time('mysql');

        $result = $wpdb->update(
            $this->table_name,
            array(
                'title' => $title,
                'svg' => $svg,
                'settings' => $settings,
                'updated_at' => $current_time
            ),
            array('id' => $id),
            array('%s', '%s', '%s', '%s'),
            array('%d')
        );

        return $result !== false ? $id : false;
    }

    /**
     * Delete a washi tape design
     */
    public function delete_washi_tape($id)
    {
        global $wpdb;

        $result = $wpdb->delete(
            $this->table_name,
            array('id' => $id),
            array('%d')
        );

        return $result !== false;
    }

    /**
     * Get a single washi tape design
     */
    public function get_washi_tape($id)
    {
        global $wpdb;

        $query = $wpdb->prepare(
            "SELECT * FROM $this->table_name WHERE id = %d",
            $id
        );

        return $wpdb->get_row($query);
    }

    /**
     * Get all washi tape designs
     */
    public function get_all_washi_tapes()
    {
        global $wpdb;

        $query = "SELECT * FROM $this->table_name ORDER BY updated_at DESC";

        return $wpdb->get_results($query);
    }
}

================
File: washi-tape-generator/repomix-output.txt
================
This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
assets/
  css/
    admin-style.css
    frontend-style.css
    preview-style.css
  js/
    admin-script.js
    elementor-editor.js
    frontend-script.js
    preview-script.js
includes/
  admin/
    views/
      admin-page.php
    class-washi-tape-admin.php
  elementor/
    class-washi-tape-elementor.php
  class-washi-tape-db.php
washi-tape-generator.php

================================================================
Files
================================================================

================
File: assets/css/admin-style.css
================
/**
 * Washi Tape Generator Admin Styles
 */

/* Admin Grid Layout */
.washi-tape-admin-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
    margin-top: 20px;
}

@media (max-width: 1200px) {
    .washi-tape-admin-grid {
        grid-template-columns: 1fr;
    }
}

/* Panel Styling */
.washi-tape-panel {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    margin-bottom: 20px;
}

.panel-header {
    background-color: #f0f0f1;
    padding: 15px 20px;
    border-bottom: 1px solid #dcdcde;
}

.panel-header h2 {
    margin: 0;
    font-size: 16px;
    font-weight: 600;
}

.panel-body {
    padding: 20px;
}

/* Form Styling */
.form-section {
    margin-bottom: 25px;
}

.form-section:last-child {
    margin-bottom: 0;
}

.form-section-title {
    font-size: 14px;
    font-weight: 600;
    margin-bottom: 15px;
    padding-bottom: 10px;
    border-bottom: 1px solid #f0f0f1;
    color: #1d2327;
}

.form-group {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 15px;
    margin-bottom: 15px;
}

.form-control {
    margin-bottom: 15px;
}

.form-control label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
    font-size: 13px;
    color: #50575e;
}

.form-control input[type="color"] {
    height: 35px;
    width: 100%;
    border: 1px solid #8c8f94;
    border-radius: 4px;
    padding: 0;
    cursor: pointer;
}

.form-control input[type="color"]::-webkit-color-swatch-wrapper {
    padding: 0;
}

.form-control input[type="color"]::-webkit-color-swatch {
    border: none;
    border-radius: 4px;
}

.form-control input[type="number"],
.form-control select,
.form-control input[type="text"] {
    width: 100%;
    padding: 8px;
    border: 1px solid #8c8f94;
    border-radius: 4px;
    font-size: 14px;
}

.form-control input[type="range"] {
    width: 100%;
}

/* Toggle Switch */
.toggle-container {
    display: flex;
    align-items: center;
    margin-top: 5px;
}

.toggle {
    position: relative;
    display: inline-block;
    width: 52px;
    height: 28px;
    margin-right: 10px;
}

.toggle input {
    opacity: 0;
    width: 0;
    height: 0;
}

.toggle-slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: .4s;
    border-radius: 28px;
}

.toggle-slider:before {
    position: absolute;
    content: "";
    height: 20px;
    width: 20px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    transition: .4s;
    border-radius: 50%;
}

input:checked + .toggle-slider {
    background-color: #2271b1;
}

input:focus + .toggle-slider {
    box-shadow: 0 0 1px #2271b1;
}

input:checked + .toggle-slider:before {
    transform: translateX(24px);
}

.toggle-label {
    font-weight: 500;
    font-size: 13px;
}

/* Range Sliders */
.range-slider {
    -webkit-appearance: none;
    height: 6px;
    border-radius: 3px;  
    background: #dcdcde;
    outline: none;
    padding: 0;
    margin: 8px 0;
}

.range-slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 16px;
    height: 16px;
    border-radius: 50%; 
    background: #2271b1;
    cursor: pointer;
    transition: background .15s ease-in-out;
}

.range-slider::-moz-range-thumb {
    width: 16px;
    height: 16px;
    border: 0;
    border-radius: 50%;
    background: #2271b1;
    cursor: pointer;
    transition: background .15s ease-in-out;
}

.range-slider::-webkit-slider-thumb:hover,
.range-slider::-moz-range-thumb:hover {
    background: #135e96;
}

output {
    display: inline-block;
    font-size: 12px;
    color: #50575e;
    margin-top: 5px;
}

/* Form Actions */
.form-actions {
    margin-top: 20px;
    display: flex;
    gap: 10px;
}

/* Preview Container */
.preview-container {
    position: relative;
    margin: 20px auto;
    width: 100%;
    max-width: 400px;
    height: 300px;
}

.content-box {
    width: 100%;
    height: 100%;
    background-color: #f0f0f1;
    border-radius: 8px;
    padding: 30px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    position: relative;
    z-index: 0;
    border: 1px solid #dcdcde;
}

.content-box h3 {
    margin-bottom: 15px;
    color: #1d2327;
}

.washi-svg {
    position: absolute;
    z-index: 1;
    filter: drop-shadow(0 1px 3px rgba(0, 0, 0, 0.2));
}

/* Saved Washi Tapes */
.saved-tapes-header {
    margin-top: 20px;
}

.washi-tape-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
    gap: 15px;
    margin-top: 10px;
}

.washi-tape-item {
    background-color: #f6f7f7;
    border-radius: 6px;
    border: 1px solid #dcdcde;
    overflow: hidden;
    position: relative;
    transition: all 0.2s ease;
}

.washi-tape-item:hover {
    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.1);
    transform: translateY(-2px);
}

.washi-tape-preview {
    height: 120px;
    padding: 15px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #fff;
    position: relative;
    overflow: visible;
}

.washi-tape-preview .preview-background {
    width: 100%;
    height: 100%;
    background-color: #f0f0f1;
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
}

.washi-tape-preview .preview-background svg {
    position: absolute;
    z-index: 1;
    width: 180px !important;
    height: 45px !important;
    left: 50% !important;
    top: 50% !important;
    transform: translate(-50%, -50%) !important;
    filter: drop-shadow(0 1px 3px rgba(0, 0, 0, 0.2));
}

.washi-tape-preview .preview-background svg path {
    vector-effect: non-scaling-stroke;
}

.washi-tape-preview .preview-background svg pattern {
    patternUnits: userSpaceOnUse;
}

.washi-tape-details {
    padding: 10px 15px;
}

.washi-tape-details h3 {
    margin: 0 0 10px 0;
    font-size: 14px;
    font-weight: 600;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.washi-tape-actions {
    display: flex;
    justify-content: space-between;
    gap: 10px;
}

.washi-tape-actions button {
    flex: 1;
    text-align: center;
}

/* Image Upload */
.image-upload-container {
    margin-top: 5px;
}

#image-preview {
    margin-top: 10px;
    background-color: #f0f0f1;
    border: 1px solid #dcdcde;
    padding: 5px;
    border-radius: 4px;
    min-height: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
}

/* Loading Indicator */
.loading-indicator {
    text-align: center;
    padding: 20px;
    color: #50575e;
}

================
File: assets/css/frontend-style.css
================
/**
 * Washi Tape Generator Frontend Styles
 */

/* Container for all washi tapes (hidden) */
#elementor-washi-tapes {
    display: none;
}

/* Element with washi tape */
.has-washi-tape {
    position: relative;
    overflow: visible !important;
}

/* Washi tape positioning and styling */
.elementor-washi-tape {
    position: absolute;
    z-index: 1;
    filter: drop-shadow(0 1px 3px rgba(0, 0, 0, 0.15));
    pointer-events: none;
}

/* Position helpers */
.has-washi-tape[data-washi-tape-position="top-left"] .elementor-washi-tape {
    top: -20px;
    left: -20px;
}

.has-washi-tape[data-washi-tape-position="top-right"] .elementor-washi-tape {
    top: -20px;
    right: -20px;
}

.has-washi-tape[data-washi-tape-position="bottom-left"] .elementor-washi-tape {
    bottom: -20px;
    left: -20px;
}

.has-washi-tape[data-washi-tape-position="bottom-right"] .elementor-washi-tape {
    bottom: -20px;
    right: -20px;
}

/* Make sure SVG fills the container */
.elementor-washi-tape svg {
    width: 100%;
    height: 100%;
}

================
File: assets/css/preview-style.css
================
/**
 * Washi Tape Generator Elementor Preview Styles
 * These styles are only loaded in the Elementor editor
 */

/* Highlight elements with washi tape in editor */
.elementor-editor-active .has-washi-tape {
    outline: 2px dashed #6d28d9;
    outline-offset: 2px;
}

/* Add a visual indicator */
.elementor-editor-active .has-washi-tape::before {
    content: "🎨 Washi Tape";
    position: absolute;
    top: -20px;
    left: 0;
    background-color: #6d28d9;
    color: white;
    font-size: 10px;
    padding: 2px 5px;
    border-radius: 3px;
    z-index: 9999;
    pointer-events: none;
}

/* Make sure washi tapes are visible and positioned correctly in editor */
.elementor-editor-active .elementor-washi-tape {
    opacity: 1;
    visibility: visible;
    pointer-events: none;
}

/* Make sure washi tapes don't interfere with editing */
.elementor-editor-active .elementor-element.elementor-widget > .elementor-washi-tape {
    pointer-events: none;
}

/* Show a hint in the panel */
.elementor-control-section_washi_tape_controls .elementor-panel-heading-title::after {
    content: "✨";
    margin-left: 5px;
    color: #6d28d9;
}

================
File: assets/js/admin-script.js
================
/**
 * Washi Tape Generator Admin Script
 */
(function($) {
    'use strict';

    // Initialize the washi tape generator
    const WashiTapeGenerator = {
        init: function() {
            this.initVars();
            this.bindEvents();
            this.initMediaUploader();
            this.updatePreview();
            this.loadSavedWashiTapes();
        },

        initVars: function() {
            // Form elements
            this.colorInput = $('#color');
            this.patternSelect = $('#pattern');
            this.tornEdgesCheckbox = $('#torn-edges');
            this.widthInput = $('#width');
            this.heightInput = $('#height');
            this.positionSelect = $('#position');
            this.rotationInput = $('#rotation');
            this.patternSpacingInput = $('#pattern-spacing');
            this.lineThicknessInput = $('#line-thickness');
            this.lineColorInput = $('#line-color');
            this.dotDiameterInput = $('#dot-diameter');
            this.dotColorInput = $('#dot-color');
            this.patternRandomnessInput = $('#pattern-randomness');
            this.useImageOverlayCheckbox = $('#use-image-overlay');
            this.imageUrlInput = $('#image-url');
            this.imageOpacityInput = $('#image-opacity');
            
            // Output elements
            this.washiSvg = document.getElementById('washi-svg');
            this.savedWashiTapesContainer = $('#saved-washi-tapes');
            
            // Other variables
            this.svgDefs = null;
            this.currentImageData = null;
        },

        bindEvents: function() {
            // Update preview on input change, excluding the title input
            $('input:not(#tape-title), select').on('input change', this.updatePreview.bind(this));
            
            // Reset button
            $('#reset-washi-tape').on('click', this.resetForm.bind(this));
            
            // Save button
            $('#save-washi-tape').on('click', this.saveWashiTape.bind(this));
            
            // Image overlay toggle
            this.useImageOverlayCheckbox.on('change', function() {
                if (this.checked) {
                    $('#image-overlay-controls').show();
                } else {
                    $('#image-overlay-controls').hide();
                }
                WashiTapeGenerator.updatePreview();
            });
            
            // Pattern select change
            this.patternSelect.on('change', function() {
                const pattern = $(this).val();
                $('#line-options').toggle(['horizontal-lines', 'vertical-lines', 'grid', 'random-lines'].includes(pattern));
                $('#dot-options').toggle(pattern === 'dots');
                $('#pattern-spacing-group').toggle(pattern !== 'solid');
                $('#pattern-randomness-control').toggle(pattern === 'random-lines');
                WashiTapeGenerator.updatePreview();
            });
            
            // Range slider value display
            $('#roughness').on('input', function() {
                $('#roughness-value').text($(this).val() + '%');
            });
            
            $('#segments').on('input', function() {
                $('#segments-value').text($(this).val());
            });
            
            $('#opacity').on('input', function() {
                $('#opacity-value').text($(this).val() + '%');
            });
            
            $('#pattern-opacity').on('input', function() {
                $('#pattern-opacity-value').text($(this).val() + '%');
            });
            
            $('#pattern-randomness').on('input', function() {
                $('#pattern-randomness-value').text($(this).val() + '%');
            });
            
            $('#image-opacity').on('input', function() {
                $('#image-opacity-value').text($(this).val() + '%');
            });
        },

        initMediaUploader: function() {
            let mediaUploader;
            
            $('#image-upload-btn').on('click', function(e) {
                e.preventDefault();
                
                // If the uploader object has already been created, reopen the dialog
                if (mediaUploader) {
                    mediaUploader.open();
                    return;
                }
                
                // Create the media uploader
                mediaUploader = wp.media({
                    title: 'Select Image for Washi Tape',
                    button: {
                        text: 'Use this image'
                    },
                    multiple: false
                });
                
                // When an image is selected, run a callback
                mediaUploader.on('select', function() {
                    const attachment = mediaUploader.state().get('selection').first().toJSON();
                    $('#image-url').val(attachment.url);
                    $('#image-preview').html('<img src="' + attachment.url + '" style="max-width: 100%; max-height: 100px;">');
                    
                    // Convert image to base64 for SVG embedding
                    WashiTapeGenerator.convertImageToBase64(attachment.url);
                });
                
                // Open the uploader dialog
                mediaUploader.open();
            });
        },

        convertImageToBase64: function(imageUrl) {
            const img = new Image();
            img.crossOrigin = 'Anonymous';
            img.onload = function() {
                const canvas = document.createElement('canvas');
                canvas.width = img.width;
                canvas.height = img.height;
                
                const ctx = canvas.getContext('2d');
                ctx.drawImage(img, 0, 0);
                
                const dataURL = canvas.toDataURL('image/png');
                WashiTapeGenerator.currentImageData = dataURL;
                WashiTapeGenerator.updatePreview();
            };
            
            img.onerror = function() {
                console.error('Error loading image');
                WashiTapeGenerator.currentImageData = null;
            };
            
            img.src = imageUrl;
        },

        generateTornEdgePath: function(width, height) {
            // Generate a random torn edge path with torn left and right edges only
            const segments = parseInt($('#segments').val()) || 10;
            const segmentHeight = height / segments;
            const roughnessPercent = parseInt($('#roughness').val()) || 10;
            const roughnessLeft = width * (roughnessPercent / 100); // Roughness of the left torn edge
            const roughnessRight = width * (roughnessPercent / 100); // Roughness of the right torn edge
            
            // Start at top-left
            let path = `M0,0 `;
            
            // Top edge (straight)
            path += `L${width},0 `;
            
            // Right edge with random variations
            for (let i = 1; i < segments; i++) {
                const y = i * segmentHeight;
                const x = width - (Math.random() * roughnessRight);
                path += `L${x},${y} `;
            }
            path += `L${width},${height} `;
            
            // Bottom edge (straight)
            path += `L0,${height} `;
            
            // Left edge with random variations
            for (let i = segments - 1; i > 0; i--) {
                const y = i * segmentHeight;
                const x = (Math.random() * roughnessLeft);
                path += `L${x},${y} `;
            }
            
            // Close the path
            path += 'Z';
            
            return path;
        },

        createSvgPattern: function(patternType) {
            // Remove existing defs
            const existingDefs = this.washiSvg.querySelector('defs');
            if (existingDefs) {
                this.washiSvg.removeChild(existingDefs);
            }
            
            // Create new defs
            this.svgDefs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');
            const patternId = 'pattern-' + Date.now();
            const pattern = document.createElementNS('http://www.w3.org/2000/svg', 'pattern');
            
            const spacing = parseInt(this.patternSpacingInput.val()) || 10;
            const patternSize = spacing;
            
            pattern.setAttribute('id', patternId);
            pattern.setAttribute('patternUnits', 'userSpaceOnUse');
            pattern.setAttribute('width', patternSize);
            pattern.setAttribute('height', patternSize);
            
            if (patternType === 'horizontal-lines') {
                const lineThickness = parseInt(this.lineThicknessInput.val()) || 1;
                const lineColor = this.lineColorInput.val();
                
                const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                line.setAttribute('x1', '0');
                line.setAttribute('y1', patternSize / 2);
                line.setAttribute('x2', patternSize);
                line.setAttribute('y2', patternSize / 2);
                line.setAttribute('stroke', lineColor);
                line.setAttribute('stroke-width', lineThickness);
                
                pattern.appendChild(line);
            } 
            else if (patternType === 'vertical-lines') {
                const lineThickness = parseInt(this.lineThicknessInput.val()) || 1;
                const lineColor = this.lineColorInput.val();
                
                const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                line.setAttribute('x1', patternSize / 2);
                line.setAttribute('y1', '0');
                line.setAttribute('x2', patternSize / 2);
                line.setAttribute('y2', patternSize);
                line.setAttribute('stroke', lineColor);
                line.setAttribute('stroke-width', lineThickness);
                
                pattern.appendChild(line);
            } 
            else if (patternType === 'grid') {
                const lineThickness = parseInt(this.lineThicknessInput.val()) || 1;
                const lineColor = this.lineColorInput.val();
                
                // Horizontal line
                const hLine = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                hLine.setAttribute('x1', '0');
                hLine.setAttribute('y1', patternSize / 2);
                hLine.setAttribute('x2', patternSize);
                hLine.setAttribute('y2', patternSize / 2);
                hLine.setAttribute('stroke', lineColor);
                hLine.setAttribute('stroke-width', lineThickness);
                
                // Vertical line
                const vLine = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                vLine.setAttribute('x1', patternSize / 2);
                vLine.setAttribute('y1', '0');
                vLine.setAttribute('x2', patternSize / 2);
                vLine.setAttribute('y2', patternSize);
                vLine.setAttribute('stroke', lineColor);
                vLine.setAttribute('stroke-width', lineThickness);
                
                pattern.appendChild(hLine);
                pattern.appendChild(vLine);
            }
            else if (patternType === 'random-lines') {
                const lineThickness = parseInt(this.lineThicknessInput.val()) || 1;
                const lineColor = this.lineColorInput.val();
                const randomness = parseInt(this.patternRandomnessInput.val()) || 0;
                
                // Add multiple random lines
                for (let i = 0; i < 4; i++) {
                    const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                    
                    if (Math.random() > 0.5) {
                        // Horizontal-ish line
                        const y = Math.random() * patternSize;
                        const deviation = (randomness / 100) * patternSize;
                        
                        line.setAttribute('x1', '0');
                        line.setAttribute('y1', y);
                        line.setAttribute('x2', patternSize);
                        line.setAttribute('y2', y + (Math.random() * deviation * 2 - deviation));
                    } else {
                        // Vertical-ish line
                        const x = Math.random() * patternSize;
                        const deviation = (randomness / 100) * patternSize;
                        
                        line.setAttribute('x1', x);
                        line.setAttribute('y1', '0');
                        line.setAttribute('x2', x + (Math.random() * deviation * 2 - deviation));
                        line.setAttribute('y2', patternSize);
                    }
                    
                    line.setAttribute('stroke', lineColor);
                    line.setAttribute('stroke-width', lineThickness);
                    pattern.appendChild(line);
                }
            }
            else if (patternType === 'dots') {
                const dotDiameter = parseInt(this.dotDiameterInput.val()) || 5;
                const dotColor = this.dotColorInput.val();
                
                const dot = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
                dot.setAttribute('cx', patternSize / 2);
                dot.setAttribute('cy', patternSize / 2);
                dot.setAttribute('r', dotDiameter / 2);
                dot.setAttribute('fill', dotColor);
                
                pattern.appendChild(dot);
            }
            
            this.svgDefs.appendChild(pattern);
            this.washiSvg.appendChild(this.svgDefs);
            
            return `url(#${patternId})`;
        },

        updatePreview: function() {
            // Get values from form
            const color = this.colorInput.val();
            const patternType = this.patternSelect.val();
            const tornEdges = this.tornEdgesCheckbox.prop('checked');
            const width = parseInt(this.widthInput.val()) || 180;
            const height = parseInt(this.heightInput.val()) || 45;
            const position = this.positionSelect.val();
            const rotation = parseInt(this.rotationInput.val()) || 0;
            const useImageOverlay = this.useImageOverlayCheckbox.prop('checked');
            const imageOpacity = parseInt(this.imageOpacityInput.val()) / 100 || 0.5;
            
            // Clear existing SVG content
            while (this.washiSvg.firstChild) {
                this.washiSvg.removeChild(this.washiSvg.firstChild);
            }
            
            // Set SVG dimensions
            this.washiSvg.setAttribute('width', width);
            this.washiSvg.setAttribute('height', height);
            
            // Create pattern if needed
            let fill = color;
            let patternFill = null;
            
            if (patternType !== 'solid') {
                patternFill = this.createSvgPattern(patternType);
            }
            
            // Create the tape shape
            const tapePath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
            
            // Set path data based on torn edges setting
            if (tornEdges) {
                tapePath.setAttribute('d', this.generateTornEdgePath(width, height));
            } else {
                tapePath.setAttribute('d', `M0,0 L${width},0 L${width},${height} L0,${height} Z`);
            }
            
            // Apply fill color with opacity
            const baseOpacity = parseInt($('#opacity').val()) / 100 || 1;
            tapePath.setAttribute('fill', fill);
            tapePath.setAttribute('fill-opacity', baseOpacity);
            
            // Add the path to the SVG
            this.washiSvg.appendChild(tapePath);
            
            // Add pattern overlay if selected
            if (patternFill) {
                const patternOpacity = parseInt($('#pattern-opacity').val()) / 100 || 1;
                const patternOverlay = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                patternOverlay.setAttribute('d', tapePath.getAttribute('d'));
                patternOverlay.setAttribute('fill', patternFill);
                patternOverlay.setAttribute('fill-opacity', patternOpacity);
                this.washiSvg.appendChild(patternOverlay);
            }
            
            // Add image overlay if enabled
            if (useImageOverlay && this.currentImageData) {
                // Create clipPath for the image
                const clipPath = document.createElementNS('http://www.w3.org/2000/svg', 'clipPath');
                const clipPathId = 'clip-' + Date.now();
                clipPath.setAttribute('id', clipPathId);
                
                // Clone the tape path for clipping
                const clipPathShape = tapePath.cloneNode(true);
                clipPath.appendChild(clipPathShape);
                
                // Add clipPath to defs
                if (!this.svgDefs) {
                    this.svgDefs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');
                }
                this.svgDefs.appendChild(clipPath);
                this.washiSvg.appendChild(this.svgDefs);

                const imageSize = $('#image-size').val();
                if (imageSize === 'repeat' || imageSize === 'repeat-x' || imageSize === 'repeat-y') {
                    // For repeating patterns, create a pattern element
                    const pattern = document.createElementNS('http://www.w3.org/2000/svg', 'pattern');
                    const patternId = 'pattern-' + Date.now();
                    pattern.setAttribute('id', patternId);
                    pattern.setAttribute('patternUnits', 'userSpaceOnUse');
                    
                    // Load the image to get its dimensions
                    const tempImg = new Image();
                    tempImg.src = this.currentImageData;
                    tempImg.onload = () => {
                        const imgWidth = tempImg.width;
                        const imgHeight = tempImg.height;
                        
                        // Set pattern size based on repeat type
                        if (imageSize === 'repeat' || imageSize === 'repeat-x') {
                            pattern.setAttribute('width', imgWidth);
                        } else {
                            pattern.setAttribute('width', width);
                        }
                        if (imageSize === 'repeat' || imageSize === 'repeat-y') {
                            pattern.setAttribute('height', imgHeight);
                        } else {
                            pattern.setAttribute('height', height);
                        }
                        
                        // Add image to pattern
                        const patternImage = document.createElementNS('http://www.w3.org/2000/svg', 'image');
                        patternImage.setAttribute('href', this.currentImageData);
                        patternImage.setAttribute('width', imgWidth);
                        patternImage.setAttribute('height', imgHeight);
                        pattern.appendChild(patternImage);
                        
                        // Add pattern to defs
                        this.svgDefs.appendChild(pattern);
                        
                        // Create rect with pattern fill
                        const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
                        rect.setAttribute('width', width);
                        rect.setAttribute('height', height);
                        rect.setAttribute('fill', `url(#${patternId})`);
                        rect.setAttribute('clip-path', `url(#${clipPathId})`);
                        rect.setAttribute('opacity', imageOpacity);
                        this.washiSvg.appendChild(rect);
                    };
                } else {
                    // For cover/contain, use regular image
                    const image = document.createElementNS('http://www.w3.org/2000/svg', 'image');
                    image.setAttribute('href', this.currentImageData);
                    image.setAttribute('width', width);
                    image.setAttribute('height', height);
                    image.setAttribute('preserveAspectRatio', 
                        imageSize === 'cover' ? 'xMidYMid slice' : 'xMidYMid meet');
                    image.setAttribute('clip-path', `url(#${clipPathId})`);
                    image.setAttribute('opacity', imageOpacity);
                    this.washiSvg.appendChild(image);
                }
            }
            
            // Position the SVG in the preview
            const previewContainer = document.querySelector('.preview-container');
            const contentBox = document.querySelector('.content-box');
            
            // Add these lines to ensure the SVG is visible
            this.washiSvg.style.position = 'absolute';
            this.washiSvg.style.display = 'block';
            
            // Reset transform
            this.washiSvg.style.transform = '';
            
            if (position === 'left') {
                this.washiSvg.style.left = '-20px';
                this.washiSvg.style.top = '30px';
                this.washiSvg.style.transform = `rotate(${rotation - 10}deg)`;
            } else if (position === 'right') {
                this.washiSvg.style.right = '-20px';
                this.washiSvg.style.left = 'auto';
                this.washiSvg.style.top = '30px';
                this.washiSvg.style.transform = `rotate(${rotation + 10}deg)`;
            } else if (position === 'top') {
                this.washiSvg.style.left = '50%';
                this.washiSvg.style.top = '-20px';
                this.washiSvg.style.transform = `translateX(-50%) rotate(${rotation}deg)`;
            } else if (position === 'bottom') {
                this.washiSvg.style.left = '50%';
                this.washiSvg.style.bottom = '-20px';
                this.washiSvg.style.top = 'auto';
                this.washiSvg.style.transform = `translateX(-50%) rotate(${rotation}deg)`;
            }
        },

        resetForm: function() {
            // Reset form to default values
            $('#tape-title').val('');
            $('#tape-id').val('0');
            this.colorInput.val('#8a5cf7');
            this.patternSelect.val('vertical-lines').trigger('change');
            this.tornEdgesCheckbox.prop('checked', true);
            this.widthInput.val('180');
            this.heightInput.val('45');
            this.positionSelect.val('left');
            this.rotationInput.val('0');
            this.patternSpacingInput.val('10');
            this.lineThicknessInput.val('1');
            this.lineColorInput.val('#000000');
            this.dotDiameterInput.val('5');
            this.dotColorInput.val('#ffffff');
            this.patternRandomnessInput.val('0');
            $('#pattern-randomness-value').text('0%');
            this.useImageOverlayCheckbox.prop('checked', false).trigger('change');
            this.imageUrlInput.val('');
            this.imageOpacityInput.val('50');
            $('#image-opacity-value').text('50%');
            $('#image-preview').html('');
            this.currentImageData = null;
            
            // Reset range slider value displays
            $('#roughness').val('10');
            $('#roughness-value').text('10%');
            $('#segments').val('10');
            $('#segments-value').text('10');
            $('#opacity').val('100');
            $('#opacity-value').text('100%');
            $('#pattern-opacity').val('100');
            $('#pattern-opacity-value').text('100%');
            
            // Update preview
            this.updatePreview();
        },

        saveWashiTape: function() {
            // Get form values
            const title = $('#tape-title').val();
            const id = $('#tape-id').val();
            
            if (!title) {
                alert('Please enter a name for your washi tape.');
                return;
            }
            
            // Get SVG code and clean it up
            let svgCode = this.washiSvg.outerHTML;
            // Remove any escaped quotes and normalize the SVG
            svgCode = svgCode
                .replace(/&quot;/g, '"')
                .replace(/\\&quot;/g, '"')
                .replace(/\s+/g, ' ')
                .replace(/"\s+/g, '"')
                .replace(/\s+"/g, '"')
                .replace(/" >/g, '">')
                .replace(/> </g, '><')
                .replace(/\\"pattern-/g, 'pattern-')
                .replace(/\\"patternUnits=/g, 'patternUnits=')
                .replace(/\\"userSpaceOnUse\\"/g, 'userSpaceOnUse')
                .replace(/\\"width=/g, 'width=')
                .replace(/\\"height=/g, 'height=')
                .replace(/\\"(\d+)\\"/g, '"$1"')
                .replace(/absolute;=/g, '')
                .replace(/display:=/g, '')
                .replace(/left:=/g, '')
                .replace(/top:=/g, '')
                .replace(/transform:=/g, '')
                .replace(/rotate\(-10deg\);\\"/g, '')
                .replace(/\s+style="[^"]*"/g, '');
            
            // Ensure proper xmlns attribute
            if (!svgCode.includes('xmlns="http://www.w3.org/2000/svg"')) {
                svgCode = svgCode.replace('<svg', '<svg xmlns="http://www.w3.org/2000/svg"');
            }
            
            // Get all settings
            const settings = {
                color: this.colorInput.val(),
                pattern: this.patternSelect.val(),
                tornEdges: this.tornEdgesCheckbox.prop('checked'),
                width: this.widthInput.val(),
                height: this.heightInput.val(),
                position: this.positionSelect.val(),
                rotation: this.rotationInput.val(),
                patternSpacing: this.patternSpacingInput.val(),
                lineThickness: this.lineThicknessInput.val(),
                lineColor: this.lineColorInput.val(),
                dotDiameter: this.dotDiameterInput.val(),
                dotColor: this.dotColorInput.val(),
                patternRandomness: this.patternRandomnessInput.val(),
                roughness: $('#roughness').val(),
                segments: $('#segments').val(),
                opacity: $('#opacity').val(),
                patternOpacity: $('#pattern-opacity').val(),
                useImageOverlay: this.useImageOverlayCheckbox.prop('checked'),
                imageUrl: this.imageUrlInput.val(),
                imageOpacity: this.imageOpacityInput.val(),
                imageData: this.currentImageData,
                imageSize: $('#image-size').val()
            };
            
            // Save the washi tape
            $.ajax({
                url: washiTapeParams.ajaxUrl,
                type: 'POST',
                data: {
                    action: 'save_washi_tape',
                    nonce: washiTapeParams.nonce,
                    id: id,
                    title: title,
                    svg: svgCode,
                    settings: JSON.stringify(settings)
                },
                success: function(response) {
                    if (response.success) {
                        // After successful save, reload the saved tapes
                        WashiTapeGenerator.loadSavedWashiTapes();
                        
                        // Reset the form if this was a new tape
                        if (id === '0') {
                            WashiTapeGenerator.resetForm();
                        }
                        
                        alert('Washi tape saved successfully!');
                    } else {
                        alert('Error saving washi tape.');
                    }
                },
                error: function() {
                    alert('Error saving washi tape.');
                }
            });
        },

        loadSavedWashiTapes: function() {
            $.ajax({
                url: washiTapeParams.ajaxUrl,
                type: 'POST',
                data: {
                    action: 'get_washi_tapes',
                    nonce: washiTapeParams.nonce
                },
                beforeSend: function() {
                    WashiTapeGenerator.savedWashiTapesContainer.html('<div class="loading-indicator">Loading...</div>');
                },
                success: function(response) {
                    if (response.success && response.data.washi_tapes) {
                        if (response.data.washi_tapes.length === 0) {
                            WashiTapeGenerator.savedWashiTapesContainer.html('<p>No saved washi tapes yet.</p>');
                            return;
                        }
                        
                        let html = '<div class="washi-tape-grid">';
                        
                        response.data.washi_tapes.forEach(function(tape) {
                            // Clean up the SVG before inserting
                            const cleanSvg = tape.svg
                                .replace(/&quot;/g, '"')
                                .replace(/\\&quot;/g, '"')
                                .replace(/\s+/g, ' ')
                                .replace(/"\s+/g, '"')
                                .replace(/\s+"/g, '"')
                                .replace(/" >/g, '">')
                                .replace(/> </g, '><')
                                .replace(/absolute;/g, '')
                                .replace(/display:/g, '')
                                .replace(/left:/g, '')
                                .replace(/top:/g, '')
                                .replace(/transform:/g, '')
                                .replace(/rotate\(-10deg\);/g, '')
                                .replace(/style="[^"]*"/g, '')
                                .replace(/\\"(\d+)\\"/g, '"$1"')
                                .replace(/\\"([^"]+)\\"/g, '"$1"');
                                
                            html += '<div class="washi-tape-item" data-id="' + tape.id + '" data-settings="' + encodeURIComponent(tape.settings) + '">';
                            html += '<div class="washi-tape-preview">';
                            html += '<div class="preview-background">';
                            html += cleanSvg;
                            html += '</div>';
                            html += '</div>';
                            html += '<div class="washi-tape-details">';
                            html += '<h3>' + tape.title + '</h3>';
                            html += '<div class="washi-tape-actions">';
                            html += '<button type="button" class="button edit-washi-tape">Edit</button>';
                            html += '<button type="button" class="button button-link-delete delete-washi-tape">Delete</button>';
                            html += '</div>';
                            html += '</div>';
                            html += '</div>';
                        });
                        
                        html += '</div>';
                        
                        WashiTapeGenerator.savedWashiTapesContainer.html(html);
                        
                        // Add event listeners
                        $('.edit-washi-tape').on('click', WashiTapeGenerator.editWashiTape);
                        $('.delete-washi-tape').on('click', WashiTapeGenerator.deleteWashiTape);
                    } else {
                        WashiTapeGenerator.savedWashiTapesContainer.html('<p>Error loading washi tapes.</p>');
                    }
                },
                error: function() {
                    WashiTapeGenerator.savedWashiTapesContainer.html('<p>Error loading washi tapes.</p>');
                }
            });
        },

        editWashiTape: function() {
            const item = $(this).closest('.washi-tape-item');
            const id = item.data('id');
            const settingsJson = decodeURIComponent(item.data('settings'));
            const settings = JSON.parse(settingsJson);
            
            // Fill the form with the settings
            $('#tape-id').val(id);
            $('#tape-title').val(item.find('h3').text());
            
            // Set all form values
            WashiTapeGenerator.colorInput.val(settings.color);
            WashiTapeGenerator.patternSelect.val(settings.pattern).trigger('change');
            WashiTapeGenerator.tornEdgesCheckbox.prop('checked', settings.tornEdges);
            WashiTapeGenerator.widthInput.val(settings.width);
            WashiTapeGenerator.heightInput.val(settings.height);
            WashiTapeGenerator.positionSelect.val(settings.position);
            WashiTapeGenerator.rotationInput.val(settings.rotation);
            WashiTapeGenerator.patternSpacingInput.val(settings.patternSpacing);
            WashiTapeGenerator.lineThicknessInput.val(settings.lineThickness);
            WashiTapeGenerator.lineColorInput.val(settings.lineColor);
            WashiTapeGenerator.dotDiameterInput.val(settings.dotDiameter);
            WashiTapeGenerator.dotColorInput.val(settings.dotColor);
            WashiTapeGenerator.patternRandomnessInput.val(settings.patternRandomness || 0);
            $('#pattern-randomness-value').text((settings.patternRandomness || 0) + '%');
            $('#roughness').val(settings.roughness);
            $('#roughness-value').text(settings.roughness + '%');
            $('#segments').val(settings.segments);
            $('#segments-value').text(settings.segments);
            $('#opacity').val(settings.opacity);
            $('#opacity-value').text(settings.opacity + '%');
            $('#pattern-opacity').val(settings.patternOpacity);
            $('#pattern-opacity-value').text(settings.patternOpacity + '%');
            
            // Handle image overlay
            WashiTapeGenerator.useImageOverlayCheckbox.prop('checked', settings.useImageOverlay).trigger('change');
            if (settings.useImageOverlay && settings.imageUrl) {
                WashiTapeGenerator.imageUrlInput.val(settings.imageUrl);
                WashiTapeGenerator.imageOpacityInput.val(settings.imageOpacity);
                $('#image-opacity-value').text(settings.imageOpacity + '%');
                $('#image-size').val(settings.imageSize || 'cover');
                
                if (settings.imageData) {
                    WashiTapeGenerator.currentImageData = settings.imageData;
                    $('#image-preview').html('<img src="' + settings.imageData + '" style="max-width: 100%; max-height: 100px;">');
                } else if (settings.imageUrl) {
                    $('#image-preview').html('<img src="' + settings.imageUrl + '" style="max-width: 100%; max-height: 100px;">');
                    WashiTapeGenerator.convertImageToBase64(settings.imageUrl);
                }
            }
            
            // Scroll to top of form
            $('html, body').animate({
                scrollTop: $('.generator-panel').offset().top - 50
            }, 500);
            
            // Update preview
            WashiTapeGenerator.updatePreview();
        },

        deleteWashiTape: function() {
            if (!confirm('Are you sure you want to delete this washi tape?')) {
                return;
            }
            
            const item = $(this).closest('.washi-tape-item');
            const id = item.data('id');
            
            $.ajax({
                url: washiTapeParams.ajaxUrl,
                type: 'POST',
                data: {
                    action: 'delete_washi_tape',
                    nonce: washiTapeParams.nonce,
                    id: id
                },
                success: function(response) {
                    if (response.success) {
                        alert(response.data.message);
                        // Reload saved washi tapes
                        WashiTapeGenerator.loadSavedWashiTapes();
                    } else {
                        alert(response.data.message);
                    }
                },
                error: function() {
                    alert('An error occurred while deleting the washi tape.');
                }
            });
        }
    };

    // Initialize on document ready
    $(document).ready(function() {
        WashiTapeGenerator.init();
    });

})(jQuery);

================
File: assets/js/elementor-editor.js
================
/**
 * Washi Tape Generator - Elementor Editor Integration
 * This script handles the integration with Elementor editor
 */
(function($) {
    'use strict';

    // Track editor state
    let isEditorInitialized = false;
    let editorWashiTapes = {};

    /**
     * Initialize Washi Tape in Elementor editor
     */
    function initWashiTapeEditor() {
        if (isEditorInitialized) {
            return;
        }
        
        isEditorInitialized = true;
        
        // Create container for washi tapes if not exists
        if ($('#elementor-washi-tapes-container').length === 0) {
            $('body').append('<div id="elementor-washi-tapes-container" style="display:none;"></div>');
        }

        // Listen for panel changes
        elementor.channels.editor.on('section:activated', handleSectionActivated);
        
        // Listen for element settings changes
        elementor.channels.editor.on('change', handleSettingsChanged);
        
        // Listen for preview related events
        elementor.settings.page.model.on('change', handlePageSettingsChange);
        
        // Add custom CSS class to the editor
        $('body').addClass('washi-tape-editor-active');
        
        console.log('Washi Tape Generator: Elementor editor integration initialized');
        
        // Scan for existing washi tapes
        scanExistingWashiTapes();
    }

    /**
     * Handle section activated in panel
     */
    function handleSectionActivated(sectionName, editor) {
        if (sectionName === 'section_washi_tape_controls') {
            const model = editor.getOption('editedElementView').getContainer().model;
            const settings = model.get('settings').attributes;
            
            // If washi tape is enabled, refresh it
            if (settings.enable_washi_tape === 'yes' && settings.washi_tape_id !== '0') {
                refreshWashiTape(model.get('id'), settings);
            }
        }
    }

    /**
     * Handle settings changed in panel
     */
    function handleSettingsChanged(view) {
        const settingsModel = view.container.settings;
        const settings = settingsModel.attributes;
        const elementId = view.container.model.get('id');
        
        // Check if this change affects washi tape settings
        if (settings.hasOwnProperty('enable_washi_tape') || 
            settings.hasOwnProperty('washi_tape_id') || 
            settings.hasOwnProperty('washi_tape_position') || 
            settings.hasOwnProperty('washi_tape_rotation') || 
            settings.hasOwnProperty('washi_tape_z_index')) {
            
            // If washi tape is enabled and has an ID
            if (settings.enable_washi_tape === 'yes' && settings.washi_tape_id !== '0') {
                refreshWashiTape(elementId, settings);
            } else {
                // Remove washi tape
                removeWashiTape(elementId);
            }
        }
    }

    /**
     * Handle page settings change
     */
    function handlePageSettingsChange() {
        // This is a good place to handle global settings that might affect all washi tapes
        // For now, we'll just log that settings changed
        console.log('Page settings changed - Washi Tape Generator is aware');
    }

    /**
     * Scan for existing washi tapes in the editor
     */
    function scanExistingWashiTapes() {
        // Get all elements with washi tape
        elementor.getPreviewView().$el.find('.has-washi-tape').each(function() {
            const $element = $(this);
            const elementId = $element.data('model-cid');
            
            if (elementId) {
                const container = elementor.getContainer(elementId);
                if (container) {
                    const settings = container.settings.attributes;
                    if (settings.enable_washi_tape === 'yes' && settings.washi_tape_id !== '0') {
                        refreshWashiTape(elementId, settings);
                    }
                }
            }
        });
    }

    /**
     * Refresh a washi tape on an element
     */
    function refreshWashiTape(elementId, settings) {
        // Get the element in preview
        const $element = elementor.getPreviewView().$el.find(`[data-model-cid="${elementId}"]`);
        
        if (!$element.length) {
            return;
        }
        
        // Mark the element
        $element.addClass('has-washi-tape');
        $element.attr('data-washi-tape-id', `washi-tape-${settings.washi_tape_id}`);
        $element.attr('data-washi-tape-position', settings.washi_tape_position || 'top-left');
        
        // Check if we already have this washi tape loaded
        if (editorWashiTapes[settings.washi_tape_id]) {
            insertWashiTape($element, settings);
        } else {
            // Fetch the washi tape
            loadWashiTape(settings.washi_tape_id, function() {
                insertWashiTape($element, settings);
            });
        }
    }

    /**
     * Load a washi tape from the server
     */
    function loadWashiTape(tapeId, callback) {
        $.ajax({
            url: ajaxurl,
            type: 'POST',
            data: {
                action: 'get_washi_tape_svg',
                nonce: washiTapePreviewParams.nonce,
                id: tapeId
            },
            success: function(response) {
                if (response.success && response.data.svg) {
                    // Store in our cache
                    editorWashiTapes[tapeId] = response.data.svg;
                    
                    // Make sure we have the container
                    let $container = $('#elementor-washi-tapes-container');
                    if (!$container.length) {
                        $container = $('<div id="elementor-washi-tapes-container" style="display:none;"></div>');
                        $('body').append($container);
                    }
                    
                    // Add or update the SVG in the container
                    const tapeElementId = `washi-tape-${tapeId}`;
                    let $tapeElement = $(`#${tapeElementId}`);
                    
                    if ($tapeElement.length) {
                        $tapeElement.html(response.data.svg);
                    } else {
                        $container.append(`<div id="${tapeElementId}" class="elementor-washi-tape">${response.data.svg}</div>`);
                    }
                    
                    if (typeof callback === 'function') {
                        callback();
                    }
                } else {
                    console.error('Failed to load washi tape:', response);
                }
            },
            error: function(xhr, status, error) {
                console.error('Failed to load washi tape:', error);
            }
        });
    }

    /**
     * Insert a washi tape onto an element
     */
    function insertWashiTape($element, settings) {
        // Remove any existing washi tape first
        $element.find('.elementor-washi-tape').remove();
        
        // Get the tape from our container
        const $sourceTape = $(`#washi-tape-${settings.washi_tape_id}`);
        
        if (!$sourceTape.length) {
            console.error('Washi tape not found:', settings.washi_tape_id);
            return;
        }
        
        // Clone the tape
        const $tapeCopy = $sourceTape.clone();
        $tapeCopy.removeAttr('id');
        
        // Position the tape
        positionTape($tapeCopy, settings);
        
        // Add to the element
        $element.append($tapeCopy);
        
        // Make sure element is positioned relatively
        if ($element.css('position') === 'static') {
            $element.css('position', 'relative');
        }
    }

    /**
     * Position a tape based on settings
     */
    function positionTape($tape, settings) {
        // Make tape visible
        $tape.css({
            'display': 'block',
            'position': 'absolute',
            'z-index': settings.washi_tape_z_index || 1
        });
        
        // Set position
        const position = settings.washi_tape_position || 'top-left';
        
        // Reset all positions first
        $tape.css({
            'top': '',
            'right': '',
            'bottom': '',
            'left': ''
        });
        
        if (position === 'top-left') {
            $tape.css({
                'top': '-20px',
                'left': '-20px'
            });
        } else if (position === 'top-right') {
            $tape.css({
                'top': '-20px',
                'right': '-20px'
            });
        } else if (position === 'bottom-left') {
            $tape.css({
                'bottom': '-20px',
                'left': '-20px'
            });
        } else if (position === 'bottom-right') {
            $tape.css({
                'bottom': '-20px',
                'right': '-20px'
            });
        }
        
        // Apply rotation if set
        if (settings.washi_tape_rotation) {
            const degrees = settings.washi_tape_rotation.size || 0;
            $tape.css('transform', `rotate(${degrees}deg)`);
        }
    }

    /**
     * Remove a washi tape from an element
     */
    function removeWashiTape(elementId) {
        const $element = elementor.getPreviewView().$el.find(`[data-model-cid="${elementId}"]`);
        
        if (!$element.length) {
            return;
        }
        
        $element.removeClass('has-washi-tape');
        $element.removeAttr('data-washi-tape-id');
        $element.removeAttr('data-washi-tape-position');
        $element.find('.elementor-washi-tape').remove();
    }

    // Initialize when Elementor is ready
    $(window).on('elementor/frontend/init', function() {
        elementor.on('preview:loaded', initWashiTapeEditor);
    });

})(jQuery);

================
File: assets/js/frontend-script.js
================
/**
 * Washi Tape Generator Frontend Script
 */
(function() {
    'use strict';

    /**
     * Initialize the washi tape positioning
     */
    function initWashiTapes() {
        const elements = document.querySelectorAll('.has-washi-tape');
        
        elements.forEach(function(element) {
            positionWashiTape(element);
        });
    }

    /**
     * Position a washi tape on an element
     */
    function positionWashiTape(element) {
        const tapeId = element.getAttribute('data-washi-tape-id');
        const tapePosition = element.getAttribute('data-washi-tape-position');
        const tapeElement = document.getElementById(tapeId);
        
        if (!tapeElement) return;
        
        // Clone the tape element
        const tapeClone = tapeElement.cloneNode(true);
        tapeClone.removeAttribute('id');
        tapeClone.style.display = 'block';
        
        // Remove any existing tape from this element
        const existingTape = element.querySelector('.elementor-washi-tape');
        if (existingTape) {
            element.removeChild(existingTape);
        }
        
        // Add the tape to the element
        element.appendChild(tapeClone);
    }

    /**
     * Initialize on DOM ready
     */
    function ready(fn) {
        if (document.readyState !== 'loading') {
            fn();
        } else {
            document.addEventListener('DOMContentLoaded', fn);
        }
    }

    ready(function() {
        initWashiTapes();
        
        // For Elementor editor
        if (typeof window.elementorFrontend !== 'undefined') {
            window.elementorFrontend.hooks.addAction('frontend/element_ready/global', function(scope) {
                const element = scope.closest('.has-washi-tape');
                if (element) {
                    positionWashiTape(element);
                }
            });
        }
    });

})();

================
File: assets/js/preview-script.js
================
/**
 * Washi Tape Generator Elementor Preview Script
 * This script is only loaded in the Elementor editor
 */
(function($) {
    'use strict';

    /**
     * Initialize the washi tape preview functionality
     */
    function initWashiTapePreview() {
        // Listen for changes to washi tape controls
        elementor.channels.editor.on('change', function(view) {
            const element = view.container.view.$el;
            const model = view.container.model;
            const settings = model.get('settings');
            
            // Check if washi tape is enabled
            if (settings.attributes.enable_washi_tape === 'yes' && settings.attributes.washi_tape_id !== '0') {
                updateWashiTape(element, settings.attributes);
            } else {
                removeWashiTape(element);
            }
        });
        
        // Handle section panel change
        elementor.channels.editor.on('section:activated', function(sectionName, editor) {
            if (sectionName === 'section_washi_tape_controls') {
                refreshWashiTapePreview(editor.model.cid);
            }
        });
    }
    
    /**
     * Update washi tape on an element
     */
    function updateWashiTape(element, settings) {
        // Add washi tape class and attributes
        element.addClass('has-washi-tape');
        element.attr('data-washi-tape-id', 'washi-tape-' + settings.washi_tape_id);
        element.attr('data-washi-tape-position', settings.washi_tape_position);
        
        // Create or update washi tape in editor
        createEditorWashiTape(settings.washi_tape_id, function(tapeElement) {
            if (!tapeElement) return;
            
            // Remove existing tape
            element.find('.elementor-washi-tape').remove();
            
            // Clone and add the new tape
            const tapeClone = $(tapeElement).clone();
            tapeClone.css({
                'display': 'block',
                'position': 'absolute',
                'z-index': settings.washi_tape_z_index || 1
            });
            
            // Position the tape
            positionTape(tapeClone, settings.washi_tape_position);
            
            // Apply rotation
            if (settings.washi_tape_rotation) {
                const degrees = settings.washi_tape_rotation.size || 0;
                tapeClone.css('transform', 'rotate(' + degrees + 'deg)');
            }
            
            element.append(tapeClone);
        });
    }
    
    /**
     * Position a tape based on position setting
     */
    function positionTape(tapeElement, position) {
        // Reset positioning
        tapeElement.css({
            'top': '',
            'right': '',
            'bottom': '',
            'left': ''
        });
        
        // Set position
        if (position === 'top-left') {
            tapeElement.css({
                'top': '-20px',
                'left': '-20px'
            });
        } else if (position === 'top-right') {
            tapeElement.css({
                'top': '-20px',
                'right': '-20px'
            });
        } else if (position === 'bottom-left') {
            tapeElement.css({
                'bottom': '-20px',
                'left': '-20px'
            });
        } else if (position === 'bottom-right') {
            tapeElement.css({
                'bottom': '-20px',
                'right': '-20px'
            });
        }
    }
    
    /**
     * Remove washi tape from an element
     */
    function removeWashiTape(element) {
        element.removeClass('has-washi-tape');
        element.removeAttr('data-washi-tape-id');
        element.removeAttr('data-washi-tape-position');
        element.find('.elementor-washi-tape').remove();
    }
    
    /**
     * Refresh washi tape preview when the section is activated
     */
    function refreshWashiTapePreview(cid) {
        const model = elementor.getContainer(cid).model;
        const settings = model.get('settings');
        const element = elementor.$preview.find('[data-model-cid="' + cid + '"]');
        
        if (settings.attributes.enable_washi_tape === 'yes' && settings.attributes.washi_tape_id !== '0') {
            updateWashiTape(element, settings.attributes);
        }
    }
    
    /**
     * Create a washi tape element in the editor
     */
    function createEditorWashiTape(tapeId, callback) {
        // Use AJAX to get the washi tape SVG
        $.ajax({
            url: ajaxurl,
            type: 'POST',
            data: {
                action: 'get_washi_tape_svg',
                nonce: washiTapePreviewParams.nonce,
                id: tapeId
            },
            success: function(response) {
                if (response.success && response.data.svg) {
                    // Create element
                    const tapeElement = $('<div class="elementor-washi-tape">' + response.data.svg + '</div>');
                    
                    // Add to hidden container if not exists
                    let container = $('#elementor-washi-tapes-container');
                    if (container.length === 0) {
                        container = $('<div id="elementor-washi-tapes-container" style="display:none;"></div>');
                        $('body').append(container);
                    }
                    
                    // Add with ID
                    const tapeId = 'washi-tape-' + response.data.id;
                    let existingTape = $('#' + tapeId);
                    if (existingTape.length) {
                        existingTape.replaceWith(tapeElement.attr('id', tapeId));
                    } else {
                        container.append(tapeElement.attr('id', tapeId));
                    }
                    
                    callback(tapeElement[0]);
                } else {
                    console.error('Error loading washi tape:', response);
                    callback(null);
                }
            },
            error: function() {
                console.error('Error loading washi tape');
                callback(null);
            }
        });
    }

    // Initialize when Elementor is ready
    $(window).on('elementor/frontend/init', function() {
        elementor.on('preview:loaded', initWashiTapePreview);
    });

})(jQuery);

================
File: includes/admin/views/admin-page.php
================
<?php
// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}
?>
<div class="wrap washi-tape-admin">
    <h1><?php echo esc_html__('Washi Tape Generator', 'washi-tape-generator'); ?></h1>

    <div class="washi-tape-admin-grid">
        <!-- Generator Panel -->
        <div class="washi-tape-panel generator-panel">
            <div class="panel-header">
                <h2><?php echo esc_html__('Create Washi Tape', 'washi-tape-generator'); ?></h2>
            </div>
            <div class="panel-body">
                <form id="washi-form">
                    <div class="form-section">
                        <div class="form-section-title"><?php echo esc_html__('Tape Name', 'washi-tape-generator'); ?></div>
                        <div class="form-control">
                            <input type="text" id="tape-title" class="regular-text" placeholder="<?php echo esc_attr__('Enter a name for your washi tape', 'washi-tape-generator'); ?>" required>
                            <input type="hidden" id="tape-id" value="0">
                        </div>
                    </div>

                    <div class="form-section">
                        <div class="form-section-title"><?php echo esc_html__('Appearance', 'washi-tape-generator'); ?></div>
                        <div class="form-group">
                            <div class="form-control">
                                <label for="color"><?php echo esc_html__('Base Color', 'washi-tape-generator'); ?></label>
                                <input type="color" id="color" value="#8a5cf7">
                            </div>
                            <div class="form-control">
                                <label for="opacity"><?php echo esc_html__('Base Opacity', 'washi-tape-generator'); ?></label>
                                <input type="range" id="opacity" min="0" max="100" value="100" class="range-slider">
                                <output for="opacity" id="opacity-value">100%</output>
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="form-control">
                                <label for="pattern"><?php echo esc_html__('Pattern', 'washi-tape-generator'); ?></label>
                                <select id="pattern">
                                    <option value="solid"><?php echo esc_html__('Solid', 'washi-tape-generator'); ?></option>
                                    <option value="horizontal-lines"><?php echo esc_html__('Horizontal Lines', 'washi-tape-generator'); ?></option>
                                    <option value="vertical-lines" selected><?php echo esc_html__('Vertical Lines', 'washi-tape-generator'); ?></option>
                                    <option value="grid"><?php echo esc_html__('Grid', 'washi-tape-generator'); ?></option>
                                    <option value="dots"><?php echo esc_html__('Dots', 'washi-tape-generator'); ?></option>
                                    <option value="random-lines"><?php echo esc_html__('Random Lines', 'washi-tape-generator'); ?></option>
                                </select>
                            </div>
                            <div class="form-control">
                                <label for="pattern-opacity"><?php echo esc_html__('Pattern Opacity', 'washi-tape-generator'); ?></label>
                                <input type="range" id="pattern-opacity" min="0" max="100" value="100" class="range-slider">
                                <output for="pattern-opacity" id="pattern-opacity-value">100%</output>
                            </div>
                        </div>

                        <div id="pattern-options">
                            <div class="form-group" id="pattern-spacing-group">
                                <div class="form-control">
                                    <label for="pattern-spacing"><?php echo esc_html__('Pattern Spacing (px)', 'washi-tape-generator'); ?></label>
                                    <input type="number" id="pattern-spacing" value="10" min="1">
                                </div>
                                <div class="form-control" id="pattern-randomness-control">
                                    <label for="pattern-randomness"><?php echo esc_html__('Pattern Randomness', 'washi-tape-generator'); ?></label>
                                    <input type="range" id="pattern-randomness" min="0" max="100" value="0" class="range-slider">
                                    <output for="pattern-randomness" id="pattern-randomness-value">0%</output>
                                </div>
                            </div>

                            <div class="form-group" id="line-options">
                                <div class="form-control">
                                    <label for="line-thickness"><?php echo esc_html__('Line Thickness (px)', 'washi-tape-generator'); ?></label>
                                    <input type="number" id="line-thickness" value="1" min="1">
                                </div>
                                <div class="form-control">
                                    <label for="line-color"><?php echo esc_html__('Line Color', 'washi-tape-generator'); ?></label>
                                    <input type="color" id="line-color" value="#000000">
                                </div>
                            </div>

                            <div class="form-group" id="dot-options" style="display: none;">
                                <div class="form-control">
                                    <label for="dot-diameter"><?php echo esc_html__('Dot Diameter (px)', 'washi-tape-generator'); ?></label>
                                    <input type="number" id="dot-diameter" value="5" min="1">
                                </div>
                                <div class="form-control">
                                    <label for="dot-color"><?php echo esc_html__('Dot Color', 'washi-tape-generator'); ?></label>
                                    <input type="color" id="dot-color" value="#ffffff">
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-section">
                        <div class="form-section-title"><?php echo esc_html__('Image Overlay', 'washi-tape-generator'); ?></div>
                        <div class="form-control">
                            <div class="toggle-container">
                                <label class="toggle">
                                    <input type="checkbox" id="use-image-overlay">
                                    <span class="toggle-slider"></span>
                                </label>
                                <span class="toggle-label"><?php echo esc_html__('Use Image Overlay', 'washi-tape-generator'); ?></span>
                            </div>
                        </div>

                        <div id="image-overlay-controls" style="display: none;">
                            <div class="form-control">
                                <label for="image-upload"><?php echo esc_html__('Upload Image', 'washi-tape-generator'); ?></label>
                                <div class="image-upload-container">
                                    <button type="button" id="image-upload-btn" class="button"><?php echo esc_html__('Select Image', 'washi-tape-generator'); ?></button>
                                    <div id="image-preview"></div>
                                    <input type="hidden" id="image-url" value="">
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="form-control">
                                    <label for="image-size"><?php echo esc_html__('Image Size', 'washi-tape-generator'); ?></label>
                                    <select id="image-size">
                                        <option value="cover"><?php echo esc_html__('Cover', 'washi-tape-generator'); ?></option>
                                        <option value="contain"><?php echo esc_html__('Contain', 'washi-tape-generator'); ?></option>
                                        <option value="repeat"><?php echo esc_html__('Repeat', 'washi-tape-generator'); ?></option>
                                        <option value="repeat-x"><?php echo esc_html__('Repeat X', 'washi-tape-generator'); ?></option>
                                        <option value="repeat-y"><?php echo esc_html__('Repeat Y', 'washi-tape-generator'); ?></option>
                                    </select>
                                </div>
                                <div class="form-control">
                                    <label for="image-opacity"><?php echo esc_html__('Image Opacity', 'washi-tape-generator'); ?></label>
                                    <input type="range" id="image-opacity" min="0" max="100" value="50" class="range-slider">
                                    <output for="image-opacity" id="image-opacity-value">50%</output>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-section">
                        <div class="form-section-title"><?php echo esc_html__('Size & Position', 'washi-tape-generator'); ?></div>
                        <div class="form-group">
                            <div class="form-control">
                                <label for="width"><?php echo esc_html__('Width (px)', 'washi-tape-generator'); ?></label>
                                <input type="number" id="width" value="180" min="50">
                            </div>
                            <div class="form-control">
                                <label for="height"><?php echo esc_html__('Height (px)', 'washi-tape-generator'); ?></label>
                                <input type="number" id="height" value="45" min="20">
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="form-control">
                                <label for="position"><?php echo esc_html__('Position', 'washi-tape-generator'); ?></label>
                                <select id="position">
                                    <option value="left"><?php echo esc_html__('Left', 'washi-tape-generator'); ?></option>
                                    <option value="right"><?php echo esc_html__('Right', 'washi-tape-generator'); ?></option>
                                    <option value="top"><?php echo esc_html__('Top', 'washi-tape-generator'); ?></option>
                                    <option value="bottom"><?php echo esc_html__('Bottom', 'washi-tape-generator'); ?></option>
                                </select>
                            </div>
                            <div class="form-control">
                                <label for="rotation"><?php echo esc_html__('Rotation (degrees)', 'washi-tape-generator'); ?></label>
                                <input type="number" id="rotation" value="0" step="1">
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="form-control">
                                <label for="roughness"><?php echo esc_html__('Edge Roughness', 'washi-tape-generator'); ?></label>
                                <input type="range" id="roughness" min="1" max="20" value="10" class="range-slider">
                                <output for="roughness" id="roughness-value">10%</output>
                            </div>
                            <div class="form-control">
                                <label for="segments"><?php echo esc_html__('Edge Segments', 'washi-tape-generator'); ?></label>
                                <input type="range" id="segments" min="5" max="20" value="10" class="range-slider">
                                <output for="segments" id="segments-value">10</output>
                            </div>
                        </div>

                        <div class="form-control">
                            <div class="toggle-container">
                                <label class="toggle">
                                    <input type="checkbox" id="torn-edges" checked>
                                    <span class="toggle-slider"></span>
                                </label>
                                <span class="toggle-label"><?php echo esc_html__('Torn Edges', 'washi-tape-generator'); ?></span>
                            </div>
                        </div>
                    </div>

                    <div class="form-actions">
                        <button type="button" id="save-washi-tape" class="button button-primary"><?php echo esc_html__('Save Washi Tape', 'washi-tape-generator'); ?></button>
                        <button type="button" id="reset-washi-tape" class="button"><?php echo esc_html__('Reset', 'washi-tape-generator'); ?></button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Preview & Saved Tapes Panel -->
        <div class="washi-tape-panel preview-panel">
            <div class="panel-header">
                <h2><?php echo esc_html__('Preview', 'washi-tape-generator'); ?></h2>
            </div>
            <div class="panel-body">
                <div class="preview-container">
                    <svg id="washi-svg" class="washi-svg" preserveAspectRatio="none"></svg>
                    <div class="content-box">
                        <h3><?php echo esc_html__('Washi Tape Preview', 'washi-tape-generator'); ?></h3>
                        <p><?php echo esc_html__('Customize your decorative tape using the controls', 'washi-tape-generator'); ?></p>
                    </div>
                </div>
            </div>

            <div class="panel-header saved-tapes-header">
                <h2><?php echo esc_html__('Saved Washi Tapes', 'washi-tape-generator'); ?></h2>
            </div>
            <div class="panel-body">
                <div id="saved-washi-tapes" class="saved-washi-tapes">
                    <div class="loading-indicator"><?php echo esc_html__('Loading...', 'washi-tape-generator'); ?></div>
                </div>
            </div>
        </div>
    </div>
</div>

================
File: includes/admin/class-washi-tape-admin.php
================
<?php

/**
 * Washi Tape Admin Class
 */
class Washi_Tape_Admin
{

    /**
     * Admin instance
     */
    private static $instance = null;

    /**
     * Get admin instance
     */
    public static function get_instance()
    {
        if (null === self::$instance) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    /**
     * Constructor
     */
    public function __construct()
    {
        // Add actions and filters
        add_action('admin_init', array($this, 'admin_init'));
    }

    /**
     * Admin init
     */
    public function admin_init()
    {
        // Register media uploader scripts for the image overlay
        add_action('admin_enqueue_scripts', array($this, 'enqueue_media_uploader'));
    }

    /**
     * Enqueue media uploader
     */
    public function enqueue_media_uploader($hook)
    {
        if ('toplevel_page_washi-tape-generator' !== $hook) {
            return;
        }

        wp_enqueue_media();
    }
}

// Initialize the admin class
Washi_Tape_Admin::get_instance();

================
File: includes/elementor/class-washi-tape-elementor.php
================
<?php

namespace Washi_Tape\Elementor;

if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly
}

/**
 * Add Washi Tape Controls to Elementor widgets
 */
class Washi_Tape_Controls
{
    /**
     * Initialize the class
     */
    public function __construct()
    {
        // Frontend styles
        add_action('elementor/frontend/after_enqueue_styles', [$this, 'enqueue_styles']);
        add_action('wp_enqueue_scripts', [$this, 'enqueue_styles']);

        // Editor styles
        add_action('elementor/editor/after_enqueue_styles', [$this, 'enqueue_editor_styles']);
        add_action('elementor/preview/enqueue_styles', [$this, 'enqueue_preview_styles']);

        // Controls
        add_action('elementor/element/after_section_end', [$this, 'add_washi_tape_controls'], 10, 3);

        // Content filter
        add_filter('elementor/widget/render_content', [$this, 'apply_washi_tape'], 10, 2);

        // Add editor script loading
        add_action('elementor/preview/enqueue_scripts', [$this, 'enqueue_preview_scripts']);

        // Register Washi Tape Controls
        add_action('elementor/controls/register', [$this, 'register_washi_tape_control']);
    }

    /**
     * Add Washi Tape controls to Elementor widgets
     */
    public function add_washi_tape_controls($element, $section_id, $args)
    {
        if ('section_custom_css' !== $section_id) {
            return;
        }

        // Log the start of control addition process
        if (WP_DEBUG) {
            error_log('Washi Tape Generator: Starting to add controls for element type: ' . $element->get_type());
        }

        if (!did_action('elementor/loaded')) {
            error_log('Washi Tape Generator: Elementor not loaded when attempting to add controls');
            return;
        }

        if (!class_exists('\Elementor\Plugin')) {
            error_log('Washi Tape Generator: Elementor Plugin class not found');
            return;
        }

        if (!$element instanceof \Elementor\Element_Base) {
            error_log('Washi Tape Generator: Invalid Elementor element instance. Got: ' . get_class($element));
            return;
        }

        $allowed_types = ['widget', 'section', 'column'];
        if (!in_array($element->get_type(), $allowed_types, true)) {
            error_log(sprintf(
                'Washi Tape Generator: Unsupported Elementor element type: %s. Allowed types are: %s',
                $element->get_type(),
                implode(', ', $allowed_types)
            ));
            return;
        }

        try {
            // Log database interaction
            if (WP_DEBUG) {
                error_log('Washi Tape Generator: Attempting to fetch washi tapes from database');
            }

            // Get all washi tapes
            $db = new \Washi_Tape_DB();
            $washi_tapes = $db->get_all_washi_tapes();

            if (empty($washi_tapes) && WP_DEBUG) {
                error_log('Washi Tape Generator: No washi tapes found in database');
            }

            // Start adding controls
            $element->start_controls_section(
                'section_washi_tape',
                [
                    'label' => __('Tape Decor', 'washi-tape-generator'),
                    'tab' => \Elementor\Controls_Manager::TAB_ADVANCED,
                ]
            );

            // Prepare options
            $options = array(
                '0' => __('None', 'washi-tape-generator'),
            );

            if (!empty($washi_tapes)) {
                foreach ($washi_tapes as $tape) {
                    $options[$tape->id] = $tape->title;
                }
            }

            $element->add_control(
                'enable_washi_tape',
                [
                    'label' => __('Enable Tape Decor', 'washi-tape-generator'),
                    'type' => \Elementor\Controls_Manager::SWITCHER,
                    'default' => '',
                    'label_on' => __('Yes', 'washi-tape-generator'),
                    'label_off' => __('No', 'washi-tape-generator'),
                    'return_value' => 'yes',
                ]
            );

            $element->add_control(
                'washi_tape_id',
                [
                    'label' => __('Select Tape', 'washi-tape-generator'),
                    'type' => \Elementor\Controls_Manager::SELECT,
                    'default' => '0',
                    'options' => $options,
                    'condition' => [
                        'enable_washi_tape' => 'yes',
                    ],
                ]
            );

            $element->add_control(
                'washi_tape_position',
                [
                    'label' => __('Position', 'washi-tape-generator'),
                    'type' => \Elementor\Controls_Manager::SELECT,
                    'default' => 'top-left',
                    'options' => [
                        'top-left' => __('Top Left', 'washi-tape-generator'),
                        'top-right' => __('Top Right', 'washi-tape-generator'),
                        'bottom-left' => __('Bottom Left', 'washi-tape-generator'),
                        'bottom-right' => __('Bottom Right', 'washi-tape-generator'),
                    ],
                    'condition' => [
                        'enable_washi_tape' => 'yes',
                        'washi_tape_id!' => '0',
                    ],
                ]
            );

            $element->add_control(
                'washi_tape_rotation',
                [
                    'label' => __('Rotation', 'washi-tape-generator'),
                    'type' => \Elementor\Controls_Manager::SLIDER,
                    'size_units' => ['deg'],
                    'range' => [
                        'deg' => [
                            'min' => -180,
                            'max' => 180,
                            'step' => 1,
                        ],
                    ],
                    'default' => [
                        'unit' => 'deg',
                        'size' => 0,
                    ],
                    'condition' => [
                        'enable_washi_tape' => 'yes',
                        'washi_tape_id!' => '0',
                    ],
                    'selectors' => [
                        '{{WRAPPER}} .elementor-washi-tape' => 'transform: rotate({{SIZE}}{{UNIT}});',
                    ],
                ]
            );

            $element->add_control(
                'washi_tape_z_index',
                [
                    'label' => __('Z-Index', 'washi-tape-generator'),
                    'type' => \Elementor\Controls_Manager::NUMBER,
                    'min' => -1000,
                    'max' => 1000,
                    'step' => 1,
                    'default' => 1,
                    'condition' => [
                        'enable_washi_tape' => 'yes',
                        'washi_tape_id!' => '0',
                    ],
                    'selectors' => [
                        '{{WRAPPER}} .elementor-washi-tape' => 'z-index: {{VALUE}};',
                    ],
                ]
            );

            $element->end_controls_section();

            if (WP_DEBUG) {
                error_log('Washi Tape Generator: Successfully added all controls to element');
            }
        } catch (\Exception $e) {
            error_log(sprintf(
                'Washi Tape Generator: Error adding controls - Message: %s | File: %s | Line: %d | Trace: %s',
                $e->getMessage(),
                $e->getFile(),
                $e->getLine(),
                $e->getTraceAsString()
            ));
            return;
        }
    }

    /**
     * Enqueue styles
     */
    public function enqueue_styles()
    {
        wp_enqueue_style(
            'washi-tape-elementor',
            WASHI_TAPE_URL . 'assets/css/elementor.css',
            [],
            WASHI_TAPE_VERSION
        );
    }

    /**
     * Enqueue editor styles
     */
    public function enqueue_editor_styles()
    {
        wp_enqueue_style(
            'washi-tape-elementor-editor',
            WASHI_TAPE_URL . 'assets/css/elementor-editor.css',
            [],
            WASHI_TAPE_VERSION
        );
    }

    /**
     * Enqueue preview styles
     */
    public function enqueue_preview_styles()
    {
        wp_enqueue_style(
            'washi-tape-elementor-preview',
            WASHI_TAPE_URL . 'assets/css/elementor-preview.css',
            [],
            WASHI_TAPE_VERSION
        );
    }

    /**
     * Enqueue preview scripts
     */
    public function enqueue_preview_scripts()
    {
        wp_enqueue_script(
            'washi-tape-elementor-preview',
            WASHI_TAPE_URL . 'assets/js/elementor-preview.js',
            ['jquery'],
            WASHI_TAPE_VERSION,
            true
        );
    }

    /**
     * Apply Washi Tape to widget content
     */
    public function apply_washi_tape($content, $widget)
    {
        try {
            if (WP_DEBUG) {
                error_log('Washi Tape Generator: Attempting to apply washi tape to widget: ' . $widget->get_name());
            }

            // Get settings
            $settings = $widget->get_settings_for_display();

            // Check if washi tape is enabled
            if (empty($settings['enable_washi_tape']) || $settings['enable_washi_tape'] !== 'yes') {
                return $content;
            }

            // Check if a tape is selected
            if (empty($settings['washi_tape_id']) || $settings['washi_tape_id'] === '0') {
                return $content;
            }

            // Get the washi tape data
            $db = new \Washi_Tape_DB();
            $tape = $db->get_washi_tape($settings['washi_tape_id']);

            if (!$tape) {
                if (WP_DEBUG) {
                    error_log('Washi Tape Generator: Tape not found with ID: ' . $settings['washi_tape_id']);
                }
                return $content;
            }

            // Get position
            $position = !empty($settings['washi_tape_position']) ? $settings['washi_tape_position'] : 'top-left';

            // Create the washi tape HTML
            $tape_html = sprintf(
                '<div class="elementor-washi-tape washi-tape-position-%s" style="background-image: url(%s);" data-tape-id="%d"></div>',
                esc_attr($position),
                esc_url($tape->image_url),
                (int) $tape->id
            );

            if (WP_DEBUG) {
                error_log('Washi Tape Generator: Successfully applied washi tape to widget');
            }

            return $tape_html . $content;
        } catch (\Exception $e) {
            error_log(sprintf(
                'Washi Tape Generator: Error applying washi tape - Message: %s | File: %s | Line: %d | Trace: %s',
                $e->getMessage(),
                $e->getFile(),
                $e->getLine(),
                $e->getTraceAsString()
            ));
            return $content;
        }
    }

    /**
     * Register Washi Tape Control
     * 
     * @param \Elementor\Controls_Manager $controls_manager Elementor controls manager.
     */
    public function register_washi_tape_control($controls_manager)
    {
        try {
            if (WP_DEBUG) {
                error_log('Washi Tape Generator: Starting control registration');
            }

            if (!$controls_manager instanceof \Elementor\Controls_Manager) {
                error_log('Washi Tape Generator: Invalid controls manager instance');
                return;
            }

            // Get all washi tapes from database
            $db = new \Washi_Tape_DB();
            $washi_tapes = $db->get_all_washi_tapes();

            if (empty($washi_tapes) && WP_DEBUG) {
                error_log('Washi Tape Generator: No washi tapes found during control registration');
            }

            // Prepare options for the dropdown
            $options = [
                '0' => __('None', 'washi-tape-generator'),
            ];

            if (!empty($washi_tapes)) {
                foreach ($washi_tapes as $tape) {
                    $options[$tape->id] = $tape->title;
                }
            }

            // Register a new control type
            $controls_manager->add_control(
                'washi_tape_selector',
                [
                    'label' => __('Washi Tape', 'washi-tape-generator'),
                    'type' => \Elementor\Controls_Manager::SELECT,
                    'default' => '0',
                    'options' => $options,
                    'label_block' => true,
                ]
            );

            if (WP_DEBUG) {
                error_log('Washi Tape Generator: Successfully registered washi tape control');
            }
        } catch (\Exception $e) {
            error_log(sprintf(
                'Washi Tape Generator: Error registering control - Message: %s | File: %s | Line: %d | Trace: %s',
                $e->getMessage(),
                $e->getFile(),
                $e->getLine(),
                $e->getTraceAsString()
            ));
        }
    }
}

================
File: includes/class-washi-tape-db.php
================
<?php

/**
 * Washi Tape Database Class
 */
class Washi_Tape_DB
{

    /**
     * Table name
     */
    private $table_name;

    /**
     * Constructor
     */
    public function __construct()
    {
        global $wpdb;
        $this->table_name = $wpdb->prefix . 'washi_tapes';
    }

    /**
     * Create database tables
     */
    public function create_tables()
    {
        global $wpdb;

        $charset_collate = $wpdb->get_charset_collate();

        $sql = "CREATE TABLE $this->table_name (
            id mediumint(9) NOT NULL AUTO_INCREMENT,
            title varchar(255) NOT NULL,
            svg longtext NOT NULL,
            settings longtext NOT NULL,
            created_at datetime DEFAULT CURRENT_TIMESTAMP NOT NULL,
            updated_at datetime NOT NULL,
            PRIMARY KEY  (id)
        ) $charset_collate;";

        require_once ABSPATH . 'wp-admin/includes/upgrade.php';
        dbDelta($sql);

        // Add error logging
        if ($wpdb->last_error) {
            error_log('Washi Tape Table Creation Error (DB Class): ' . $wpdb->last_error);
        } else {
            error_log('Washi Tape Table Creation Success (DB Class)');
        }
    }

    /**
     * Create a new washi tape design
     */
    public function create_washi_tape($title, $svg, $settings)
    {
        global $wpdb;

        $current_time = current_time('mysql');

        $result = $wpdb->insert(
            $this->table_name,
            array(
                'title' => $title,
                'svg' => $svg,
                'settings' => $settings,
                'updated_at' => $current_time
            ),
            array('%s', '%s', '%s', '%s')
        );

        return $result ? $wpdb->insert_id : false;
    }

    /**
     * Update an existing washi tape design
     */
    public function update_washi_tape($id, $title, $svg, $settings)
    {
        global $wpdb;

        $current_time = current_time('mysql');

        $result = $wpdb->update(
            $this->table_name,
            array(
                'title' => $title,
                'svg' => $svg,
                'settings' => $settings,
                'updated_at' => $current_time
            ),
            array('id' => $id),
            array('%s', '%s', '%s', '%s'),
            array('%d')
        );

        return $result !== false ? $id : false;
    }

    /**
     * Delete a washi tape design
     */
    public function delete_washi_tape($id)
    {
        global $wpdb;

        $result = $wpdb->delete(
            $this->table_name,
            array('id' => $id),
            array('%d')
        );

        return $result !== false;
    }

    /**
     * Get a single washi tape design
     */
    public function get_washi_tape($id)
    {
        global $wpdb;

        $query = $wpdb->prepare(
            "SELECT * FROM $this->table_name WHERE id = %d",
            $id
        );

        return $wpdb->get_row($query);
    }

    /**
     * Get all washi tape designs
     */
    public function get_all_washi_tapes()
    {
        global $wpdb;

        $query = "SELECT * FROM $this->table_name ORDER BY updated_at DESC";

        return $wpdb->get_results($query);
    }
}

================
File: washi-tape-generator.php
================
<?php

/**
 * Plugin Name: Washi Tape Generator
 * Description: Create and apply decorative washi tape designs to your Elementor elements
 * Version: 1.0.2
 * Author: Richard McLain
 * Text Domain: frugle.com
 */

// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Main Washi Tape Generator Plugin Class
 */
class Washi_Tape_Generator
{

    /**
     * Plugin instance
     */
    private static $instance = null;

    /**
     * Plugin version
     */
    const VERSION = '1.0.0';

    /**
     * Get plugin instance
     */
    public static function get_instance()
    {
        if (null === self::$instance) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    /**
     * Constructor
     */
    public function __construct()
    {
        // Define constants
        $this->define_constants();

        // Include required files
        $this->includes();

        // Initialize hooks
        $this->init_hooks();

        // Make sure table exists
        $this->check_and_create_table();

        // Initialize admin page
        if (is_admin()) {
            add_action('admin_menu', array($this, 'add_admin_menu'));
            add_action('admin_enqueue_scripts', array($this, 'enqueue_admin_assets'));
            add_action('wp_ajax_save_washi_tape', array($this, 'save_washi_tape'));
            add_action('wp_ajax_delete_washi_tape', array($this, 'delete_washi_tape'));
            add_action('wp_ajax_get_washi_tapes', array($this, 'get_washi_tapes'));
            add_action('wp_ajax_get_washi_tape_svg', array($this, 'get_washi_tape_svg'));
        }
    }

    /**
     * Define plugin constants
     */
    private function define_constants()
    {
        define('WASHI_TAPE_PLUGIN_URL', plugin_dir_url(__FILE__));
        define('WASHI_TAPE_URL', plugin_dir_url(__FILE__));
        define('WASHI_TAPE_PLUGIN_PATH', plugin_dir_path(__FILE__));
        define('WASHI_TAPE_VERSION', self::VERSION);
    }

    /**
     * Include required files
     */
    private function includes()
    {
        // Include admin class
        require_once WASHI_TAPE_PLUGIN_PATH . 'includes/admin/class-washi-tape-admin.php';

        // Include database class
        require_once WASHI_TAPE_PLUGIN_PATH . 'includes/class-washi-tape-db.php';

        // Include Elementor integration if Elementor is active
        if (did_action('elementor/loaded')) {
            require_once WASHI_TAPE_PLUGIN_PATH . 'includes/elementor/class-washi-tape-elementor.php';
        }
    }

    /**
     * Initialize hooks
     */
    private function init_hooks()
    {
        // Register activation hook
        register_activation_hook(__FILE__, array($this, 'activate'));

        // Add action for Elementor integration
        add_action('plugins_loaded', array($this, 'init_elementor_integration'));

        // Add front-end scripts
        add_action('wp_enqueue_scripts', array($this, 'enqueue_frontend_assets'));
    }

    /**
     * Plugin activation
     */
    public function activate()
    {
        // Create database tables
        require_once WASHI_TAPE_PLUGIN_PATH . 'includes/class-washi-tape-db.php';
        $db = new Washi_Tape_DB();
        $db->create_tables();

        // Add plugin version to database
        update_option('washi_tape_version', self::VERSION);
    }

    /**
     * Initialize Elementor integration
     */
    public function init_elementor_integration()
    {
        // Check if Elementor is installed and activated
        if (!did_action('elementor/loaded')) {
            return;
        }

        // Include and initialize the Elementor integration
        require_once WASHI_TAPE_PLUGIN_PATH . 'includes/elementor/class-washi-tape-elementor.php';
        new \Washi_Tape\Elementor\Washi_Tape_Controls();
    }

    /**
     * Add admin menu
     */
    public function add_admin_menu()
    {
        add_menu_page(
            __('Washi Tape Generator', 'washi-tape-generator'),
            __('Washi Tape', 'washi-tape-generator'),
            'manage_options',
            'washi-tape-generator',
            array($this, 'render_admin_page'),
            'dashicons-admin-appearance',
            30
        );
    }

    /**
     * Render admin page
     */
    public function render_admin_page()
    {
        require_once WASHI_TAPE_PLUGIN_PATH . 'includes/admin/views/admin-page.php';
    }

    /**
     * Enqueue admin assets
     */
    public function enqueue_admin_assets($hook)
    {
        if ('toplevel_page_washi-tape-generator' !== $hook) {
            return;
        }

        // Enqueue styles
        wp_enqueue_style(
            'washi-tape-admin-style',
            WASHI_TAPE_PLUGIN_URL . 'assets/css/admin-style.css',
            array(),
            WASHI_TAPE_VERSION
        );

        // Enqueue scripts
        wp_enqueue_script(
            'washi-tape-admin-script',
            WASHI_TAPE_PLUGIN_URL . 'assets/js/admin-script.js',
            array('jquery'),
            WASHI_TAPE_VERSION,
            true
        );

        // Localize script with ajax url
        wp_localize_script(
            'washi-tape-admin-script',
            'washiTapeParams',
            array(
                'ajaxUrl' => admin_url('admin-ajax.php'),
                'nonce' => wp_create_nonce('washi_tape_nonce')
            )
        );
    }

    /**
     * Enqueue frontend assets
     */
    public function enqueue_frontend_assets()
    {
        // Only enqueue if Elementor is active and we have washi tapes applied
        if (did_action('elementor/loaded')) {
            wp_enqueue_style(
                'washi-tape-frontend-style',
                WASHI_TAPE_PLUGIN_URL . 'assets/css/frontend-style.css',
                array(),
                WASHI_TAPE_VERSION
            );

            wp_enqueue_script(
                'washi-tape-frontend-script',
                WASHI_TAPE_PLUGIN_URL . 'assets/js/frontend-script.js',
                array('jquery'),
                WASHI_TAPE_VERSION,
                true
            );
        }
    }

    /**
     * Check if table exists and create it if it doesn't
     * This serves as a failsafe if the activation hook didn't work
     */
    public function check_and_create_table()
    {
        global $wpdb;

        $table_name = $wpdb->prefix . 'washi_tapes';

        // Check if the table exists
        $table_exists = $wpdb->get_var("SHOW TABLES LIKE '$table_name'") === $table_name;

        if (!$table_exists) {
            // Table doesn't exist, so create it
            error_log('Washi Tape Generator: Table does not exist, creating it now');

            $charset_collate = $wpdb->get_charset_collate();

            // More compatible SQL version without ON UPDATE
            $sql = "CREATE TABLE $table_name (
            id mediumint(9) NOT NULL AUTO_INCREMENT,
            title varchar(255) NOT NULL,
            svg longtext NOT NULL,
            settings longtext NOT NULL,
            created_at datetime DEFAULT CURRENT_TIMESTAMP NOT NULL,
            updated_at datetime NOT NULL,
            PRIMARY KEY  (id)
        ) $charset_collate;";

            require_once ABSPATH . 'wp-admin/includes/upgrade.php';
            dbDelta($sql);

            // Log any errors
            if ($wpdb->last_error) {
                error_log('Washi Tape Table Creation Error: ' . $wpdb->last_error);
            } else {
                error_log('Washi Tape Table Created Successfully');
            }
        }
    }

    /**
     * AJAX: Save washi tape design
     */
    public function save_washi_tape()
    {
        // Check nonce
        check_ajax_referer('washi_tape_nonce', 'nonce');

        // Check user capabilities
        if (!current_user_can('manage_options')) {
            wp_send_json_error(array('message' => __('You do not have permission to perform this action.', 'washi-tape-generator')));
        }

        // Get data
        $title = isset($_POST['title']) ? sanitize_text_field($_POST['title']) : '';
        $svg = isset($_POST['svg']) ? $_POST['svg'] : ''; // We'll sanitize SVG specifically
        $settings = isset($_POST['settings']) ? $_POST['settings'] : ''; // We'll sanitize JSON later

        // Validate data
        if (empty($title) || empty($svg)) {
            wp_send_json_error(array('message' => __('Required fields are missing.', 'washi-tape-generator')));
        }

        // Sanitize SVG (basic sanitization, consider a more robust method for production)
        $svg = $this->sanitize_svg($svg);

        // Sanitize settings JSON
        $settings = json_decode(stripslashes($settings), true);
        if (json_last_error() !== JSON_ERROR_NONE) {
            wp_send_json_error(array('message' => __('Invalid settings format.', 'washi-tape-generator')));
        }
        $settings = json_encode($settings);

        // Save to database
        $db = new Washi_Tape_DB();
        $id = isset($_POST['id']) ? intval($_POST['id']) : 0;

        if ($id > 0) {
            // Update existing
            $result = $db->update_washi_tape($id, $title, $svg, $settings);
        } else {
            // Create new
            $result = $db->create_washi_tape($title, $svg, $settings);
        }

        if ($result) {
            wp_send_json_success(array(
                'message' => __('Washi tape saved successfully.', 'washi-tape-generator'),
                'id' => $result
            ));
        } else {
            wp_send_json_error(array('message' => __('Error saving washi tape.', 'washi-tape-generator')));
        }
    }

    /**
     * AJAX: Delete washi tape design
     */
    public function delete_washi_tape()
    {
        // Check nonce
        check_ajax_referer('washi_tape_nonce', 'nonce');

        // Check user capabilities
        if (!current_user_can('manage_options')) {
            wp_send_json_error(array('message' => __('You do not have permission to perform this action.', 'washi-tape-generator')));
        }

        // Get data
        $id = isset($_POST['id']) ? intval($_POST['id']) : 0;

        // Validate data
        if ($id <= 0) {
            wp_send_json_error(array('message' => __('Invalid washi tape ID.', 'washi-tape-generator')));
        }

        // Delete from database
        $db = new Washi_Tape_DB();
        $result = $db->delete_washi_tape($id);

        if ($result) {
            wp_send_json_success(array('message' => __('Washi tape deleted successfully.', 'washi-tape-generator')));
        } else {
            wp_send_json_error(array('message' => __('Error deleting washi tape.', 'washi-tape-generator')));
        }
    }

    /**
     * AJAX: Get all washi tapes
     */
    public function get_washi_tapes()
    {
        // Check nonce
        check_ajax_referer('washi_tape_nonce', 'nonce');

        // Check user capabilities
        if (!current_user_can('manage_options')) {
            wp_send_json_error(array('message' => __('You do not have permission to perform this action.', 'washi-tape-generator')));
        }

        // Get from database
        $db = new Washi_Tape_DB();
        $washi_tapes = $db->get_all_washi_tapes();

        wp_send_json_success(array('washi_tapes' => $washi_tapes));
    }

    /**
     * AJAX: Get washi tape SVG
     */
    public function get_washi_tape_svg()
    {
        // Check nonce
        check_ajax_referer('washi_tape_nonce', 'nonce');

        // Get tape ID
        $id = isset($_POST['id']) ? intval($_POST['id']) : 0;

        if ($id <= 0) {
            wp_send_json_error(array('message' => __('Invalid washi tape ID.', 'washi-tape-generator')));
        }

        // Get from database
        $db = new Washi_Tape_DB();
        $washi_tape = $db->get_washi_tape($id);

        if (!$washi_tape) {
            wp_send_json_error(array('message' => __('Washi tape not found.', 'washi-tape-generator')));
        }

        wp_send_json_success(array(
            'id' => $washi_tape->id,
            'svg' => $washi_tape->svg
        ));
    }

    /**
     * Sanitize SVG
     * 
     * Basic SVG sanitization (consider using a more robust solution for production)
     */
    private function sanitize_svg($svg)
    {
        // Remove any scripts
        $svg = preg_replace('/<script\b[^>]*>(.*?)<\/script>/is', '', $svg);

        // Remove event handlers
        $svg = preg_replace('/\bon\w+\s*=\s*["\'][^"\']*["\']/i', '', $svg);

        // Clean up quotes and spaces
        $svg = str_replace('&quot;', '"', $svg);
        $svg = str_replace('\&quot;', '"', $svg);
        $svg = preg_replace('/\s+/', ' ', $svg);
        $svg = str_replace('" >', '">', $svg);
        $svg = str_replace('> <', '><', $svg);

        // Ensure proper xmlns attribute
        if (strpos($svg, 'xmlns="http://www.w3.org/2000/svg"') === false) {
            $svg = str_replace('<svg', '<svg xmlns="http://www.w3.org/2000/svg"', $svg);
        }

        return $svg;
    }
}

// Initialize the plugin
function washi_tape_generator_init()
{
    Washi_Tape_Generator::get_instance();
}
add_action('plugins_loaded', 'washi_tape_generator_init');



================================================================
End of Codebase
================================================================

================
File: washi-tape-generator/washi-tape-generator.php
================
<?php

/**
 * Plugin Name: Washi Tape Generator
 * Description: Create and apply decorative washi tape designs to your Elementor elements
 * Version: 1.0.3
 * Author: Richard McLain
 * Text Domain: frugle.com
 */

// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Main Washi Tape Generator Plugin Class
 */
class Washi_Tape_Generator
{

    /**
     * Plugin instance
     */
    private static $instance = null;

    /**
     * Plugin version
     */
    const VERSION = '1.0.0';

    /**
     * Get plugin instance
     */
    public static function get_instance()
    {
        if (null === self::$instance) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    /**
     * Constructor
     */
    public function __construct()
    {
        // Define constants
        $this->define_constants();

        // Include required files
        $this->includes();

        // Initialize hooks
        $this->init_hooks();

        // Make sure table exists
        $this->check_and_create_table();

        // Initialize admin page
        if (is_admin()) {
            add_action('admin_menu', array($this, 'add_admin_menu'));
            add_action('admin_enqueue_scripts', array($this, 'enqueue_admin_assets'));
            add_action('wp_ajax_save_washi_tape', array($this, 'save_washi_tape'));
            add_action('wp_ajax_delete_washi_tape', array($this, 'delete_washi_tape'));
            add_action('wp_ajax_get_washi_tapes', array($this, 'get_washi_tapes'));
            add_action('wp_ajax_get_washi_tape_svg', array($this, 'get_washi_tape_svg'));
        }
    }

    /**
     * Define plugin constants
     */
    private function define_constants()
    {
        define('WASHI_TAPE_PLUGIN_URL', plugin_dir_url(__FILE__));
        define('WASHI_TAPE_URL', plugin_dir_url(__FILE__));
        define('WASHI_TAPE_PLUGIN_PATH', plugin_dir_path(__FILE__));
        define('WASHI_TAPE_VERSION', self::VERSION);
    }

    /**
     * Include required files
     */
    private function includes()
    {
        // Include admin class
        require_once WASHI_TAPE_PLUGIN_PATH . 'includes/admin/class-washi-tape-admin.php';

        // Include database class
        require_once WASHI_TAPE_PLUGIN_PATH . 'includes/class-washi-tape-db.php';

        // Include Elementor integration if Elementor is active
        if (did_action('elementor/loaded')) {
            require_once WASHI_TAPE_PLUGIN_PATH . 'includes/elementor/class-washi-tape-elementor.php';
        }
    }

    /**
     * Initialize hooks
     */
    private function init_hooks()
    {
        // Register activation hook
        register_activation_hook(__FILE__, array($this, 'activate'));

        // Add action for Elementor integration
        add_action('plugins_loaded', array($this, 'init_elementor_integration'));

        // Add front-end scripts
        add_action('wp_enqueue_scripts', array($this, 'enqueue_frontend_assets'));
    }

    /**
     * Plugin activation
     */
    public function activate()
    {
        // Create database tables
        require_once WASHI_TAPE_PLUGIN_PATH . 'includes/class-washi-tape-db.php';
        $db = new Washi_Tape_DB();
        $db->create_tables();

        // Add plugin version to database
        update_option('washi_tape_version', self::VERSION);
    }

    /**
     * Initialize Elementor integration
     */
    public function init_elementor_integration()
    {
        // Check if Elementor is installed and activated
        if (!did_action('elementor/loaded')) {
            return;
        }

        // Make sure this happens after Elementor and WooCommerce are fully loaded
        add_action('elementor/init', function () {
            // Include and initialize the Elementor integration
            require_once WASHI_TAPE_PLUGIN_PATH . 'includes/elementor/class-washi-tape-elementor.php';
            new \Washi_Tape\Elementor\Washi_Tape_Controls();
        });
    }

    /**
     * Add admin menu
     */
    public function add_admin_menu()
    {
        add_menu_page(
            __('Washi Tape Generator', 'washi-tape-generator'),
            __('Washi Tape', 'washi-tape-generator'),
            'manage_options',
            'washi-tape-generator',
            array($this, 'render_admin_page'),
            'dashicons-admin-appearance',
            30
        );
    }

    /**
     * Render admin page
     */
    public function render_admin_page()
    {
        require_once WASHI_TAPE_PLUGIN_PATH . 'includes/admin/views/admin-page.php';
    }

    /**
     * Enqueue admin assets
     */
    public function enqueue_admin_assets($hook)
    {
        if ('toplevel_page_washi-tape-generator' !== $hook) {
            return;
        }

        // Enqueue styles
        wp_enqueue_style(
            'washi-tape-admin-style',
            WASHI_TAPE_PLUGIN_URL . 'assets/css/admin-style.css',
            array(),
            WASHI_TAPE_VERSION
        );

        // Enqueue scripts
        wp_enqueue_script(
            'washi-tape-admin-script',
            WASHI_TAPE_PLUGIN_URL . 'assets/js/admin-script.js',
            array('jquery'),
            WASHI_TAPE_VERSION,
            true
        );

        // Localize script with ajax url
        wp_localize_script(
            'washi-tape-admin-script',
            'washiTapeParams',
            array(
                'ajaxUrl' => admin_url('admin-ajax.php'),
                'nonce' => wp_create_nonce('washi_tape_nonce')
            )
        );
    }

    /**
     * Enqueue frontend assets
     */
    public function enqueue_frontend_assets()
    {
        // Always enqueue frontend styles and scripts
        wp_enqueue_style(
            'washi-tape-frontend-style',
            WASHI_TAPE_PLUGIN_URL . 'assets/css/frontend-style.css',
            array(),
            WASHI_TAPE_VERSION
        );

        wp_enqueue_script(
            'washi-tape-frontend-script',
            WASHI_TAPE_PLUGIN_URL . 'assets/js/frontend-script.js',
            array('jquery'),
            WASHI_TAPE_VERSION,
            true
        );

        // Add Elementor-specific assets if Elementor is active
        if (did_action('elementor/loaded')) {
            wp_enqueue_style(
                'washi-tape-elementor-style',
                WASHI_TAPE_PLUGIN_URL . 'assets/css/elementor.css',
                array(),
                WASHI_TAPE_VERSION
            );
        }
    }

    /**
     * Check if table exists and create it if it doesn't
     * This serves as a failsafe if the activation hook didn't work
     */
    public function check_and_create_table()
    {
        global $wpdb;

        $table_name = $wpdb->prefix . 'washi_tapes';

        // Check if the table exists
        $table_exists = $wpdb->get_var("SHOW TABLES LIKE '$table_name'") === $table_name;

        if (!$table_exists) {
            // Table doesn't exist, so create it
            error_log('Washi Tape Generator: Table does not exist, creating it now');

            $charset_collate = $wpdb->get_charset_collate();

            // More compatible SQL version without ON UPDATE
            $sql = "CREATE TABLE $table_name (
            id mediumint(9) NOT NULL AUTO_INCREMENT,
            title varchar(255) NOT NULL,
            svg longtext NOT NULL,
            settings longtext NOT NULL,
            created_at datetime DEFAULT CURRENT_TIMESTAMP NOT NULL,
            updated_at datetime NOT NULL,
            PRIMARY KEY  (id)
        ) $charset_collate;";

            require_once ABSPATH . 'wp-admin/includes/upgrade.php';
            dbDelta($sql);

            // Log any errors
            if ($wpdb->last_error) {
                error_log('Washi Tape Table Creation Error: ' . $wpdb->last_error);
            } else {
                error_log('Washi Tape Table Created Successfully');
            }
        }
    }

    /**
     * AJAX: Save washi tape design
     */
    public function save_washi_tape()
    {
        // Check nonce
        check_ajax_referer('washi_tape_nonce', 'nonce');

        // Check user capabilities
        if (!current_user_can('manage_options')) {
            wp_send_json_error(array('message' => __('You do not have permission to perform this action.', 'washi-tape-generator')));
        }

        // Get data
        $title = isset($_POST['title']) ? sanitize_text_field($_POST['title']) : '';
        $svg = isset($_POST['svg']) ? $_POST['svg'] : ''; // We'll sanitize SVG specifically
        $settings = isset($_POST['settings']) ? $_POST['settings'] : ''; // We'll sanitize JSON later

        // Validate data
        if (empty($title) || empty($svg)) {
            wp_send_json_error(array('message' => __('Required fields are missing.', 'washi-tape-generator')));
        }

        // Clean up the SVG
        $svg = $this->sanitize_svg($svg);

        // Remove any inline styles
        $svg = preg_replace('/style="[^"]*"/', '', $svg);

        // Ensure proper xmlns attribute
        if (strpos($svg, 'xmlns="http://www.w3.org/2000/svg"') === false) {
            $svg = str_replace('<svg', '<svg xmlns="http://www.w3.org/2000/svg"', $svg);
        }

        // Sanitize settings JSON
        $settings = json_decode(stripslashes($settings), true);
        if (json_last_error() !== JSON_ERROR_NONE) {
            wp_send_json_error(array('message' => __('Invalid settings format.', 'washi-tape-generator')));
        }
        $settings = json_encode($settings);

        // Save to database
        $db = new Washi_Tape_DB();
        $id = isset($_POST['id']) ? intval($_POST['id']) : 0;

        if ($id > 0) {
            // Update existing
            $result = $db->update_washi_tape($id, $title, $svg, $settings);
        } else {
            // Create new
            $result = $db->create_washi_tape($title, $svg, $settings);
        }

        if ($result) {
            wp_send_json_success(array(
                'message' => __('Washi tape saved successfully.', 'washi-tape-generator'),
                'id' => $result
            ));
        } else {
            wp_send_json_error(array('message' => __('Error saving washi tape.', 'washi-tape-generator')));
        }
    }

    /**
     * AJAX: Delete washi tape design
     */
    public function delete_washi_tape()
    {
        // Check nonce
        check_ajax_referer('washi_tape_nonce', 'nonce');

        // Check user capabilities
        if (!current_user_can('manage_options')) {
            wp_send_json_error(array('message' => __('You do not have permission to perform this action.', 'washi-tape-generator')));
        }

        // Get data
        $id = isset($_POST['id']) ? intval($_POST['id']) : 0;

        // Validate data
        if ($id <= 0) {
            wp_send_json_error(array('message' => __('Invalid washi tape ID.', 'washi-tape-generator')));
        }

        // Delete from database
        $db = new Washi_Tape_DB();
        $result = $db->delete_washi_tape($id);

        if ($result) {
            wp_send_json_success(array('message' => __('Washi tape deleted successfully.', 'washi-tape-generator')));
        } else {
            wp_send_json_error(array('message' => __('Error deleting washi tape.', 'washi-tape-generator')));
        }
    }

    /**
     * AJAX: Get all washi tapes
     */
    public function get_washi_tapes()
    {
        // Check nonce
        check_ajax_referer('washi_tape_nonce', 'nonce');

        // Check user capabilities
        if (!current_user_can('manage_options')) {
            wp_send_json_error(array('message' => __('You do not have permission to perform this action.', 'washi-tape-generator')));
        }

        // Get from database
        $db = new Washi_Tape_DB();
        $washi_tapes = $db->get_all_washi_tapes();

        wp_send_json_success(array('washi_tapes' => $washi_tapes));
    }

    /**
     * AJAX: Get washi tape SVG
     */
    public function get_washi_tape_svg()
    {
        // Check nonce
        check_ajax_referer('washi_tape_nonce', 'nonce');

        // Get tape ID
        $id = isset($_POST['id']) ? intval($_POST['id']) : 0;

        if ($id <= 0) {
            wp_send_json_error(array('message' => __('Invalid washi tape ID.', 'washi-tape-generator')));
        }

        // Get from database
        $db = new Washi_Tape_DB();
        $washi_tape = $db->get_washi_tape($id);

        if (!$washi_tape) {
            wp_send_json_error(array('message' => __('Washi tape not found.', 'washi-tape-generator')));
        }

        wp_send_json_success(array(
            'id' => $washi_tape->id,
            'svg' => $washi_tape->svg
        ));
    }

    /**
     * Sanitize SVG
     * 
     * Basic SVG sanitization (consider using a more robust solution for production)
     */
    private function sanitize_svg($svg)
    {
        // Remove any scripts
        $svg = preg_replace('/<script\b[^>]*>(.*?)<\/script>/is', '', $svg);

        // Remove event handlers
        $svg = preg_replace('/\bon\w+\s*=\s*["\'][^"\']*["\']/i', '', $svg);

        // Clean up quotes and spaces
        $svg = str_replace('&quot;', '"', $svg);
        $svg = str_replace('\&quot;', '"', $svg);
        $svg = preg_replace('/\s+/', ' ', $svg);
        $svg = str_replace('" >', '">', $svg);
        $svg = str_replace('> <', '><', $svg);

        // Remove any inline styles
        $svg = preg_replace('/style="[^"]*"/', '', $svg);

        // Ensure proper xmlns attribute
        if (strpos($svg, 'xmlns="http://www.w3.org/2000/svg"') === false) {
            $svg = str_replace('<svg', '<svg xmlns="http://www.w3.org/2000/svg"', $svg);
        }

        return $svg;
    }
}

// Initialize the plugin
function washi_tape_generator_init()
{
    Washi_Tape_Generator::get_instance();
}
add_action('plugins_loaded', 'washi_tape_generator_init');



================================================================
End of Codebase
================================================================
